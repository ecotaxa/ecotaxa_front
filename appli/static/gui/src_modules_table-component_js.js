/*! For license information please see src_modules_table-component_js.js.LICENSE.txt */
(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_table-component_js"],{"./src/modules/table-component.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableComponent: () => (/* binding */ TableComponent)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var deep_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! deep-equal */ \"./node_modules/deep-equal/index.js\");\n/* harmony import */ var deep_equal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(deep_equal__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\n\n\nlet instance = [];\n// valid fetch urlparts\nconst fetchfroms = {\n  prjlist: '/gui/prjlist/',\n  prjsamplestats: '/gui/prjsamplestats',\n  userslist: '/gui/admin/userslist',\n  prjpredict: '/gui/prjsforprediction/'\n};\n// specifc css\nconst tablecss = {\n  showfull: 'showfull',\n  tipinline: \"tip-inline\",\n  searchresults: \"search-results\",\n  selectaction: \"selectaction\",\n  absinput: 'absinput',\n  disabled: 'table-disabled',\n  ascending: 'table-ascending',\n  descending: 'table-descending',\n  tipover: 'tipover absolute z-10 text-stone-50 rounded bg-stone-600 px-2 py-0.5 -mt-5 ml-12 '\n};\nconst tableselectors = {\n  table: '.table-table',\n  wrapper: '.table-wrapper',\n  top: '.table-top',\n  input: '.table-input',\n  search: '.table-search',\n  filters: '.table-filters',\n  sorter: '.table-sorter',\n  details: 'details[data-what=\"about\"]',\n  tip: '.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.component.table.tip,\n  tipover: '.tipover',\n  wait: 'wait-please',\n  sorton: '.sorton',\n};\n\nObject.freeze(tablecss);\nObject.freeze(tableselectors);\nconst dynamics = {};\n\nclass TableComponent {\n  instanceid = null;\n  grid = {\n    columns: [],\n    active: [],\n    hidden: [],\n    data: []\n  };\n  domdef = {\n    columns: [],\n    data: [],\n  };\n  wrapper = null;\n  dom = null;\n  params = null;\n  _events = {};\n  eventnames = {\n    init: \"table.init\",\n    update: \"table.update\",\n    refresh: \"table.refresh\",\n    resize: \"table.resize\",\n    search: \"table.search\",\n    searchend: \"table.searchend\",\n    sorting: \"table.sorting\",\n    sorted: \"table.sorted\",\n    dismiss: 'table.dismiss'\n  }\n  labels = {\n    placeholder: \"Search...\",\n    perPage: \"{select} entries per page\",\n    noRows: \"No entries found\",\n    info: \"Showing {start} to {end} of {rows} entries\",\n    noResults: \"No result match your search query\"\n  };\n  cellidname = \"id\";\n  searching = false;\n  sorting = false;\n  initialized = false;\n  plugins = {};\n  constructor(container, options = {}) {\n    if (!container) return;\n    container = container instanceof HTMLElement ? container : document.querySelector(container);\n    if (!container) return;\n    //can select multiples tables in one page  or load data in the same table\n    this.instanceid = (container.dataset.instanceid) ? container.dataset.instanceid : document.querySelectorAll('table').length;\n    if (!instance[this.instanceid] || !deep_equal__WEBPACK_IMPORTED_MODULE_1___default()(container.dataset, instance[this.instanceid].params)) {\n      this.init(container);\n    } else this.refresh();\n    return instance[this.instanceid];\n\n  }\n  init(container) {\n    this.params = container.dataset;\n    let table = container.querySelector('table');\n    if (!table) {\n      table = document.createElement('table');\n      container.appendChild(table);\n    }\n    table.id = 'table-' + container.id;\n    table.classList.add(tableselectors.table.substr(1))\n    this.dom = table;\n    let top = {\n      nodename: \"DIV\",\n      attributes: {\n        class: tableselectors.top.substr(1)\n      }\n    };\n    if (this.params.sortable) top.childnodes = [{\n      nodename: \"DIV\",\n      attributes: {\n        class: tableselectors.search.substr(1)\n      },\n      html: `<input type=\"search\" name=\"table-search\" placeholder=\"${this.labels.placeholder}\" class=\"${tableselectors.input.substr(1)}  ${_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.input}\">`\n    }];\n    let wrapper = this.objToElement({\n      nodename: 'DIV',\n      attributes: {\n        class: tableselectors.wrapper.substr(1)\n      },\n      childnodes: [top]\n    });\n    container.appendChild(wrapper);\n    wrapper.appendChild(table);\n    this.wrapper = wrapper;\n\n    this.labels = (this.params.labels) ? this.params.labels : this.labels;\n    // cellid\n    this.cellidname = (this.params.hasOwnProperty(\"cellid\")) ? this.params.cellid : this.cellidname;\n    // only valid from values - fetchfroms\n    this.params.from = (this.params.from) ? dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(this.params.from) : null;\n    const from = (this.params.from) ? ((Object.keys(fetchfroms).indexOf(this.params.from) >= 0) ? window.location.href.split('/gui/')[0] + fetchfroms[this.params.from] : null) : null;\n    if (from) {\n      if (this.params.defer) this.deferLoad(container, from);\n      else this.fetchData(container, from);\n    } else this.tableActivate(container);\n  }\n  /**\n   * Add custom event listener\n   * @param  {String} event\n   * @param  {Function} callback\n   * @return {Void}\n   */\n  on(event, callback) {\n    this._events = this._events || {}\n    this._events[event] = this._events[event] || []\n    this._events[event].push(callback)\n  }\n\n  /**\n   * Remove custom event listener\n   * @param  {String} event\n   * @param  {Function} callback\n   * @return {Void}\n   */\n  off(event, callback) {\n    this._events = this._events || {}\n    if (event in this._events === false) return\n    this._events[event].splice(this._events[event].indexOf(callback), 1)\n  }\n  emit(event, ...args) {\n    if (event in this._events === false) return;\n    for (let i = 0; i < this._events[event].length; i++) {\n      this._events[event][i](...args);\n    }\n\n  }\n  waitActivate(container) {\n    let waitdiv = container.querySelector('#' + tableselectors.wait);\n    if (!waitdiv) {\n      waitdiv = document.createElement('div');\n      waitdiv.id = tableselectors.wait;\n      container.append(waitdiv);\n    }\n    this.waitdiv = waitdiv;\n    this.timer = new Date();\n  }\n\n  waitDesactivate(message = null, type = 'info') {\n    if (!this.waitdiv) return;\n    if (message) this.waitdiv.innerHTML = `<div class=\"${type}\">${message}</div>`;\n    else this.waitdiv.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n  }\n\n  deferLoad(container, from) {\n    const btn = container.querySelector(this.params.defer);\n    if (!btn) return;\n\n    btn.addEventListener('click', (e) => {\n      this.fetchData(container, from);\n      btn.remove();\n    });\n  }\n\n  fetchData(container, fromurl, pagestart = 0) {\n    this.waitActivate(container);\n    const pagesize = (this.params.pagesize) ? this.params.pagesize : 0;\n\n    let from = (this.params.import) ? fromurl + '?' + new URLSearchParams({\n      typeimport: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(this.params.import),\n      window_start: pagestart,\n      window_size: pagesize,\n      gz: true,\n    }) : ((pagesize) ? fromurl + '?' + new URLSearchParams({\n      window_start: pagestart,\n      window_size: pagesize,\n      listall: ((this.params.listall) ? this.params.listall : false)\n    }) : ((this.params.listall) ? fromurl + '?' + new URLSearchParams({\n      listall: ((this.params.listall) ? this.params.listall : false)\n    }) : fromurl));\n    if (this.params.fromid) from += '/' + this.params.fromid;\n\n    fetch(from, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.fetchSettings)()).then(response => {\n      if (response.ok) return response.json();\n      return Promise.reject(response);\n    }).then(async tabledef => {\n\n      if (this.waitdiv) this.waitdiv.innerHTML = ((this.waitdiv.dataset.loaded) ? dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(this.waitdiv.dataset.loaded) : _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.default_messages.dataloaded);\n      if (pagestart === 0) {\n        await this.tableActivate(container, tabledef);\n      } else if (tabledef.length) this.domInsertRows(tabledef);\n      else pagesize = 0;\n      if (pagesize > 0) this.fetchData(container, fromurl, pagestart + pagesize);\n    })\n  }\n  async dataToTable(tabledef) {\n    if (!tabledef.data) return;\n    if (tabledef.columns) {\n      await this.convertColumns(tabledef);\n      let tr;\n      let thead = this.dom.tHead;\n      if (!thead) {\n        // create table headings\n        thead = document.createElement('thead');\n        tr = document.createElement('tr');\n        this.dom.appendChild(thead);\n      } else if (!thead.querySelector('tr')) {\n        tr = document.createElement('tr');\n\n      } else {\n        tr = thead.querySelector('tr');\n        tr.innerHTML = ``;\n      }\n      let tbody = (this.dom.tBodies.length) ? this.dom.tBodies[0] : null;\n      if (!tbody) {\n        tbody = document.createElement('tbody');\n        this.dom.appendChild(tbody);\n      }\n      const isjson = (!tabledef.hasOwnProperty('data') || (tabledef.hasOwnProperty('type') && tabledef.type === \"json\"));\n\n      this.grid.columns.forEach((column, index) => {\n\n        if (!column.hidden) {\n          const th = document.createElement('th');\n          th.innerHTML = column.label;\n          if (column.sort) th.dataset.sort = column.sort;\n          th.dataset.sortable = (column.sortable) ? true : false;\n          tr.appendChild(th);\n          this.grid.active.push(index);\n        } else this.grid.hidden.push(index);\n\n      });\n\n\n      thead.appendChild(tr);\n      if (isjson) {\n        this.grid.data = [];\n        tabledef.data.forEach((data, i) => {\n          const row = [];\n          let j = 0;\n          Object.entries(tabledef.columns).forEach(([key, column], i) => {\n            if (!column.hasOwnProperty('emptydata')) {\n              if (data.hasOwnProperty(key)) row[j] = data[key];\n              else if (column.field && data.hasOwnProperty(column.field)) row[j] = data[column.field];\n              else row[j] = null;\n              j++;\n            }\n          });\n          this.grid.data.push(row);\n        });\n\n      } else this.grid.data = tabledef.data;\n      const tfoot = this.dom.tFoot;\n      if (this.grid.active.length === 0) {\n        tbody.innerHTML = `<tr><td>${this.labels.noRows}</td</tr>`;\n        if (tfoot) tfoot.remove();\n        return;\n      } else if (tfoot && tfoot.querySelector('tr')) {\n        const tf = tfoot.querySelector('tr').childNodes;\n        this.grid.hidden.forEach(i => {\n          tf[i].remove();\n        });\n      };\n\n      this.renderTbody(tbody);\n    }\n  }\n\n  tableToData() {\n    if (!this.dom.querySelector('thead')) return;\n    this.dom.classList.add('hide');\n    const cell_to_obj = (cell) => {\n      const obj = {\n        data: cell.innerText,\n      }\n      if (cell.innerText !== cell.innerHTML) obj.html = cell.innerHTML;\n      return obj;\n    }\n    const ths = (this.dom.querySelectorAll('thead tr th').length) ? this.dom.querySelectorAll('thead tr th') : this.dom.querySelectorAll('thead tr td');\n    const trs = this.dom.querySelectorAll('tbody tr');\n    let active = 0,\n      hidden = 0;\n\n    function find_label(th) {\n      if (th.childNodes.length) return find_label(th.childNodes[0]);\n      else return th.innerText;\n    }\n    ths.forEach((th, index) => {\n      const col = Object.assign({}, th.dataset);\n      if (col.mask) th.classList.add('hidden');\n      if (col.hidden && (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.string_to_boolean)(col.hidden)) {\n        col.hidden = true;\n        th.remove();\n      }\n      col.label = find_label(th);\n      col.index = index;\n      if (col.hidden) this.grid.hidden.push(index);\n      else this.grid.active.push(index);\n      this.grid.columns.push(col);\n    });\n    const cellid = this.getCellId(this.cellidname);\n    trs.forEach((tr, i) => {\n      if (cellid < 0) tr.dataset.id = i;\n      else if (i === cellid) tr.dataset.id = this.getCellData(i, this.cellidname, cellid);\n      const data = [];\n      tr.querySelectorAll('th,td').forEach((td, index) => {\n        if (this.grid.columns[index].hasOwnProperty('mask')) td.classList.add('hidden');\n        if (this.grid.hidden.indexOf(index) >= 0) td.remove();\n        data.push(td.innerText);\n      });\n      this.grid.data.push(data)\n    });\n\n    this.dom.querySelectorAll('tfoot tr th').forEach((td, index) => {\n      if (this.grid.columns[index].hasOwnProperty('mask')) td.classList.add('hidden');\n      if (this.grid.hidden.indexOf(index) >= 0) td.remove();\n    });\n    this.dom.classList.remove('hide');\n  }\n  renderTbody(tbody) {\n    const l = this.grid.data.length;\n    for (let i = 0; i < l; i++) {\n      const tr = this.createTableRow(this.grid.data[i], i);\n      tbody.append(tr);\n    };\n\n\n\n  }\n  async tableActivate(container, tabledef = null) {\n    this.on(this.eventnames.init, () => {\n      // hide and move waitdiv in the wrapper for inner elements display\n      this.waitDesactivate();\n      if (this.afterLoad) this.afterLoad();\n      // move import zones and/or search zone - reorg the page display\n      container.style.top = container.offsetTop + 'px';\n      // fetch once the same table\n      container.dataset.table = this.params.table = true;\n      this.dom.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n      this.initSearch();\n      this.initSort();\n      this.initPlugins(container);\n    });\n    // dismiss table when dismiss modal\n    this.on(this.eventnames.dismiss, (e) => {\n      console.log('destroy table');\n      this.destroy();\n    });\n    if (tabledef) tabledef = await this.dataToTable(tabledef);\n    else await this.tableToData();\n    setTimeout(() => {\n      this.emit(this.eventnames.init)\n      this.initialized = true\n    }, 10)\n    instance[this.instanceid] = this;\n\n  }\n\n  tableAppendRows(rows) {\n    console.log('rows');\n  }\n  destroy() {\n    if (this.dataImport) this.dataImport = null;\n    this.dom = null;\n    delete instance[this.instanceid];\n  }\n  refresh(e) {\n    if (this.dataImport && this.dataImport.selectors) this.dataImport.selectors.forEach(selector => {\n      if (this.disabled) this.disabled = false;\n    });\n  }\n  labelFormatter(column) {\n    let align = ``;\n    if (['number', 'progress', 'decimal'].find(format => format === column.format)) align = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.right;\n    if (column.subfield) return `${column.label} <span class=\"sublabel\">${column.sublabel}</span>`;\n    else if (column.label) return `<span class=\"${align}\">${column.label}</span>`;\n    else return ``;\n  }\n  getCellId(name, state = null) {\n    let cols = this.grid.columns.filter(column => (column.name === name));\n    return (cols.length) ? cols[0].index : -1;\n  }\n\n  getCellData(rowIndex, name, cellIndex = null) {\n    cellIndex = (cellIndex === null) ? this.getCellId(name) : cellIndex;\n    if (cellIndex < 0) return null;\n    return (this.grid.data.length) ? ((this.grid.data[rowIndex]) ? this.grid.data[rowIndex][cellIndex] : null) : null;\n  }\n\n  rowAttributes(tr, index) {\n    const id = this.getCellData(index, this.cellidname);\n    tr.dataset.id = id;\n    if (this.setRowAttributes) tr = this.setRowAttributes(this, tr, id);\n    return tr;\n  }\n\n  createTableRow(row, index, isheader = false) {\n    const tr = document.createElement('tr');\n    let td;\n    this.grid.columns.forEach(column => {\n      if (column.hasOwnProperty('hidden') && column.hidden === true) return;\n      const cell = row[column.index];\n      if (column.hasOwnProperty(\"render\")) {\n        td = column.render(cell, index, column.index);\n        td.nodename = (isheader) ? 'TH' : 'TD';\n        td = this.objToElement(td);\n      } else {\n        td = (isheader) ? document.createElement('th') : document.createElement('td');\n        td.appendChild(document.createTextNode(cell));\n      }\n      tr.appendChild(td);\n    })\n    return this.rowAttributes(tr, index);\n  }\n\n  objToElement(obj) {\n\n    if (obj.nodename === \"#text\") return document.createTextNode(obj.data);\n    const el = document.createElement(obj.nodename);\n    if (obj.hasOwnProperty(\"html\")) el.innerHTML = obj.html;\n    else el.contentText = obj.data;\n    if (obj.hasOwnProperty(\"attributes\")) {\n      for (const attr in obj.attributes) {\n        el.setAttribute(attr, obj.attributes[attr]);\n      }\n    }\n    if (obj.hasOwnProperty(\"childnodes\")) {\n      obj.childnodes.forEach(childnode => {\n\n        el.appendChild(this.objToElement(childnode));\n      });\n\n    }\n    return el;\n  }\n\n  setTextNode(value) {\n    return {\n      nodename: \"#text\",\n      data: value\n    };\n  }\n  async getFormatters() {\n    let formatters = {\n      controls: (value, rowIndex, cellIndex, td = {}) => {\n        const column = this.grid.columns[cellIndex];\n        const id = this.getCellData(rowIndex, column.field);\n        const actions = (column.actions) ? column.actions : null;\n        if (!actions) return ``;\n        let controls = [];\n        Object.entries(actions).forEach(([key, action]) => {\n          controls.push({\n            nodename: \"A\",\n            attributes: {\n              class: `btn is-${key} `,\n              href: `${action.link}/${id}`\n            },\n            childnodes: [this.setTextNode(action.label)]\n          });\n\n        });\n        if (!td.hasOwnProperty('attributes')) td.attributes = {};\n        td.attributes.class = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.component.table.controls;\n        td.childnodes = controls;\n        return td;\n      },\n      select: (value, rowIndex, cellIndex, td = {}) => {\n        const column = this.grid.columns[cellIndex];\n        value = (isNaN(value)) ? this.getCellData(rowIndex, column.field) : value;\n\n        td.childnodes = [{\n          nodename: \"INPUT\",\n          attributes: {\n            type: \"radio\",\n            name: `${this.instanceid}select`,\n            value: String(value)\n          }\n        }];\n        return td;\n      },\n      selectmultiple: (value, rowIndex, cellIndex, td = {}) => {\n        const column = this.grid.columns[cellIndex];\n        value = (isNaN(value)) ? ((column.hasOwnProperty('field')) ? this.getCellData(rowIndex, column.field) : value) : value;\n        td.childnodes = [{\n          nodename: \"INPUT\",\n          attributes: {\n            type: \"checkbox\",\n            name: `${this.instanceid}select[]`,\n            value: String(value)\n          }\n        }];\n        return td;\n      },\n      decimal: (value, rowIndex, cellIndex, td = {}) => {\n        if (isNaN(value)) value = 0;\n        value = parseFloat(value).toFixed(2);\n        if (value - parseInt(value) === 0) value = parseInt(value);\n\n        if (!td.hasOwnProperty('attributes')) td.attributes = {};\n        td.attributes.class = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.number;\n        td.childnodes = [this.setTextNode(value)];\n        return td;\n      },\n      number: (value, rowIndex, cellIndex, td = {}) => {\n        if (isNaN(value)) value = 0;\n        if (!td.hasOwnProperty('attributes')) td.attributes = {};\n        td.attributes.class = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.number;\n        td.childnodes = [this.setTextNode(value)];\n        return td;\n      },\n      check: (value, rowIndex, cellIndex, td = {}) => {\n        if (isNaN(value)) value = ``;\n        switch (value) {\n          case true:\n          case 'Y':\n          case 1:\n            value = \"\";\n            break;\n          default:\n            value = \"no-\";\n            break;\n        }\n        const icon = {\n          nodename: \"I\",\n          attributes: {\n            class: `icon-sm  icon-${value}check `\n          },\n          childnodes: []\n        }\n        const column = this.grid.columns[cellIndex];\n        const id = this.getCellData(rowIndex, this.cellidname);\n        if (column.hasOwnProperty(\"toggle\")) td.childnodes = [{\n          nodename: \"A\",\n          attributes: {\n            \"data-request\": \"toggle\",\n            \"data-action\": `${column.toggle.link}/${id}`,\n            \"href\": \"javascript:void()\"\n\n          },\n          childnodes: [icon]\n\n        }]\n        else td.childnodes = [icon];\n        return td;\n      },\n      text: (value, rowIndex, cellIndex, td = {}) => {\n        if (value === null) td.childnodes = [];\n        else {\n          value = value.replaceAll('\\r\\n', ', ');\n          if (value !== ``) td.childnodes = [{\n            nodename: \"DIV\",\n            attributes: {\n              class: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.component.table.tip\n            },\n            childnodes: [this.setTextNode(value)]\n          }];\n          else td.childnodes = [];\n        }\n        return td;\n      },\n      default: (value, rowIndex, cellIndex, td = {}) => {\n        if (value === null || value === ``) td.childnodes = [];\n        else td.childnodes = [this.setTextNode(value)];\n        return td;\n      }\n\n    }\n    let tablecustom = null;\n\n    switch (this.params.from) {\n      case 'prjlist':\n        tablecustom = await __webpack_require__.e(/*! import() */ \"src_modules_table-project_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/table-project.js */ \"./src/modules/table-project.js\"));\n        this.cellidname = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.projid;\n        break;\n      case 'prjsamplestats':\n        tablecustom = await __webpack_require__.e(/*! import() */ \"src_modules_table-sample_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/table-sample.js */ \"./src/modules/table-sample.js\"));\n        this.cellidname = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.sampleid;\n        break;\n      case \"prjpredict\":\n        tablecustom = await __webpack_require__.e(/*! import() */ \"src_modules_table-prediction_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/table-prediction.js */ \"./src/modules/table-prediction.js\"));\n        this.cellidname = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.projid;\n\n        break;\n    }\n\n    return (tablecustom) ? { ...formatters,\n      ...tablecustom.default(this)\n    } : formatters;\n\n\n  }\n  async convertColumns(tabledef) {\n    const columns = (tabledef.columns) ? tabledef.columns : ((this.params.columns) ? JSON.parse(this.params.columns) : null);\n    if (!columns) return;\n    const formatters = await this.getFormatters();\n    //\n    const fields = [];\n    Object.entries(tabledef.columns).forEach(([key, column]) => {\n      if (!column.hasOwnProperty('emptydata')) fields.push(key);\n    });\n    const map_column = (key, column, index) => {\n      if (!column) return {\n        index: index,\n        name: key,\n        hidden: true\n      };\n      let col = {\n        index: index,\n        name: key,\n        label: this.labelFormatter(column),\n        sortable: true,\n\n      };\n      col.index = (column.hasOwnProperty('emptydata')) ? fields.indexOf(column.emptydata) : fields.indexOf(key);\n      if (column.notsortable) col.sortable = false;\n      else if (column.sortable) col.sort = col.sortable;\n      col.searchable = (col.notsearchable) ? false : true;\n      if (column.hidden) col.hidden = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.string_to_boolean)(column.hidden);\n      if (['number', 'decimal'].find(format => format === column.format)) col.type = 'number';\n      let render = null;\n      switch (key) {\n        case 'select':\n          const select = (column.select && column.select == \"controls\") ? \"controls\" : ((column.selectcells) ? \"imports\" : column.select);\n          if (select) {\n            col = { ...column,\n              ...col\n            }\n\n            col.sortable = col.searchable = false;\n          }\n          break;\n      }\n      if (!column.hasOwnProperty('hidden')) {\n        const select = (column.select && column.select == _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.controls) ? _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.controls : ((column.selectcells) ? _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.imports : column.select)\n        const format = (column.format) ? column.format : ((column.subfield) ? column.subfield : ((select) ? select : \"default\"));\n        if (formatters && formatters[format]) col.render = formatters[format];\n\n      }\n      return col;\n    }\n\n    this.grid.columns = Object.entries(columns).map(([key, column], index) => map_column(key, column, index));\n  }\n  initEvents() {\n    this.on(this.eventnames.update, () => {\n      if (this.dom.classList.contains(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide)) this.dom.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n\n    });\n  }\n  initPlugins(container) {\n    if (this.params.import && this.initImport) this.initImport(this);\n    if (this.params.expand) this.makeExpandable(container);\n    if (this.params.export) this.makeExportable(container);\n    if (this.params.details || this.dom.querySelector(tableselectors.details)) this.initDetails();\n    else this.initEvents();\n    if (this.params.onselect) this.initSelect(container);\n    if (this.dom.querySelector(tableselectors.tip)) this.initTips();\n    if (this.dom.querySelectorAll('thead [data-altsort]').length) this.initAlternateSort(this.dom.querySelectorAll('thead [data-altsort]'));\n    if (this.params.filters) {\n      const top = this.wrapper.querySelector(tableselectors.top);\n      if (top && top.children.length) {\n        const filters = document.querySelector(tableselectors.filters);\n        // insert  filters node  in datatable top\n        if (filters) top.prepend(filters);\n      }\n    }\n  }\n  initSort() {\n    const ths = this.dom.querySelectorAll('thead th');\n    let index = 0;\n    this.grid.columns.forEach((column, i) => {\n      if (column.hasOwnProperty('hidden')) return;\n      if (column.sortable) {\n        const th = ths[index];\n        const a = document.createElement('a');\n        a.classList.add(tableselectors.sorter.substr(1));\n        a.appendChild(th.childNodes[0]);\n        th.appendChild(a);\n        th.childNodes.forEach(child => {\n          th.appendChild(child);\n        });\n\n        a.addEventListener('click', (e) => {\n          e.stopImmediatePropagation();\n          if (this.sorting === true || this.searching === true) {\n            e.preventDefault();\n            return false;\n          }\n          this.sortColumn(th, column.index);\n        });\n      }\n      index++;\n    });\n    this.sorting = false;\n    // remove details when sorting\n    this.on(this.eventnames.sorting, (direction, index) => {\n\n      if (this.plugins.hasOwnProperty('jsDetail')) this.plugins['jsDetail'].activeDetail(false);\n      this.dom.querySelectorAll('.table-sorter').forEach((a, i) => {\n        a.classList.add(((i === index) ? _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.wait : _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.disabled));\n      });\n      this.sorting = true;\n    });\n    // remove details when sorting\n    this.on(this.eventnames.sorted, (direction, index) => {\n      console.log('timeend', (Date.now() - this.dt));\n      this.dom.querySelectorAll('.table-sorter').forEach((a, i) => {\n        a.classList.remove(((i === index) ? _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.wait : _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.disabled))\n      });\n      this.sorting = false;\n    });\n  }\n  sortColumn(th, index, dir = null) {\n    dir = (dir === null) ? ((th.classList.contains(tablecss.ascending)) ? false : (th.classList.contains(tablecss.descending)) ? true : ((th.dataset.sort) ? false : true)) : dir;\n    th.classList.toggle(tablecss.ascending);\n    th.classList.toggle(tablecss.descending);\n    // get the real index of cell data\n\n    //  console.log(th.cellIndex, this.grid.columns[index])\n    //  index = this.grid.columns[index].index;\n    this.emit(this.eventnames.sorting, dir, th.cellIndex);\n    let rows = this.grid.data.map((row, i) => {\n      const cell = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.is_object)(row[index]) ? JSON.stringify(row[index]) : ((Array.isArray(row[index])) ? row[index][0] : row[index]);\n      return {\n        value: typeof cell === \"string\" ? cell.toLowerCase() : ((cell === null) ? 0 : cell),\n        row: i\n      }\n    });\n\n    const compare_coldata = function(a, b) {\n      const x = (dir ? a.value : b.value);\n      const y = (dir ? b.value : a.value);\n      //  const temp = (y === null) - (x === null) || +(parseFloat(x) > parseFloat(y)) || -(parseFloat(x) < parseFloat(y));\n      const temp = parseFloat(x) - parseFloat(y);\n      const bool = isNaN(temp) ? x.localeCompare(y) : temp;\n      return bool;\n    };\n\n    if (dir === false) {\n      th.classList.remove(tablecss.ascending);\n      th.classList.add(tablecss.descending);\n      th.setAttribute(\"aria-sort\", \"descending\");\n    } else {\n      th.classList.remove(tablecss.descending);\n      th.classList.add(tablecss.ascending);\n      th.setAttribute(\"aria-sort\", \"ascending\");\n    }\n\n    /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */\n    if (this.dom.dataset.lastth !== undefined && th.cellIndex != this.dom.dataset.lastth) {\n      const headings = this.dom.querySelectorAll(\"thead th\");\n      headings[this.dom.dataset.lastth].classList.remove(tablecss.descending);\n      headings[this.dom.dataset.lastth].classList.remove(tablecss.ascending);\n      headings[this.dom.dataset.lastth].removeAttribute(\"aria-sort\");\n\n    }\n    this.dom.dataset.lastth = th.cellIndex;\n\n    rows.sort((a, b) => {\n      return compare_coldata(a, b);\n    });\n    const tbody = this.dom.querySelector('tbody');\n    const clone = tbody.cloneNode();\n    const trs = tbody.querySelectorAll('tr');\n    tbody.innerHTML = ``;\n    this.dt = Date.now();\n    console.log('timestar', this.dt);\n    const sorted = [];\n    rows.forEach((r, i) => {\n      clone.appendChild(trs[r.row]);\n      sorted.push(this.grid.data[r.row]);\n\n    });\n    this.grid.data = sorted;\n    this.dom.replaceChild(clone, tbody);\n\n    this.emit(this.eventnames.sorted, dir, th.cellIndex);\n\n\n  }\n\n  tableSearch(input, casesensitive = false) {\n    function search_string(str, casesensitive) {\n      str = (casesensitive) ? str : str.toLowerCase();\n      return str; // str.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, '\\\\$&');\n    }\n\n    function search_queries(str, casesensitive) {\n      str = search_string(str, casesensitive);\n      let strs = [];\n      let phrase;\n      while ((phrase = str.match(/\"([^\"]+)\"/)) !== null) {\n\n        strs.push(phrase[1]);\n        str = str.substring(0, phrase.index) + str.substring(phrase.index + phrase[0].length);\n      }\n      // Get remaining space-separated words (if any)\n      str = str.trim();\n      if (str.length) strs = strs.concat(str.split(/\\s+/));\n      return strs;\n    }\n\n    let queries = search_queries(input.value);\n    let datas = this.grid.data,\n      indexes = [];\n    const trs = this.dom.querySelectorAll('tbody tr');\n    const cellid = this.getCellId(this.cellidname);\n    queries.forEach(qry => {\n      indexes = [];\n      datas = datas.filter((data, j) => {\n        const found = data.filter(cell => {\n          switch (typeof cell) {\n            case 'object':\n              cell = (cell) ? Object.values(cell).join(' ') : ``;\n              break;\n            case 'array':\n              cell = cell.join(' ');\n              break;\n            default:\n              cell = String(cell);\n              break;\n          }\n\n          return ((casesensitive) ? cell.indexOf(qry) : cell.toLowerCase().indexOf(qry)) > -1;\n        });\n\n        if (found.length > 0) {\n          if (cellid < 0) indexes.push(String(j));\n          else indexes.push(String(data[cellid]));\n          return data;\n        }\n      });\n\n    });\n\n    trs.forEach((tr, index) => {\n      if ((queries.length > 0 && indexes.length === 0) || (indexes.length && indexes.indexOf(tr.dataset.id) < 0)) tr.classList.add('hidden');\n      else tr.classList.remove('hidden');\n    });\n\n  }\n\n  initSearch() {\n    this.searching = false;\n    // search items\n    const searchinput = this.wrapper.querySelector(tableselectors.search + ' input');\n    if (!searchinput) return;\n    let searchstring = ``;\n    const search_terms = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.debounce)((el) => {\n      searchstring = el.value;\n      this.tableSearch(el);\n    }, 500);\n    searchinput.addEventListener(\"keyup\", (e) => {\n      e.preventDefault();\n      search_terms(e.currentTarget);\n    })\n    searchinput.addEventListener(\"click\", (e) => {\n\n      if (searchstring !== e.currentTarget.value) search_terms(e.currentTarget);\n\n    })\n    let timesearch = false;\n    this.on(this.eventnames.search, (query, matched) => {\n      if (this.plugins.hasOwnProperty('jsDetail')) this.plugins['jsDetail'].activeDetail(false);\n      this.searching = true;\n    });\n    this.on(this.eventnames.searchend, (query, matched) => {\n\n      this.searching = false;\n    });\n    this.on(this.eventnames.update, () => {\n      if (timesearch === false) {\n        timesearch = true;\n        setTimeout(() => {\n          refresh_details();\n          delete this.dom.dataset.issearching;\n          timesearch = false;\n        }, 300);\n      }\n    });\n  }\n  initSelect(container) {\n    const inputs = this.dom.querySelectorAll('input[name^=\"' + this.instanceid + '\"]');\n    if (inputs.length === 0) return;\n    const inputname = inputs[0].name;\n    let selectaction = container.querySelector('.' + tablecss.selectaction);\n    if (!selectaction) return;\n    document.body.append(selectaction);\n    selectaction.querySelector('a').addEventListener('click', (e) => {\n      let vals = [];\n      inputs.forEach(input => {\n        if (input.checked) vals.push(input.value);\n      });\n      if (selectaction.dataset.input) {\n        document.getElementById(selectaction.dataset.input).value = vals.join(',');\n        if (selectaction.dataset.form) document.getElementById(selectaction.dataset.form).submit();\n      } else e.currentTarget.href = this.params.onselect + encodeURI(vals.join(','));\n\n    });\n    const close = selectaction.querySelector('[data-dismiss]');\n    if (close) close.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      popup_selected(null, null);\n    });\n\n    const popup_selected = (top = null, left = null, forceclose = false) => {\n      if (selectaction.dataset.close) {\n        document.body.append(selectaction);\n        close.classList.remove('hidden');\n        selectaction.classList.add(tablecss.absinput);\n      }\n      if (top !== null && left !== null) {\n        selectaction.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n        selectaction.style.top = top + 'px';\n        selectaction.style.left = left + 'px';\n\n      } else {\n        if (forceclose === true) {\n          selectaction.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n          delete selectaction.dataset.close;\n        } else {\n          selectaction.dataset.close = true;\n          close.classList.add('hidden');\n          const toptable = this.wrapper.querySelector(tableselectors.top) ? this.wrapper.querySelector(tableselectors.top) : this.wrapper;\n          toptable.prepend(selectaction);\n          selectaction.classList.remove(tablecss.absinput);\n\n        }\n      }\n    }\n    inputs.forEach(input => {\n      input.addEventListener('change', (e) => {\n        if (input.checked) popup_selected(input.offsetTop, input.offsetLeft);\n        else if (this.dom.querySelectorAll('input[name^=\"' + this.instanceid + '\"]:checked').length === 0) popup_selected(null, null, true);\n      });\n    });\n    if (this.dom.querySelectorAll('input[name^=\"' + this.instanceid + '\"]:checked').length > 0) {\n      selectaction.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n      popup_selected(null, null);\n    }\n  }\n  async initDetails() { // TODO : generic\n    // about - one div to display cell details make it appear as table row expanding\n    const wrapper = this.wrapper;\n\n    const about = wrapper.querySelector('#' + tablecss.tipinline) ? wrapper.querySelector('#' + tablecss.tipinline) : tablecss.tipinline;\n    if (!dynamics.JsDetail) {\n      const {\n        JsDetail\n      } = await\n      __webpack_require__.e(/*! import() */ \"src_modules_js-detail_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/js-detail.js */ \"./src/modules/js-detail.js\"));\n      dynamics.JsDetail = JsDetail;\n    }\n    const jsDetail = new dynamics.JsDetail(about, wrapper, {\n      waitdiv: this.waitdiv\n    }); // specific to about details in table\n    // hide / show disable details zone\n    const callbackclose = (el, callback = null) => {\n      jsDetail.activeDetail(false);\n      if (callback) callback();\n    }\n\n    const callbackopen = (el, callback = null) => {\n      jsDetail.activeDetail(true);\n      if (jsDetail.current && jsDetail.current === el) {\n        jsDetail.expandDetail(el);\n        if (callback) callback();\n      } else {\n        if (jsDetail.current) jsDetail.current.querySelector('summary').click();\n        const url = this.params.detailsurl + el.dataset.id + '?' +\n          new URLSearchParams({\n            partial: true\n          });\n        jsDetail.activeDetail(true);\n        // append to cell details and display\n\n        fetch(url, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.fetchSettings)()).then(response => response.text()).then(html => {\n          jsDetail.expandDetail(el, html);\n          if (callback) callback();\n        }).catch(err => {\n          console.log('request', err);\n        })\n      }\n\n    }\n    if (!dynamics.JsAccordion) {\n      const {\n        JsAccordion\n      } = await __webpack_require__.e(/*! import() */ \"src_modules_js-accordion_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/js-accordion.js */ \"./src/modules/js-accordion.js\"));\n      dynamics.JsAccordion = JsAccordion;\n    }\n\n    const refresh_details = () => {\n      if (this.dom.classList.contains(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide)) this.dom.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n      const details = this.dom.querySelectorAll(tableselectors.details);\n      if (!details) return;\n      details.forEach(item => {\n        if (!item.dataset.id) return;\n\n        item = new dynamics.JsAccordion(item, callbackopen, callbackclose, jsDetail.detail);\n      });\n    }\n    this.plugins['jsDetail'] = jsDetail;\n    refresh_details();\n  }\n\n  initAlternateSort(cols) {\n\n    let tdcols = [];\n    cols.forEach(col => {\n      const tdcol = col.closest('th');\n      Object.entries(col.dataset).forEach(([k, v]) => {\n        tdcol.dataset[k] = v;\n        col.classList.add('inline-block')\n      });\n      tdcols.push(tdcol);\n    });\n    cols = tdcols;\n    // end fix\n\n    let coltosort;\n    const sortalternate = (col) => {\n      let todir;\n      // keep the same dir if sort on col changes\n      if (parseInt(col.dataset.sortactive) === parseInt(coltosort)) {\n        todir = (col.classList.contains(tablecss.ascending)) ? 'desc' : ((col.classList.contains(tablecss.descending)) ? 'asc' : 'asc');\n      } else todir = (col.classList.contains(tablecss.ascending)) ? 'asc' : (col.classList.contains(tablecss.descending)) ? 'desc' : 'asc';\n      //  this.grid.columns.sort(coltosort, todir);\n\n      this.sortColumn(col, coltosort, todir);\n\n    }\n    cols.forEach(col => {\n      const altsort = (col.dataset.altsort) ? col.dataset.altsort.split(',') : null;\n      if (!altsort) return;\n      const csssorter = col.querySelector(tableselectors.sorter);\n      if (csssorter) csssorter.classList.add(tablecss.disabled);\n      const control = col.querySelector(tableselectors.sorton);\n      // prevents imbricated links\n      col.append(control);\n      const triggers = col.querySelectorAll('[role=\"button\"]');\n\n      col.addEventListener('click', (e) => {\n        e.preventDefault();\n        sortalternate(col);\n      }, false);\n      const changecoltosort = (cl, index) => {\n        if (index === 0) coltosort = this.grid.columns.findIndex(column => (column.index === cl.cellIndex));\n        else coltosort = this.grid.columns.findIndex(column => (column.name === altsort[index - 1]));\n      }\n      col.dataset.sortactive = col.cellIndex;\n      triggers.forEach((trigger, index) => {\n        trigger.addEventListener('click', (e) => {\n          e.preventDefault();\n          const active = e.currentTarget.parentElement.querySelector('.active');\n          if (active) active.classList.remove('active');\n          e.currentTarget.classList.add('active');\n          changecoltosort(col, index);\n        });\n      });\n      if (col.dataset.tip) {\n\n        Object.values(this.dom.rows).forEach((row, index) => {\n          if (index === 0) return;\n          const coltip = this.grid.columns.findIndex(column => (column.name === altsort[parseInt(col.dataset.tip) - 1]));\n\n          if (row.cells.length === 0 || coltip === col.cellIndex) return;\n          row.cells[col.cellIndex].addEventListener('mouseenter', (e) => {\n\n            const tip = document.createElement('div');\n            tip.setAttribute('class', tablecss.tipover);\n            tip.innerHTML = row.cells[coltip].innerHTML;\n            e.currentTarget.append(tip);\n          });\n          row.cells[col.cellIndex].addEventListener('mouseout', (e) => {\n            const tip = e.currentTarget.querySelector(tableselectors.tipover);\n            if (tip) tip.remove();\n          });\n        });\n      }\n    });\n\n  }\n\n\n  closeShowfull() {\n    const showfull = document.querySelector('.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.component.table.tip + '.' + tablecss.showfull);\n    if (showfull) showfull.click();\n  }\n  makeExpandable(container) {\n    if (container.querySelector('table').offsetHeight < container.offsetHeight + container.querySelector('table tbody tr').offsetHeight) return;\n    const btn = document.createElement('div');\n    btn.classList.add('button-expand');\n    btn.classList.add('border-t');\n    btn.title = this.params.expand;\n    btn.innerHTML = `<span class=\"small-caps block mx-auto p-0\">${this.params.expand}</span><i class=\"clear-both p-0 mx-auto icon icon-chevron-down hover:fill-secondblue-500\"></i><span class=\"small-caps block mx-auto p-0 hidden\">${\n                  this.params.shrink}</span>`;\n    container.parentElement.insertBefore(btn, container.nextElementSibling);\n    container.classList.add('overflow-y-hidden');\n    container.classList.remove('max-tabstat-h');\n    container.parentElement.style.height = 'auto';\n    const h = parseInt(this.wrapper.querySelector('tbody tr').offsetHeight) * ((this.params.maxrows) ? this.params.maxrows : 20);\n    container.classList.add('max-h-[' + h + 'px]');\n    container.style.height = h + 'px';\n    btn.addEventListener('click', (e) => {\n      this.closeShowfull();\n      btn.classList.toggle('border-t');\n      btn.classList.toggle('border-b');\n      const ico = btn.querySelector('i');\n      ico.classList.toggle('icon-chevron-down');\n      ico.classList.toggle('icon-chevron-up');\n      container.classList.toggle('overflow-y-hidden');\n      container.classList.toggle('max-h-[' + h + 'px]');\n      btn.querySelectorAll('span').forEach(span => {\n        span.classList.toggle('hidden');\n      });\n      if (container.classList.contains('overflow-y-hidden')) container.style.height = h + 'px';\n      else container.style.height = 'auto';\n    });\n  }\n  makeExportable(container) {\n    const btn = document.createElement('div');\n    btn.classList.add('button-export');\n    btn.classList.add('is-pick');\n    btn.innerHTML = `<i class=\"icon icon-arrow-down-on-square\"></i><span>${((this.params.exportlabel) ? this.params.exportlabel : 'export statistics ')}</span>`;\n    container.prepend(btn);\n    const columns = this.grid.columns;\n    let exclude_columns = [];\n    this.grid.columns.forEach((column, index) => {\n      if (column.name === 'select') exclude_columns.push(column.index);\n    });\n    btn.addEventListener('click', async (e) => {\n      e.preventDefault();\n      if (!this.dynamics) this.dynamics = {};\n      if (!this.dynamics.exportCSV) {\n        const {\n          exportCSV // or exportJSON, exportSQL\n        } = await\n        __webpack_require__.e(/*! import() */ \"src_modules_js-export-csv_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/js-export-csv.js */ \"./src/modules/js-export-csv.js\"));\n\n        this.dynamics.exportCSV = exportCSV;\n      }\n      let str = this.dynamics.exportCSV(this, {\n        download: false,\n        linedelimiter: \"\\n\",\n        columndelimiter: \"\\t\",\n        skipcolumns: exclude_columns\n      });\n      str = encodeURI(`data:text/tsv;charset=utf-8,${str}`);\n\n      (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.download_url)(str, ((container.id) ? container.id : 'stats_proj') + '.tsv');\n\n    });\n  }\n  initTips() {\n    // show big cell content\n    let current = null;\n    this.dom.querySelectorAll(tableselectors.tip).forEach(tip => {\n      tip.addEventListener('mouseenter', (e) => {\n        if (tip.classList.contains(tablecss.showfull) || (tip.scrollHeight > tip.offsetHeight)) {\n          tip.style.cursor = 'pointer';\n        }\n      });\n      tip.addEventListener('click', (e) => {\n        const styleparent = window.getComputedStyle(tip.parentElement);\n        const style = window.getComputedStyle(tip.parentElement);\n        if (tip.classList.contains(tablecss.showfull)) {\n          tip.classList.remove(tablecss.showfull);\n          tip.parentElement.style.minHeight = 'none';\n          tip.parentElement.style.height = 'auto';\n          tip.style.maxWidth = tip.dataset.w + 'px';\n          tip.style.padding = tip.dataset.p + 'px';\n          current = null;\n        } else if (tip.scrollHeight > tip.offsetHeight) {\n          if (current) current.classList.remove(tablecss.showfull);\n          const h = parseInt(tip.clientHeight);\n          tip.parentElement.style.minHeight = tip.parentElement.style.height = (((h < parseInt(styleparent.maxHeight)) ? h : parseInt(styleparent.maxHeight)) - 2 * parseInt(styleparent.padding)) + 'px';\n          if (!tip.dataset.w) tip.dataset.w = parseInt(tip.clientWidth);\n          if (!tip.dataset.p) tip.dataset.p = parseInt(style.padding);\n          tip.style.maxWidth = parseInt(tip.clientWidth) + 'px';\n          tip.classList.add(tablecss.showfull);\n          tip.style.top = (parseInt(tip.offsetTop) - parseInt(styleparent.padding)) + 'px';\n          current = tip;\n\n        }\n\n      });\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxxQ0FBcUMsZ0JBQWdCLElBQUk7O0FBRXpELE1BQU0sK0RBQVk7O0FBRWxCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RhYmxlLWNvbXBvbmVudC5qcz81ZWUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBET01QdXJpZnkgZnJvbSAnZG9tcHVyaWZ5JztcbmltcG9ydCBlcXVhbCBmcm9tICdkZWVwLWVxdWFsJztcbmltcG9ydCB7XG4gIGZldGNoU2V0dGluZ3MsXG4gIGRvd25sb2FkX3VybCxcbiAgc3RyaW5nX3RvX2Jvb2xlYW4sXG4gIHNvcnRfaXRlbXMsXG4gIGlzX29iamVjdCxcbiAgZGVib3VuY2Vcbn0gZnJvbSAnLi4vbW9kdWxlcy91dGlscy5qcyc7XG5pbXBvcnQge1xuICBjc3MsXG4gIG1vZGVscyxcbiAgZG9tc2VsZWN0b3JzLFxuICBkZWZhdWx0X21lc3NhZ2VzXG59IGZyb20gJy4uL21vZHVsZXMvbW9kdWxlcy1jb25maWcuanMnO1xubGV0IGluc3RhbmNlID0gW107XG4vLyB2YWxpZCBmZXRjaCB1cmxwYXJ0c1xuY29uc3QgZmV0Y2hmcm9tcyA9IHtcbiAgcHJqbGlzdDogJy9ndWkvcHJqbGlzdC8nLFxuICBwcmpzYW1wbGVzdGF0czogJy9ndWkvcHJqc2FtcGxlc3RhdHMnLFxuICB1c2Vyc2xpc3Q6ICcvZ3VpL2FkbWluL3VzZXJzbGlzdCcsXG4gIHByanByZWRpY3Q6ICcvZ3VpL3ByanNmb3JwcmVkaWN0aW9uLydcbn07XG4vLyBzcGVjaWZjIGNzc1xuY29uc3QgdGFibGVjc3MgPSB7XG4gIHNob3dmdWxsOiAnc2hvd2Z1bGwnLFxuICB0aXBpbmxpbmU6IFwidGlwLWlubGluZVwiLFxuICBzZWFyY2hyZXN1bHRzOiBcInNlYXJjaC1yZXN1bHRzXCIsXG4gIHNlbGVjdGFjdGlvbjogXCJzZWxlY3RhY3Rpb25cIixcbiAgYWJzaW5wdXQ6ICdhYnNpbnB1dCcsXG4gIGRpc2FibGVkOiAndGFibGUtZGlzYWJsZWQnLFxuICBhc2NlbmRpbmc6ICd0YWJsZS1hc2NlbmRpbmcnLFxuICBkZXNjZW5kaW5nOiAndGFibGUtZGVzY2VuZGluZycsXG4gIHRpcG92ZXI6ICd0aXBvdmVyIGFic29sdXRlIHotMTAgdGV4dC1zdG9uZS01MCByb3VuZGVkIGJnLXN0b25lLTYwMCBweC0yIHB5LTAuNSAtbXQtNSBtbC0xMiAnXG59O1xuY29uc3QgdGFibGVzZWxlY3RvcnMgPSB7XG4gIHRhYmxlOiAnLnRhYmxlLXRhYmxlJyxcbiAgd3JhcHBlcjogJy50YWJsZS13cmFwcGVyJyxcbiAgdG9wOiAnLnRhYmxlLXRvcCcsXG4gIGlucHV0OiAnLnRhYmxlLWlucHV0JyxcbiAgc2VhcmNoOiAnLnRhYmxlLXNlYXJjaCcsXG4gIGZpbHRlcnM6ICcudGFibGUtZmlsdGVycycsXG4gIHNvcnRlcjogJy50YWJsZS1zb3J0ZXInLFxuICBkZXRhaWxzOiAnZGV0YWlsc1tkYXRhLXdoYXQ9XCJhYm91dFwiXScsXG4gIHRpcDogJy4nICsgY3NzLmNvbXBvbmVudC50YWJsZS50aXAsXG4gIHRpcG92ZXI6ICcudGlwb3ZlcicsXG4gIHdhaXQ6ICd3YWl0LXBsZWFzZScsXG4gIHNvcnRvbjogJy5zb3J0b24nLFxufTtcblxuT2JqZWN0LmZyZWV6ZSh0YWJsZWNzcyk7XG5PYmplY3QuZnJlZXplKHRhYmxlc2VsZWN0b3JzKTtcbmNvbnN0IGR5bmFtaWNzID0ge307XG5cbmV4cG9ydCBjbGFzcyBUYWJsZUNvbXBvbmVudCB7XG4gIGluc3RhbmNlaWQgPSBudWxsO1xuICBncmlkID0ge1xuICAgIGNvbHVtbnM6IFtdLFxuICAgIGFjdGl2ZTogW10sXG4gICAgaGlkZGVuOiBbXSxcbiAgICBkYXRhOiBbXVxuICB9O1xuICBkb21kZWYgPSB7XG4gICAgY29sdW1uczogW10sXG4gICAgZGF0YTogW10sXG4gIH07XG4gIHdyYXBwZXIgPSBudWxsO1xuICBkb20gPSBudWxsO1xuICBwYXJhbXMgPSBudWxsO1xuICBfZXZlbnRzID0ge307XG4gIGV2ZW50bmFtZXMgPSB7XG4gICAgaW5pdDogXCJ0YWJsZS5pbml0XCIsXG4gICAgdXBkYXRlOiBcInRhYmxlLnVwZGF0ZVwiLFxuICAgIHJlZnJlc2g6IFwidGFibGUucmVmcmVzaFwiLFxuICAgIHJlc2l6ZTogXCJ0YWJsZS5yZXNpemVcIixcbiAgICBzZWFyY2g6IFwidGFibGUuc2VhcmNoXCIsXG4gICAgc2VhcmNoZW5kOiBcInRhYmxlLnNlYXJjaGVuZFwiLFxuICAgIHNvcnRpbmc6IFwidGFibGUuc29ydGluZ1wiLFxuICAgIHNvcnRlZDogXCJ0YWJsZS5zb3J0ZWRcIixcbiAgICBkaXNtaXNzOiAndGFibGUuZGlzbWlzcydcbiAgfVxuICBsYWJlbHMgPSB7XG4gICAgcGxhY2Vob2xkZXI6IFwiU2VhcmNoLi4uXCIsXG4gICAgcGVyUGFnZTogXCJ7c2VsZWN0fSBlbnRyaWVzIHBlciBwYWdlXCIsXG4gICAgbm9Sb3dzOiBcIk5vIGVudHJpZXMgZm91bmRcIixcbiAgICBpbmZvOiBcIlNob3dpbmcge3N0YXJ0fSB0byB7ZW5kfSBvZiB7cm93c30gZW50cmllc1wiLFxuICAgIG5vUmVzdWx0czogXCJObyByZXN1bHQgbWF0Y2ggeW91ciBzZWFyY2ggcXVlcnlcIlxuICB9O1xuICBjZWxsaWRuYW1lID0gXCJpZFwiO1xuICBzZWFyY2hpbmcgPSBmYWxzZTtcbiAgc29ydGluZyA9IGZhbHNlO1xuICBpbml0aWFsaXplZCA9IGZhbHNlO1xuICBwbHVnaW5zID0ge307XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCFjb250YWluZXIpIHJldHVybjtcbiAgICBjb250YWluZXIgPSBjb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IGNvbnRhaW5lciA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKTtcbiAgICBpZiAoIWNvbnRhaW5lcikgcmV0dXJuO1xuICAgIC8vY2FuIHNlbGVjdCBtdWx0aXBsZXMgdGFibGVzIGluIG9uZSBwYWdlICBvciBsb2FkIGRhdGEgaW4gdGhlIHNhbWUgdGFibGVcbiAgICB0aGlzLmluc3RhbmNlaWQgPSAoY29udGFpbmVyLmRhdGFzZXQuaW5zdGFuY2VpZCkgPyBjb250YWluZXIuZGF0YXNldC5pbnN0YW5jZWlkIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndGFibGUnKS5sZW5ndGg7XG4gICAgaWYgKCFpbnN0YW5jZVt0aGlzLmluc3RhbmNlaWRdIHx8ICFlcXVhbChjb250YWluZXIuZGF0YXNldCwgaW5zdGFuY2VbdGhpcy5pbnN0YW5jZWlkXS5wYXJhbXMpKSB7XG4gICAgICB0aGlzLmluaXQoY29udGFpbmVyKTtcbiAgICB9IGVsc2UgdGhpcy5yZWZyZXNoKCk7XG4gICAgcmV0dXJuIGluc3RhbmNlW3RoaXMuaW5zdGFuY2VpZF07XG5cbiAgfVxuICBpbml0KGNvbnRhaW5lcikge1xuICAgIHRoaXMucGFyYW1zID0gY29udGFpbmVyLmRhdGFzZXQ7XG4gICAgbGV0IHRhYmxlID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlJyk7XG4gICAgaWYgKCF0YWJsZSkge1xuICAgICAgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRhYmxlKTtcbiAgICB9XG4gICAgdGFibGUuaWQgPSAndGFibGUtJyArIGNvbnRhaW5lci5pZDtcbiAgICB0YWJsZS5jbGFzc0xpc3QuYWRkKHRhYmxlc2VsZWN0b3JzLnRhYmxlLnN1YnN0cigxKSlcbiAgICB0aGlzLmRvbSA9IHRhYmxlO1xuICAgIGxldCB0b3AgPSB7XG4gICAgICBub2RlbmFtZTogXCJESVZcIixcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgY2xhc3M6IHRhYmxlc2VsZWN0b3JzLnRvcC5zdWJzdHIoMSlcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICh0aGlzLnBhcmFtcy5zb3J0YWJsZSkgdG9wLmNoaWxkbm9kZXMgPSBbe1xuICAgICAgbm9kZW5hbWU6IFwiRElWXCIsXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIGNsYXNzOiB0YWJsZXNlbGVjdG9ycy5zZWFyY2guc3Vic3RyKDEpXG4gICAgICB9LFxuICAgICAgaHRtbDogYDxpbnB1dCB0eXBlPVwic2VhcmNoXCIgbmFtZT1cInRhYmxlLXNlYXJjaFwiIHBsYWNlaG9sZGVyPVwiJHt0aGlzLmxhYmVscy5wbGFjZWhvbGRlcn1cIiBjbGFzcz1cIiR7dGFibGVzZWxlY3RvcnMuaW5wdXQuc3Vic3RyKDEpfSAgJHtjc3MuaW5wdXR9XCI+YFxuICAgIH1dO1xuICAgIGxldCB3cmFwcGVyID0gdGhpcy5vYmpUb0VsZW1lbnQoe1xuICAgICAgbm9kZW5hbWU6ICdESVYnLFxuICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICBjbGFzczogdGFibGVzZWxlY3RvcnMud3JhcHBlci5zdWJzdHIoMSlcbiAgICAgIH0sXG4gICAgICBjaGlsZG5vZGVzOiBbdG9wXVxuICAgIH0pO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRhYmxlKTtcbiAgICB0aGlzLndyYXBwZXIgPSB3cmFwcGVyO1xuXG4gICAgdGhpcy5sYWJlbHMgPSAodGhpcy5wYXJhbXMubGFiZWxzKSA/IHRoaXMucGFyYW1zLmxhYmVscyA6IHRoaXMubGFiZWxzO1xuICAgIC8vIGNlbGxpZFxuICAgIHRoaXMuY2VsbGlkbmFtZSA9ICh0aGlzLnBhcmFtcy5oYXNPd25Qcm9wZXJ0eShcImNlbGxpZFwiKSkgPyB0aGlzLnBhcmFtcy5jZWxsaWQgOiB0aGlzLmNlbGxpZG5hbWU7XG4gICAgLy8gb25seSB2YWxpZCBmcm9tIHZhbHVlcyAtIGZldGNoZnJvbXNcbiAgICB0aGlzLnBhcmFtcy5mcm9tID0gKHRoaXMucGFyYW1zLmZyb20pID8gRE9NUHVyaWZ5LnNhbml0aXplKHRoaXMucGFyYW1zLmZyb20pIDogbnVsbDtcbiAgICBjb25zdCBmcm9tID0gKHRoaXMucGFyYW1zLmZyb20pID8gKChPYmplY3Qua2V5cyhmZXRjaGZyb21zKS5pbmRleE9mKHRoaXMucGFyYW1zLmZyb20pID49IDApID8gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJy9ndWkvJylbMF0gKyBmZXRjaGZyb21zW3RoaXMucGFyYW1zLmZyb21dIDogbnVsbCkgOiBudWxsO1xuICAgIGlmIChmcm9tKSB7XG4gICAgICBpZiAodGhpcy5wYXJhbXMuZGVmZXIpIHRoaXMuZGVmZXJMb2FkKGNvbnRhaW5lciwgZnJvbSk7XG4gICAgICBlbHNlIHRoaXMuZmV0Y2hEYXRhKGNvbnRhaW5lciwgZnJvbSk7XG4gICAgfSBlbHNlIHRoaXMudGFibGVBY3RpdmF0ZShjb250YWluZXIpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgY3VzdG9tIGV2ZW50IGxpc3RlbmVyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge31cbiAgICB0aGlzLl9ldmVudHNbZXZlbnRdID0gdGhpcy5fZXZlbnRzW2V2ZW50XSB8fCBbXVxuICAgIHRoaXMuX2V2ZW50c1tldmVudF0ucHVzaChjYWxsYmFjaylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgY3VzdG9tIGV2ZW50IGxpc3RlbmVyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBvZmYoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9XG4gICAgaWYgKGV2ZW50IGluIHRoaXMuX2V2ZW50cyA9PT0gZmFsc2UpIHJldHVyblxuICAgIHRoaXMuX2V2ZW50c1tldmVudF0uc3BsaWNlKHRoaXMuX2V2ZW50c1tldmVudF0uaW5kZXhPZihjYWxsYmFjayksIDEpXG4gIH1cbiAgZW1pdChldmVudCwgLi4uYXJncykge1xuICAgIGlmIChldmVudCBpbiB0aGlzLl9ldmVudHMgPT09IGZhbHNlKSByZXR1cm47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9ldmVudHNbZXZlbnRdLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9ldmVudHNbZXZlbnRdW2ldKC4uLmFyZ3MpO1xuICAgIH1cblxuICB9XG4gIHdhaXRBY3RpdmF0ZShjb250YWluZXIpIHtcbiAgICBsZXQgd2FpdGRpdiA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjJyArIHRhYmxlc2VsZWN0b3JzLndhaXQpO1xuICAgIGlmICghd2FpdGRpdikge1xuICAgICAgd2FpdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgd2FpdGRpdi5pZCA9IHRhYmxlc2VsZWN0b3JzLndhaXQ7XG4gICAgICBjb250YWluZXIuYXBwZW5kKHdhaXRkaXYpO1xuICAgIH1cbiAgICB0aGlzLndhaXRkaXYgPSB3YWl0ZGl2O1xuICAgIHRoaXMudGltZXIgPSBuZXcgRGF0ZSgpO1xuICB9XG5cbiAgd2FpdERlc2FjdGl2YXRlKG1lc3NhZ2UgPSBudWxsLCB0eXBlID0gJ2luZm8nKSB7XG4gICAgaWYgKCF0aGlzLndhaXRkaXYpIHJldHVybjtcbiAgICBpZiAobWVzc2FnZSkgdGhpcy53YWl0ZGl2LmlubmVySFRNTCA9IGA8ZGl2IGNsYXNzPVwiJHt0eXBlfVwiPiR7bWVzc2FnZX08L2Rpdj5gO1xuICAgIGVsc2UgdGhpcy53YWl0ZGl2LmNsYXNzTGlzdC5hZGQoY3NzLmhpZGUpO1xuICB9XG5cbiAgZGVmZXJMb2FkKGNvbnRhaW5lciwgZnJvbSkge1xuICAgIGNvbnN0IGJ0biA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKHRoaXMucGFyYW1zLmRlZmVyKTtcbiAgICBpZiAoIWJ0bikgcmV0dXJuO1xuXG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIHRoaXMuZmV0Y2hEYXRhKGNvbnRhaW5lciwgZnJvbSk7XG4gICAgICBidG4ucmVtb3ZlKCk7XG4gICAgfSk7XG4gIH1cblxuICBmZXRjaERhdGEoY29udGFpbmVyLCBmcm9tdXJsLCBwYWdlc3RhcnQgPSAwKSB7XG4gICAgdGhpcy53YWl0QWN0aXZhdGUoY29udGFpbmVyKTtcbiAgICBjb25zdCBwYWdlc2l6ZSA9ICh0aGlzLnBhcmFtcy5wYWdlc2l6ZSkgPyB0aGlzLnBhcmFtcy5wYWdlc2l6ZSA6IDA7XG5cbiAgICBsZXQgZnJvbSA9ICh0aGlzLnBhcmFtcy5pbXBvcnQpID8gZnJvbXVybCArICc/JyArIG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgdHlwZWltcG9ydDogRE9NUHVyaWZ5LnNhbml0aXplKHRoaXMucGFyYW1zLmltcG9ydCksXG4gICAgICB3aW5kb3dfc3RhcnQ6IHBhZ2VzdGFydCxcbiAgICAgIHdpbmRvd19zaXplOiBwYWdlc2l6ZSxcbiAgICAgIGd6OiB0cnVlLFxuICAgIH0pIDogKChwYWdlc2l6ZSkgPyBmcm9tdXJsICsgJz8nICsgbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICB3aW5kb3dfc3RhcnQ6IHBhZ2VzdGFydCxcbiAgICAgIHdpbmRvd19zaXplOiBwYWdlc2l6ZSxcbiAgICAgIGxpc3RhbGw6ICgodGhpcy5wYXJhbXMubGlzdGFsbCkgPyB0aGlzLnBhcmFtcy5saXN0YWxsIDogZmFsc2UpXG4gICAgfSkgOiAoKHRoaXMucGFyYW1zLmxpc3RhbGwpID8gZnJvbXVybCArICc/JyArIG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgbGlzdGFsbDogKCh0aGlzLnBhcmFtcy5saXN0YWxsKSA/IHRoaXMucGFyYW1zLmxpc3RhbGwgOiBmYWxzZSlcbiAgICB9KSA6IGZyb211cmwpKTtcbiAgICBpZiAodGhpcy5wYXJhbXMuZnJvbWlkKSBmcm9tICs9ICcvJyArIHRoaXMucGFyYW1zLmZyb21pZDtcblxuICAgIGZldGNoKGZyb20sIGZldGNoU2V0dGluZ3MoKSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2Uub2spIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1xuICAgIH0pLnRoZW4oYXN5bmMgdGFibGVkZWYgPT4ge1xuXG4gICAgICBpZiAodGhpcy53YWl0ZGl2KSB0aGlzLndhaXRkaXYuaW5uZXJIVE1MID0gKCh0aGlzLndhaXRkaXYuZGF0YXNldC5sb2FkZWQpID8gRE9NUHVyaWZ5LnNhbml0aXplKHRoaXMud2FpdGRpdi5kYXRhc2V0LmxvYWRlZCkgOiBkZWZhdWx0X21lc3NhZ2VzLmRhdGFsb2FkZWQpO1xuICAgICAgaWYgKHBhZ2VzdGFydCA9PT0gMCkge1xuICAgICAgICBhd2FpdCB0aGlzLnRhYmxlQWN0aXZhdGUoY29udGFpbmVyLCB0YWJsZWRlZik7XG4gICAgICB9IGVsc2UgaWYgKHRhYmxlZGVmLmxlbmd0aCkgdGhpcy5kb21JbnNlcnRSb3dzKHRhYmxlZGVmKTtcbiAgICAgIGVsc2UgcGFnZXNpemUgPSAwO1xuICAgICAgaWYgKHBhZ2VzaXplID4gMCkgdGhpcy5mZXRjaERhdGEoY29udGFpbmVyLCBmcm9tdXJsLCBwYWdlc3RhcnQgKyBwYWdlc2l6ZSk7XG4gICAgfSlcbiAgfVxuICBhc3luYyBkYXRhVG9UYWJsZSh0YWJsZWRlZikge1xuICAgIGlmICghdGFibGVkZWYuZGF0YSkgcmV0dXJuO1xuICAgIGlmICh0YWJsZWRlZi5jb2x1bW5zKSB7XG4gICAgICBhd2FpdCB0aGlzLmNvbnZlcnRDb2x1bW5zKHRhYmxlZGVmKTtcbiAgICAgIGxldCB0cjtcbiAgICAgIGxldCB0aGVhZCA9IHRoaXMuZG9tLnRIZWFkO1xuICAgICAgaWYgKCF0aGVhZCkge1xuICAgICAgICAvLyBjcmVhdGUgdGFibGUgaGVhZGluZ3NcbiAgICAgICAgdGhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aGVhZCcpO1xuICAgICAgICB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgICAgIHRoaXMuZG9tLmFwcGVuZENoaWxkKHRoZWFkKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoZWFkLnF1ZXJ5U2VsZWN0b3IoJ3RyJykpIHtcbiAgICAgICAgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ciA9IHRoZWFkLnF1ZXJ5U2VsZWN0b3IoJ3RyJyk7XG4gICAgICAgIHRyLmlubmVySFRNTCA9IGBgO1xuICAgICAgfVxuICAgICAgbGV0IHRib2R5ID0gKHRoaXMuZG9tLnRCb2RpZXMubGVuZ3RoKSA/IHRoaXMuZG9tLnRCb2RpZXNbMF0gOiBudWxsO1xuICAgICAgaWYgKCF0Ym9keSkge1xuICAgICAgICB0Ym9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG4gICAgICAgIHRoaXMuZG9tLmFwcGVuZENoaWxkKHRib2R5KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzanNvbiA9ICghdGFibGVkZWYuaGFzT3duUHJvcGVydHkoJ2RhdGEnKSB8fCAodGFibGVkZWYuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSAmJiB0YWJsZWRlZi50eXBlID09PSBcImpzb25cIikpO1xuXG4gICAgICB0aGlzLmdyaWQuY29sdW1ucy5mb3JFYWNoKChjb2x1bW4sIGluZGV4KSA9PiB7XG5cbiAgICAgICAgaWYgKCFjb2x1bW4uaGlkZGVuKSB7XG4gICAgICAgICAgY29uc3QgdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xuICAgICAgICAgIHRoLmlubmVySFRNTCA9IGNvbHVtbi5sYWJlbDtcbiAgICAgICAgICBpZiAoY29sdW1uLnNvcnQpIHRoLmRhdGFzZXQuc29ydCA9IGNvbHVtbi5zb3J0O1xuICAgICAgICAgIHRoLmRhdGFzZXQuc29ydGFibGUgPSAoY29sdW1uLnNvcnRhYmxlKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0aCk7XG4gICAgICAgICAgdGhpcy5ncmlkLmFjdGl2ZS5wdXNoKGluZGV4KTtcbiAgICAgICAgfSBlbHNlIHRoaXMuZ3JpZC5oaWRkZW4ucHVzaChpbmRleCk7XG5cbiAgICAgIH0pO1xuXG5cbiAgICAgIHRoZWFkLmFwcGVuZENoaWxkKHRyKTtcbiAgICAgIGlmIChpc2pzb24pIHtcbiAgICAgICAgdGhpcy5ncmlkLmRhdGEgPSBbXTtcbiAgICAgICAgdGFibGVkZWYuZGF0YS5mb3JFYWNoKChkYXRhLCBpKSA9PiB7XG4gICAgICAgICAgY29uc3Qgcm93ID0gW107XG4gICAgICAgICAgbGV0IGogPSAwO1xuICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHRhYmxlZGVmLmNvbHVtbnMpLmZvckVhY2goKFtrZXksIGNvbHVtbl0sIGkpID0+IHtcbiAgICAgICAgICAgIGlmICghY29sdW1uLmhhc093blByb3BlcnR5KCdlbXB0eWRhdGEnKSkge1xuICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSByb3dbal0gPSBkYXRhW2tleV07XG4gICAgICAgICAgICAgIGVsc2UgaWYgKGNvbHVtbi5maWVsZCAmJiBkYXRhLmhhc093blByb3BlcnR5KGNvbHVtbi5maWVsZCkpIHJvd1tqXSA9IGRhdGFbY29sdW1uLmZpZWxkXTtcbiAgICAgICAgICAgICAgZWxzZSByb3dbal0gPSBudWxsO1xuICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5ncmlkLmRhdGEucHVzaChyb3cpO1xuICAgICAgICB9KTtcblxuICAgICAgfSBlbHNlIHRoaXMuZ3JpZC5kYXRhID0gdGFibGVkZWYuZGF0YTtcbiAgICAgIGNvbnN0IHRmb290ID0gdGhpcy5kb20udEZvb3Q7XG4gICAgICBpZiAodGhpcy5ncmlkLmFjdGl2ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGJvZHkuaW5uZXJIVE1MID0gYDx0cj48dGQ+JHt0aGlzLmxhYmVscy5ub1Jvd3N9PC90ZDwvdHI+YDtcbiAgICAgICAgaWYgKHRmb290KSB0Zm9vdC5yZW1vdmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmICh0Zm9vdCAmJiB0Zm9vdC5xdWVyeVNlbGVjdG9yKCd0cicpKSB7XG4gICAgICAgIGNvbnN0IHRmID0gdGZvb3QucXVlcnlTZWxlY3RvcigndHInKS5jaGlsZE5vZGVzO1xuICAgICAgICB0aGlzLmdyaWQuaGlkZGVuLmZvckVhY2goaSA9PiB7XG4gICAgICAgICAgdGZbaV0ucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZW5kZXJUYm9keSh0Ym9keSk7XG4gICAgfVxuICB9XG5cbiAgdGFibGVUb0RhdGEoKSB7XG4gICAgaWYgKCF0aGlzLmRvbS5xdWVyeVNlbGVjdG9yKCd0aGVhZCcpKSByZXR1cm47XG4gICAgdGhpcy5kb20uY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuICAgIGNvbnN0IGNlbGxfdG9fb2JqID0gKGNlbGwpID0+IHtcbiAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgZGF0YTogY2VsbC5pbm5lclRleHQsXG4gICAgICB9XG4gICAgICBpZiAoY2VsbC5pbm5lclRleHQgIT09IGNlbGwuaW5uZXJIVE1MKSBvYmouaHRtbCA9IGNlbGwuaW5uZXJIVE1MO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgY29uc3QgdGhzID0gKHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoZWFkIHRyIHRoJykubGVuZ3RoKSA/IHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoZWFkIHRyIHRoJykgOiB0aGlzLmRvbS5xdWVyeVNlbGVjdG9yQWxsKCd0aGVhZCB0ciB0ZCcpO1xuICAgIGNvbnN0IHRycyA9IHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5IHRyJyk7XG4gICAgbGV0IGFjdGl2ZSA9IDAsXG4gICAgICBoaWRkZW4gPSAwO1xuXG4gICAgZnVuY3Rpb24gZmluZF9sYWJlbCh0aCkge1xuICAgICAgaWYgKHRoLmNoaWxkTm9kZXMubGVuZ3RoKSByZXR1cm4gZmluZF9sYWJlbCh0aC5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIGVsc2UgcmV0dXJuIHRoLmlubmVyVGV4dDtcbiAgICB9XG4gICAgdGhzLmZvckVhY2goKHRoLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgY29sID0gT2JqZWN0LmFzc2lnbih7fSwgdGguZGF0YXNldCk7XG4gICAgICBpZiAoY29sLm1hc2spIHRoLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgaWYgKGNvbC5oaWRkZW4gJiYgc3RyaW5nX3RvX2Jvb2xlYW4oY29sLmhpZGRlbikpIHtcbiAgICAgICAgY29sLmhpZGRlbiA9IHRydWU7XG4gICAgICAgIHRoLnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgY29sLmxhYmVsID0gZmluZF9sYWJlbCh0aCk7XG4gICAgICBjb2wuaW5kZXggPSBpbmRleDtcbiAgICAgIGlmIChjb2wuaGlkZGVuKSB0aGlzLmdyaWQuaGlkZGVuLnB1c2goaW5kZXgpO1xuICAgICAgZWxzZSB0aGlzLmdyaWQuYWN0aXZlLnB1c2goaW5kZXgpO1xuICAgICAgdGhpcy5ncmlkLmNvbHVtbnMucHVzaChjb2wpO1xuICAgIH0pO1xuICAgIGNvbnN0IGNlbGxpZCA9IHRoaXMuZ2V0Q2VsbElkKHRoaXMuY2VsbGlkbmFtZSk7XG4gICAgdHJzLmZvckVhY2goKHRyLCBpKSA9PiB7XG4gICAgICBpZiAoY2VsbGlkIDwgMCkgdHIuZGF0YXNldC5pZCA9IGk7XG4gICAgICBlbHNlIGlmIChpID09PSBjZWxsaWQpIHRyLmRhdGFzZXQuaWQgPSB0aGlzLmdldENlbGxEYXRhKGksIHRoaXMuY2VsbGlkbmFtZSwgY2VsbGlkKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBbXTtcbiAgICAgIHRyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoLHRkJykuZm9yRWFjaCgodGQsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmdyaWQuY29sdW1uc1tpbmRleF0uaGFzT3duUHJvcGVydHkoJ21hc2snKSkgdGQuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIGlmICh0aGlzLmdyaWQuaGlkZGVuLmluZGV4T2YoaW5kZXgpID49IDApIHRkLnJlbW92ZSgpO1xuICAgICAgICBkYXRhLnB1c2godGQuaW5uZXJUZXh0KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5ncmlkLmRhdGEucHVzaChkYXRhKVxuICAgIH0pO1xuXG4gICAgdGhpcy5kb20ucXVlcnlTZWxlY3RvckFsbCgndGZvb3QgdHIgdGgnKS5mb3JFYWNoKCh0ZCwgaW5kZXgpID0+IHtcbiAgICAgIGlmICh0aGlzLmdyaWQuY29sdW1uc1tpbmRleF0uaGFzT3duUHJvcGVydHkoJ21hc2snKSkgdGQuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICBpZiAodGhpcy5ncmlkLmhpZGRlbi5pbmRleE9mKGluZGV4KSA+PSAwKSB0ZC5yZW1vdmUoKTtcbiAgICB9KTtcbiAgICB0aGlzLmRvbS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XG4gIH1cbiAgcmVuZGVyVGJvZHkodGJvZHkpIHtcbiAgICBjb25zdCBsID0gdGhpcy5ncmlkLmRhdGEubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCB0ciA9IHRoaXMuY3JlYXRlVGFibGVSb3codGhpcy5ncmlkLmRhdGFbaV0sIGkpO1xuICAgICAgdGJvZHkuYXBwZW5kKHRyKTtcbiAgICB9O1xuXG5cblxuICB9XG4gIGFzeW5jIHRhYmxlQWN0aXZhdGUoY29udGFpbmVyLCB0YWJsZWRlZiA9IG51bGwpIHtcbiAgICB0aGlzLm9uKHRoaXMuZXZlbnRuYW1lcy5pbml0LCAoKSA9PiB7XG4gICAgICAvLyBoaWRlIGFuZCBtb3ZlIHdhaXRkaXYgaW4gdGhlIHdyYXBwZXIgZm9yIGlubmVyIGVsZW1lbnRzIGRpc3BsYXlcbiAgICAgIHRoaXMud2FpdERlc2FjdGl2YXRlKCk7XG4gICAgICBpZiAodGhpcy5hZnRlckxvYWQpIHRoaXMuYWZ0ZXJMb2FkKCk7XG4gICAgICAvLyBtb3ZlIGltcG9ydCB6b25lcyBhbmQvb3Igc2VhcmNoIHpvbmUgLSByZW9yZyB0aGUgcGFnZSBkaXNwbGF5XG4gICAgICBjb250YWluZXIuc3R5bGUudG9wID0gY29udGFpbmVyLm9mZnNldFRvcCArICdweCc7XG4gICAgICAvLyBmZXRjaCBvbmNlIHRoZSBzYW1lIHRhYmxlXG4gICAgICBjb250YWluZXIuZGF0YXNldC50YWJsZSA9IHRoaXMucGFyYW1zLnRhYmxlID0gdHJ1ZTtcbiAgICAgIHRoaXMuZG9tLmNsYXNzTGlzdC5yZW1vdmUoY3NzLmhpZGUpO1xuICAgICAgdGhpcy5pbml0U2VhcmNoKCk7XG4gICAgICB0aGlzLmluaXRTb3J0KCk7XG4gICAgICB0aGlzLmluaXRQbHVnaW5zKGNvbnRhaW5lcik7XG4gICAgfSk7XG4gICAgLy8gZGlzbWlzcyB0YWJsZSB3aGVuIGRpc21pc3MgbW9kYWxcbiAgICB0aGlzLm9uKHRoaXMuZXZlbnRuYW1lcy5kaXNtaXNzLCAoZSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2Rlc3Ryb3kgdGFibGUnKTtcbiAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIGlmICh0YWJsZWRlZikgdGFibGVkZWYgPSBhd2FpdCB0aGlzLmRhdGFUb1RhYmxlKHRhYmxlZGVmKTtcbiAgICBlbHNlIGF3YWl0IHRoaXMudGFibGVUb0RhdGEoKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZW1pdCh0aGlzLmV2ZW50bmFtZXMuaW5pdClcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlXG4gICAgfSwgMTApXG4gICAgaW5zdGFuY2VbdGhpcy5pbnN0YW5jZWlkXSA9IHRoaXM7XG5cbiAgfVxuXG4gIHRhYmxlQXBwZW5kUm93cyhyb3dzKSB7XG4gICAgY29uc29sZS5sb2coJ3Jvd3MnKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmRhdGFJbXBvcnQpIHRoaXMuZGF0YUltcG9ydCA9IG51bGw7XG4gICAgdGhpcy5kb20gPSBudWxsO1xuICAgIGRlbGV0ZSBpbnN0YW5jZVt0aGlzLmluc3RhbmNlaWRdO1xuICB9XG4gIHJlZnJlc2goZSkge1xuICAgIGlmICh0aGlzLmRhdGFJbXBvcnQgJiYgdGhpcy5kYXRhSW1wb3J0LnNlbGVjdG9ycykgdGhpcy5kYXRhSW1wb3J0LnNlbGVjdG9ycy5mb3JFYWNoKHNlbGVjdG9yID0+IHtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgbGFiZWxGb3JtYXR0ZXIoY29sdW1uKSB7XG4gICAgbGV0IGFsaWduID0gYGA7XG4gICAgaWYgKFsnbnVtYmVyJywgJ3Byb2dyZXNzJywgJ2RlY2ltYWwnXS5maW5kKGZvcm1hdCA9PiBmb3JtYXQgPT09IGNvbHVtbi5mb3JtYXQpKSBhbGlnbiA9IGNzcy5yaWdodDtcbiAgICBpZiAoY29sdW1uLnN1YmZpZWxkKSByZXR1cm4gYCR7Y29sdW1uLmxhYmVsfSA8c3BhbiBjbGFzcz1cInN1YmxhYmVsXCI+JHtjb2x1bW4uc3VibGFiZWx9PC9zcGFuPmA7XG4gICAgZWxzZSBpZiAoY29sdW1uLmxhYmVsKSByZXR1cm4gYDxzcGFuIGNsYXNzPVwiJHthbGlnbn1cIj4ke2NvbHVtbi5sYWJlbH08L3NwYW4+YDtcbiAgICBlbHNlIHJldHVybiBgYDtcbiAgfVxuICBnZXRDZWxsSWQobmFtZSwgc3RhdGUgPSBudWxsKSB7XG4gICAgbGV0IGNvbHMgPSB0aGlzLmdyaWQuY29sdW1ucy5maWx0ZXIoY29sdW1uID0+IChjb2x1bW4ubmFtZSA9PT0gbmFtZSkpO1xuICAgIHJldHVybiAoY29scy5sZW5ndGgpID8gY29sc1swXS5pbmRleCA6IC0xO1xuICB9XG5cbiAgZ2V0Q2VsbERhdGEocm93SW5kZXgsIG5hbWUsIGNlbGxJbmRleCA9IG51bGwpIHtcbiAgICBjZWxsSW5kZXggPSAoY2VsbEluZGV4ID09PSBudWxsKSA/IHRoaXMuZ2V0Q2VsbElkKG5hbWUpIDogY2VsbEluZGV4O1xuICAgIGlmIChjZWxsSW5kZXggPCAwKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gKHRoaXMuZ3JpZC5kYXRhLmxlbmd0aCkgPyAoKHRoaXMuZ3JpZC5kYXRhW3Jvd0luZGV4XSkgPyB0aGlzLmdyaWQuZGF0YVtyb3dJbmRleF1bY2VsbEluZGV4XSA6IG51bGwpIDogbnVsbDtcbiAgfVxuXG4gIHJvd0F0dHJpYnV0ZXModHIsIGluZGV4KSB7XG4gICAgY29uc3QgaWQgPSB0aGlzLmdldENlbGxEYXRhKGluZGV4LCB0aGlzLmNlbGxpZG5hbWUpO1xuICAgIHRyLmRhdGFzZXQuaWQgPSBpZDtcbiAgICBpZiAodGhpcy5zZXRSb3dBdHRyaWJ1dGVzKSB0ciA9IHRoaXMuc2V0Um93QXR0cmlidXRlcyh0aGlzLCB0ciwgaWQpO1xuICAgIHJldHVybiB0cjtcbiAgfVxuXG4gIGNyZWF0ZVRhYmxlUm93KHJvdywgaW5kZXgsIGlzaGVhZGVyID0gZmFsc2UpIHtcbiAgICBjb25zdCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgbGV0IHRkO1xuICAgIHRoaXMuZ3JpZC5jb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgIGlmIChjb2x1bW4uaGFzT3duUHJvcGVydHkoJ2hpZGRlbicpICYmIGNvbHVtbi5oaWRkZW4gPT09IHRydWUpIHJldHVybjtcbiAgICAgIGNvbnN0IGNlbGwgPSByb3dbY29sdW1uLmluZGV4XTtcbiAgICAgIGlmIChjb2x1bW4uaGFzT3duUHJvcGVydHkoXCJyZW5kZXJcIikpIHtcbiAgICAgICAgdGQgPSBjb2x1bW4ucmVuZGVyKGNlbGwsIGluZGV4LCBjb2x1bW4uaW5kZXgpO1xuICAgICAgICB0ZC5ub2RlbmFtZSA9IChpc2hlYWRlcikgPyAnVEgnIDogJ1REJztcbiAgICAgICAgdGQgPSB0aGlzLm9ialRvRWxlbWVudCh0ZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZCA9IChpc2hlYWRlcikgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgdGQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY2VsbCkpO1xuICAgICAgfVxuICAgICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xuICAgIH0pXG4gICAgcmV0dXJuIHRoaXMucm93QXR0cmlidXRlcyh0ciwgaW5kZXgpO1xuICB9XG5cbiAgb2JqVG9FbGVtZW50KG9iaikge1xuXG4gICAgaWYgKG9iai5ub2RlbmFtZSA9PT0gXCIjdGV4dFwiKSByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUob2JqLmRhdGEpO1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvYmoubm9kZW5hbWUpO1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoXCJodG1sXCIpKSBlbC5pbm5lckhUTUwgPSBvYmouaHRtbDtcbiAgICBlbHNlIGVsLmNvbnRlbnRUZXh0ID0gb2JqLmRhdGE7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShcImF0dHJpYnV0ZXNcIikpIHtcbiAgICAgIGZvciAoY29uc3QgYXR0ciBpbiBvYmouYXR0cmlidXRlcykge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgb2JqLmF0dHJpYnV0ZXNbYXR0cl0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KFwiY2hpbGRub2Rlc1wiKSkge1xuICAgICAgb2JqLmNoaWxkbm9kZXMuZm9yRWFjaChjaGlsZG5vZGUgPT4ge1xuXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKHRoaXMub2JqVG9FbGVtZW50KGNoaWxkbm9kZSkpO1xuICAgICAgfSk7XG5cbiAgICB9XG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgc2V0VGV4dE5vZGUodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbm9kZW5hbWU6IFwiI3RleHRcIixcbiAgICAgIGRhdGE6IHZhbHVlXG4gICAgfTtcbiAgfVxuICBhc3luYyBnZXRGb3JtYXR0ZXJzKCkge1xuICAgIGxldCBmb3JtYXR0ZXJzID0ge1xuICAgICAgY29udHJvbHM6ICh2YWx1ZSwgcm93SW5kZXgsIGNlbGxJbmRleCwgdGQgPSB7fSkgPT4ge1xuICAgICAgICBjb25zdCBjb2x1bW4gPSB0aGlzLmdyaWQuY29sdW1uc1tjZWxsSW5kZXhdO1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuZ2V0Q2VsbERhdGEocm93SW5kZXgsIGNvbHVtbi5maWVsZCk7XG4gICAgICAgIGNvbnN0IGFjdGlvbnMgPSAoY29sdW1uLmFjdGlvbnMpID8gY29sdW1uLmFjdGlvbnMgOiBudWxsO1xuICAgICAgICBpZiAoIWFjdGlvbnMpIHJldHVybiBgYDtcbiAgICAgICAgbGV0IGNvbnRyb2xzID0gW107XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGFjdGlvbnMpLmZvckVhY2goKFtrZXksIGFjdGlvbl0pID0+IHtcbiAgICAgICAgICBjb250cm9scy5wdXNoKHtcbiAgICAgICAgICAgIG5vZGVuYW1lOiBcIkFcIixcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgY2xhc3M6IGBidG4gaXMtJHtrZXl9IGAsXG4gICAgICAgICAgICAgIGhyZWY6IGAke2FjdGlvbi5saW5rfS8ke2lkfWBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZG5vZGVzOiBbdGhpcy5zZXRUZXh0Tm9kZShhY3Rpb24ubGFiZWwpXVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXRkLmhhc093blByb3BlcnR5KCdhdHRyaWJ1dGVzJykpIHRkLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgdGQuYXR0cmlidXRlcy5jbGFzcyA9IGNzcy5jb21wb25lbnQudGFibGUuY29udHJvbHM7XG4gICAgICAgIHRkLmNoaWxkbm9kZXMgPSBjb250cm9scztcbiAgICAgICAgcmV0dXJuIHRkO1xuICAgICAgfSxcbiAgICAgIHNlbGVjdDogKHZhbHVlLCByb3dJbmRleCwgY2VsbEluZGV4LCB0ZCA9IHt9KSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IHRoaXMuZ3JpZC5jb2x1bW5zW2NlbGxJbmRleF07XG4gICAgICAgIHZhbHVlID0gKGlzTmFOKHZhbHVlKSkgPyB0aGlzLmdldENlbGxEYXRhKHJvd0luZGV4LCBjb2x1bW4uZmllbGQpIDogdmFsdWU7XG5cbiAgICAgICAgdGQuY2hpbGRub2RlcyA9IFt7XG4gICAgICAgICAgbm9kZW5hbWU6IFwiSU5QVVRcIixcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICB0eXBlOiBcInJhZGlvXCIsXG4gICAgICAgICAgICBuYW1lOiBgJHt0aGlzLmluc3RhbmNlaWR9c2VsZWN0YCxcbiAgICAgICAgICAgIHZhbHVlOiBTdHJpbmcodmFsdWUpXG4gICAgICAgICAgfVxuICAgICAgICB9XTtcbiAgICAgICAgcmV0dXJuIHRkO1xuICAgICAgfSxcbiAgICAgIHNlbGVjdG11bHRpcGxlOiAodmFsdWUsIHJvd0luZGV4LCBjZWxsSW5kZXgsIHRkID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgY29sdW1uID0gdGhpcy5ncmlkLmNvbHVtbnNbY2VsbEluZGV4XTtcbiAgICAgICAgdmFsdWUgPSAoaXNOYU4odmFsdWUpKSA/ICgoY29sdW1uLmhhc093blByb3BlcnR5KCdmaWVsZCcpKSA/IHRoaXMuZ2V0Q2VsbERhdGEocm93SW5kZXgsIGNvbHVtbi5maWVsZCkgOiB2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgdGQuY2hpbGRub2RlcyA9IFt7XG4gICAgICAgICAgbm9kZW5hbWU6IFwiSU5QVVRcIixcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgICBuYW1lOiBgJHt0aGlzLmluc3RhbmNlaWR9c2VsZWN0W11gLFxuICAgICAgICAgICAgdmFsdWU6IFN0cmluZyh2YWx1ZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1dO1xuICAgICAgICByZXR1cm4gdGQ7XG4gICAgICB9LFxuICAgICAgZGVjaW1hbDogKHZhbHVlLCByb3dJbmRleCwgY2VsbEluZGV4LCB0ZCA9IHt9KSA9PiB7XG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHZhbHVlID0gMDtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKS50b0ZpeGVkKDIpO1xuICAgICAgICBpZiAodmFsdWUgLSBwYXJzZUludCh2YWx1ZSkgPT09IDApIHZhbHVlID0gcGFyc2VJbnQodmFsdWUpO1xuXG4gICAgICAgIGlmICghdGQuaGFzT3duUHJvcGVydHkoJ2F0dHJpYnV0ZXMnKSkgdGQuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB0ZC5hdHRyaWJ1dGVzLmNsYXNzID0gY3NzLm51bWJlcjtcbiAgICAgICAgdGQuY2hpbGRub2RlcyA9IFt0aGlzLnNldFRleHROb2RlKHZhbHVlKV07XG4gICAgICAgIHJldHVybiB0ZDtcbiAgICAgIH0sXG4gICAgICBudW1iZXI6ICh2YWx1ZSwgcm93SW5kZXgsIGNlbGxJbmRleCwgdGQgPSB7fSkgPT4ge1xuICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB2YWx1ZSA9IDA7XG4gICAgICAgIGlmICghdGQuaGFzT3duUHJvcGVydHkoJ2F0dHJpYnV0ZXMnKSkgdGQuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB0ZC5hdHRyaWJ1dGVzLmNsYXNzID0gY3NzLm51bWJlcjtcbiAgICAgICAgdGQuY2hpbGRub2RlcyA9IFt0aGlzLnNldFRleHROb2RlKHZhbHVlKV07XG4gICAgICAgIHJldHVybiB0ZDtcbiAgICAgIH0sXG4gICAgICBjaGVjazogKHZhbHVlLCByb3dJbmRleCwgY2VsbEluZGV4LCB0ZCA9IHt9KSA9PiB7XG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHZhbHVlID0gYGA7XG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICBjYXNlIHRydWU6XG4gICAgICAgICAgY2FzZSAnWSc6XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhbHVlID0gXCJuby1cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGljb24gPSB7XG4gICAgICAgICAgbm9kZW5hbWU6IFwiSVwiLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIGNsYXNzOiBgaWNvbi1zbSAgaWNvbi0ke3ZhbHVlfWNoZWNrIGBcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkbm9kZXM6IFtdXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sdW1uID0gdGhpcy5ncmlkLmNvbHVtbnNbY2VsbEluZGV4XTtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmdldENlbGxEYXRhKHJvd0luZGV4LCB0aGlzLmNlbGxpZG5hbWUpO1xuICAgICAgICBpZiAoY29sdW1uLmhhc093blByb3BlcnR5KFwidG9nZ2xlXCIpKSB0ZC5jaGlsZG5vZGVzID0gW3tcbiAgICAgICAgICBub2RlbmFtZTogXCJBXCIsXG4gICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgXCJkYXRhLXJlcXVlc3RcIjogXCJ0b2dnbGVcIixcbiAgICAgICAgICAgIFwiZGF0YS1hY3Rpb25cIjogYCR7Y29sdW1uLnRvZ2dsZS5saW5rfS8ke2lkfWAsXG4gICAgICAgICAgICBcImhyZWZcIjogXCJqYXZhc2NyaXB0OnZvaWQoKVwiXG5cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkbm9kZXM6IFtpY29uXVxuXG4gICAgICAgIH1dXG4gICAgICAgIGVsc2UgdGQuY2hpbGRub2RlcyA9IFtpY29uXTtcbiAgICAgICAgcmV0dXJuIHRkO1xuICAgICAgfSxcbiAgICAgIHRleHQ6ICh2YWx1ZSwgcm93SW5kZXgsIGNlbGxJbmRleCwgdGQgPSB7fSkgPT4ge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHRkLmNoaWxkbm9kZXMgPSBbXTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlQWxsKCdcXHJcXG4nLCAnLCAnKTtcbiAgICAgICAgICBpZiAodmFsdWUgIT09IGBgKSB0ZC5jaGlsZG5vZGVzID0gW3tcbiAgICAgICAgICAgIG5vZGVuYW1lOiBcIkRJVlwiLFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICBjbGFzczogY3NzLmNvbXBvbmVudC50YWJsZS50aXBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZG5vZGVzOiBbdGhpcy5zZXRUZXh0Tm9kZSh2YWx1ZSldXG4gICAgICAgICAgfV07XG4gICAgICAgICAgZWxzZSB0ZC5jaGlsZG5vZGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRkO1xuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6ICh2YWx1ZSwgcm93SW5kZXgsIGNlbGxJbmRleCwgdGQgPSB7fSkgPT4ge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IGBgKSB0ZC5jaGlsZG5vZGVzID0gW107XG4gICAgICAgIGVsc2UgdGQuY2hpbGRub2RlcyA9IFt0aGlzLnNldFRleHROb2RlKHZhbHVlKV07XG4gICAgICAgIHJldHVybiB0ZDtcbiAgICAgIH1cblxuICAgIH1cbiAgICBsZXQgdGFibGVjdXN0b20gPSBudWxsO1xuXG4gICAgc3dpdGNoICh0aGlzLnBhcmFtcy5mcm9tKSB7XG4gICAgICBjYXNlICdwcmpsaXN0JzpcbiAgICAgICAgdGFibGVjdXN0b20gPSBhd2FpdCBpbXBvcnQoJy4uL21vZHVsZXMvdGFibGUtcHJvamVjdC5qcycpO1xuICAgICAgICB0aGlzLmNlbGxpZG5hbWUgPSBtb2RlbHMucHJvamlkO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3ByanNhbXBsZXN0YXRzJzpcbiAgICAgICAgdGFibGVjdXN0b20gPSBhd2FpdCBpbXBvcnQoJy4uL21vZHVsZXMvdGFibGUtc2FtcGxlLmpzJyk7XG4gICAgICAgIHRoaXMuY2VsbGlkbmFtZSA9IG1vZGVscy5zYW1wbGVpZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicHJqcHJlZGljdFwiOlxuICAgICAgICB0YWJsZWN1c3RvbSA9IGF3YWl0IGltcG9ydCgnLi4vbW9kdWxlcy90YWJsZS1wcmVkaWN0aW9uLmpzJyk7XG4gICAgICAgIHRoaXMuY2VsbGlkbmFtZSA9IG1vZGVscy5wcm9qaWQ7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuICh0YWJsZWN1c3RvbSkgPyB7IC4uLmZvcm1hdHRlcnMsXG4gICAgICAuLi50YWJsZWN1c3RvbS5kZWZhdWx0KHRoaXMpXG4gICAgfSA6IGZvcm1hdHRlcnM7XG5cblxuICB9XG4gIGFzeW5jIGNvbnZlcnRDb2x1bW5zKHRhYmxlZGVmKSB7XG4gICAgY29uc3QgY29sdW1ucyA9ICh0YWJsZWRlZi5jb2x1bW5zKSA/IHRhYmxlZGVmLmNvbHVtbnMgOiAoKHRoaXMucGFyYW1zLmNvbHVtbnMpID8gSlNPTi5wYXJzZSh0aGlzLnBhcmFtcy5jb2x1bW5zKSA6IG51bGwpO1xuICAgIGlmICghY29sdW1ucykgcmV0dXJuO1xuICAgIGNvbnN0IGZvcm1hdHRlcnMgPSBhd2FpdCB0aGlzLmdldEZvcm1hdHRlcnMoKTtcbiAgICAvL1xuICAgIGNvbnN0IGZpZWxkcyA9IFtdO1xuICAgIE9iamVjdC5lbnRyaWVzKHRhYmxlZGVmLmNvbHVtbnMpLmZvckVhY2goKFtrZXksIGNvbHVtbl0pID0+IHtcbiAgICAgIGlmICghY29sdW1uLmhhc093blByb3BlcnR5KCdlbXB0eWRhdGEnKSkgZmllbGRzLnB1c2goa2V5KTtcbiAgICB9KTtcbiAgICBjb25zdCBtYXBfY29sdW1uID0gKGtleSwgY29sdW1uLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKCFjb2x1bW4pIHJldHVybiB7XG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgbmFtZToga2V5LFxuICAgICAgICBoaWRkZW46IHRydWVcbiAgICAgIH07XG4gICAgICBsZXQgY29sID0ge1xuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgbGFiZWw6IHRoaXMubGFiZWxGb3JtYXR0ZXIoY29sdW1uKSxcbiAgICAgICAgc29ydGFibGU6IHRydWUsXG5cbiAgICAgIH07XG4gICAgICBjb2wuaW5kZXggPSAoY29sdW1uLmhhc093blByb3BlcnR5KCdlbXB0eWRhdGEnKSkgPyBmaWVsZHMuaW5kZXhPZihjb2x1bW4uZW1wdHlkYXRhKSA6IGZpZWxkcy5pbmRleE9mKGtleSk7XG4gICAgICBpZiAoY29sdW1uLm5vdHNvcnRhYmxlKSBjb2wuc29ydGFibGUgPSBmYWxzZTtcbiAgICAgIGVsc2UgaWYgKGNvbHVtbi5zb3J0YWJsZSkgY29sLnNvcnQgPSBjb2wuc29ydGFibGU7XG4gICAgICBjb2wuc2VhcmNoYWJsZSA9IChjb2wubm90c2VhcmNoYWJsZSkgPyBmYWxzZSA6IHRydWU7XG4gICAgICBpZiAoY29sdW1uLmhpZGRlbikgY29sLmhpZGRlbiA9IHN0cmluZ190b19ib29sZWFuKGNvbHVtbi5oaWRkZW4pO1xuICAgICAgaWYgKFsnbnVtYmVyJywgJ2RlY2ltYWwnXS5maW5kKGZvcm1hdCA9PiBmb3JtYXQgPT09IGNvbHVtbi5mb3JtYXQpKSBjb2wudHlwZSA9ICdudW1iZXInO1xuICAgICAgbGV0IHJlbmRlciA9IG51bGw7XG4gICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICAgIGNvbnN0IHNlbGVjdCA9IChjb2x1bW4uc2VsZWN0ICYmIGNvbHVtbi5zZWxlY3QgPT0gXCJjb250cm9sc1wiKSA/IFwiY29udHJvbHNcIiA6ICgoY29sdW1uLnNlbGVjdGNlbGxzKSA/IFwiaW1wb3J0c1wiIDogY29sdW1uLnNlbGVjdCk7XG4gICAgICAgICAgaWYgKHNlbGVjdCkge1xuICAgICAgICAgICAgY29sID0geyAuLi5jb2x1bW4sXG4gICAgICAgICAgICAgIC4uLmNvbFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb2wuc29ydGFibGUgPSBjb2wuc2VhcmNoYWJsZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICghY29sdW1uLmhhc093blByb3BlcnR5KCdoaWRkZW4nKSkge1xuICAgICAgICBjb25zdCBzZWxlY3QgPSAoY29sdW1uLnNlbGVjdCAmJiBjb2x1bW4uc2VsZWN0ID09IG1vZGVscy5jb250cm9scykgPyBtb2RlbHMuY29udHJvbHMgOiAoKGNvbHVtbi5zZWxlY3RjZWxscykgPyBtb2RlbHMuaW1wb3J0cyA6IGNvbHVtbi5zZWxlY3QpXG4gICAgICAgIGNvbnN0IGZvcm1hdCA9IChjb2x1bW4uZm9ybWF0KSA/IGNvbHVtbi5mb3JtYXQgOiAoKGNvbHVtbi5zdWJmaWVsZCkgPyBjb2x1bW4uc3ViZmllbGQgOiAoKHNlbGVjdCkgPyBzZWxlY3QgOiBcImRlZmF1bHRcIikpO1xuICAgICAgICBpZiAoZm9ybWF0dGVycyAmJiBmb3JtYXR0ZXJzW2Zvcm1hdF0pIGNvbC5yZW5kZXIgPSBmb3JtYXR0ZXJzW2Zvcm1hdF07XG5cbiAgICAgIH1cbiAgICAgIHJldHVybiBjb2w7XG4gICAgfVxuXG4gICAgdGhpcy5ncmlkLmNvbHVtbnMgPSBPYmplY3QuZW50cmllcyhjb2x1bW5zKS5tYXAoKFtrZXksIGNvbHVtbl0sIGluZGV4KSA9PiBtYXBfY29sdW1uKGtleSwgY29sdW1uLCBpbmRleCkpO1xuICB9XG4gIGluaXRFdmVudHMoKSB7XG4gICAgdGhpcy5vbih0aGlzLmV2ZW50bmFtZXMudXBkYXRlLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5kb20uY2xhc3NMaXN0LmNvbnRhaW5zKGNzcy5oaWRlKSkgdGhpcy5kb20uY2xhc3NMaXN0LnJlbW92ZShjc3MuaGlkZSk7XG5cbiAgICB9KTtcbiAgfVxuICBpbml0UGx1Z2lucyhjb250YWluZXIpIHtcbiAgICBpZiAodGhpcy5wYXJhbXMuaW1wb3J0ICYmIHRoaXMuaW5pdEltcG9ydCkgdGhpcy5pbml0SW1wb3J0KHRoaXMpO1xuICAgIGlmICh0aGlzLnBhcmFtcy5leHBhbmQpIHRoaXMubWFrZUV4cGFuZGFibGUoY29udGFpbmVyKTtcbiAgICBpZiAodGhpcy5wYXJhbXMuZXhwb3J0KSB0aGlzLm1ha2VFeHBvcnRhYmxlKGNvbnRhaW5lcik7XG4gICAgaWYgKHRoaXMucGFyYW1zLmRldGFpbHMgfHwgdGhpcy5kb20ucXVlcnlTZWxlY3Rvcih0YWJsZXNlbGVjdG9ycy5kZXRhaWxzKSkgdGhpcy5pbml0RGV0YWlscygpO1xuICAgIGVsc2UgdGhpcy5pbml0RXZlbnRzKCk7XG4gICAgaWYgKHRoaXMucGFyYW1zLm9uc2VsZWN0KSB0aGlzLmluaXRTZWxlY3QoY29udGFpbmVyKTtcbiAgICBpZiAodGhpcy5kb20ucXVlcnlTZWxlY3Rvcih0YWJsZXNlbGVjdG9ycy50aXApKSB0aGlzLmluaXRUaXBzKCk7XG4gICAgaWYgKHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoZWFkIFtkYXRhLWFsdHNvcnRdJykubGVuZ3RoKSB0aGlzLmluaXRBbHRlcm5hdGVTb3J0KHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoZWFkIFtkYXRhLWFsdHNvcnRdJykpO1xuICAgIGlmICh0aGlzLnBhcmFtcy5maWx0ZXJzKSB7XG4gICAgICBjb25zdCB0b3AgPSB0aGlzLndyYXBwZXIucXVlcnlTZWxlY3Rvcih0YWJsZXNlbGVjdG9ycy50b3ApO1xuICAgICAgaWYgKHRvcCAmJiB0b3AuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhYmxlc2VsZWN0b3JzLmZpbHRlcnMpO1xuICAgICAgICAvLyBpbnNlcnQgIGZpbHRlcnMgbm9kZSAgaW4gZGF0YXRhYmxlIHRvcFxuICAgICAgICBpZiAoZmlsdGVycykgdG9wLnByZXBlbmQoZmlsdGVycyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGluaXRTb3J0KCkge1xuICAgIGNvbnN0IHRocyA9IHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoZWFkIHRoJyk7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICB0aGlzLmdyaWQuY29sdW1ucy5mb3JFYWNoKChjb2x1bW4sIGkpID0+IHtcbiAgICAgIGlmIChjb2x1bW4uaGFzT3duUHJvcGVydHkoJ2hpZGRlbicpKSByZXR1cm47XG4gICAgICBpZiAoY29sdW1uLnNvcnRhYmxlKSB7XG4gICAgICAgIGNvbnN0IHRoID0gdGhzW2luZGV4XTtcbiAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgYS5jbGFzc0xpc3QuYWRkKHRhYmxlc2VsZWN0b3JzLnNvcnRlci5zdWJzdHIoMSkpO1xuICAgICAgICBhLmFwcGVuZENoaWxkKHRoLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgICB0aC5hcHBlbmRDaGlsZChhKTtcbiAgICAgICAgdGguY2hpbGROb2Rlcy5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICB0aC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgaWYgKHRoaXMuc29ydGluZyA9PT0gdHJ1ZSB8fCB0aGlzLnNlYXJjaGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNvcnRDb2x1bW4odGgsIGNvbHVtbi5pbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaW5kZXgrKztcbiAgICB9KTtcbiAgICB0aGlzLnNvcnRpbmcgPSBmYWxzZTtcbiAgICAvLyByZW1vdmUgZGV0YWlscyB3aGVuIHNvcnRpbmdcbiAgICB0aGlzLm9uKHRoaXMuZXZlbnRuYW1lcy5zb3J0aW5nLCAoZGlyZWN0aW9uLCBpbmRleCkgPT4ge1xuXG4gICAgICBpZiAodGhpcy5wbHVnaW5zLmhhc093blByb3BlcnR5KCdqc0RldGFpbCcpKSB0aGlzLnBsdWdpbnNbJ2pzRGV0YWlsJ10uYWN0aXZlRGV0YWlsKGZhbHNlKTtcbiAgICAgIHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJy50YWJsZS1zb3J0ZXInKS5mb3JFYWNoKChhLCBpKSA9PiB7XG4gICAgICAgIGEuY2xhc3NMaXN0LmFkZCgoKGkgPT09IGluZGV4KSA/IGNzcy53YWl0IDogY3NzLmRpc2FibGVkKSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc29ydGluZyA9IHRydWU7XG4gICAgfSk7XG4gICAgLy8gcmVtb3ZlIGRldGFpbHMgd2hlbiBzb3J0aW5nXG4gICAgdGhpcy5vbih0aGlzLmV2ZW50bmFtZXMuc29ydGVkLCAoZGlyZWN0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3RpbWVlbmQnLCAoRGF0ZS5ub3coKSAtIHRoaXMuZHQpKTtcbiAgICAgIHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJy50YWJsZS1zb3J0ZXInKS5mb3JFYWNoKChhLCBpKSA9PiB7XG4gICAgICAgIGEuY2xhc3NMaXN0LnJlbW92ZSgoKGkgPT09IGluZGV4KSA/IGNzcy53YWl0IDogY3NzLmRpc2FibGVkKSlcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zb3J0aW5nID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgc29ydENvbHVtbih0aCwgaW5kZXgsIGRpciA9IG51bGwpIHtcbiAgICBkaXIgPSAoZGlyID09PSBudWxsKSA/ICgodGguY2xhc3NMaXN0LmNvbnRhaW5zKHRhYmxlY3NzLmFzY2VuZGluZykpID8gZmFsc2UgOiAodGguY2xhc3NMaXN0LmNvbnRhaW5zKHRhYmxlY3NzLmRlc2NlbmRpbmcpKSA/IHRydWUgOiAoKHRoLmRhdGFzZXQuc29ydCkgPyBmYWxzZSA6IHRydWUpKSA6IGRpcjtcbiAgICB0aC5jbGFzc0xpc3QudG9nZ2xlKHRhYmxlY3NzLmFzY2VuZGluZyk7XG4gICAgdGguY2xhc3NMaXN0LnRvZ2dsZSh0YWJsZWNzcy5kZXNjZW5kaW5nKTtcbiAgICAvLyBnZXQgdGhlIHJlYWwgaW5kZXggb2YgY2VsbCBkYXRhXG5cbiAgICAvLyAgY29uc29sZS5sb2codGguY2VsbEluZGV4LCB0aGlzLmdyaWQuY29sdW1uc1tpbmRleF0pXG4gICAgLy8gIGluZGV4ID0gdGhpcy5ncmlkLmNvbHVtbnNbaW5kZXhdLmluZGV4O1xuICAgIHRoaXMuZW1pdCh0aGlzLmV2ZW50bmFtZXMuc29ydGluZywgZGlyLCB0aC5jZWxsSW5kZXgpO1xuICAgIGxldCByb3dzID0gdGhpcy5ncmlkLmRhdGEubWFwKChyb3csIGkpID0+IHtcbiAgICAgIGNvbnN0IGNlbGwgPSBpc19vYmplY3Qocm93W2luZGV4XSkgPyBKU09OLnN0cmluZ2lmeShyb3dbaW5kZXhdKSA6ICgoQXJyYXkuaXNBcnJheShyb3dbaW5kZXhdKSkgPyByb3dbaW5kZXhdWzBdIDogcm93W2luZGV4XSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdHlwZW9mIGNlbGwgPT09IFwic3RyaW5nXCIgPyBjZWxsLnRvTG93ZXJDYXNlKCkgOiAoKGNlbGwgPT09IG51bGwpID8gMCA6IGNlbGwpLFxuICAgICAgICByb3c6IGlcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGNvbXBhcmVfY29sZGF0YSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIGNvbnN0IHggPSAoZGlyID8gYS52YWx1ZSA6IGIudmFsdWUpO1xuICAgICAgY29uc3QgeSA9IChkaXIgPyBiLnZhbHVlIDogYS52YWx1ZSk7XG4gICAgICAvLyAgY29uc3QgdGVtcCA9ICh5ID09PSBudWxsKSAtICh4ID09PSBudWxsKSB8fCArKHBhcnNlRmxvYXQoeCkgPiBwYXJzZUZsb2F0KHkpKSB8fCAtKHBhcnNlRmxvYXQoeCkgPCBwYXJzZUZsb2F0KHkpKTtcbiAgICAgIGNvbnN0IHRlbXAgPSBwYXJzZUZsb2F0KHgpIC0gcGFyc2VGbG9hdCh5KTtcbiAgICAgIGNvbnN0IGJvb2wgPSBpc05hTih0ZW1wKSA/IHgubG9jYWxlQ29tcGFyZSh5KSA6IHRlbXA7XG4gICAgICByZXR1cm4gYm9vbDtcbiAgICB9O1xuXG4gICAgaWYgKGRpciA9PT0gZmFsc2UpIHtcbiAgICAgIHRoLmNsYXNzTGlzdC5yZW1vdmUodGFibGVjc3MuYXNjZW5kaW5nKTtcbiAgICAgIHRoLmNsYXNzTGlzdC5hZGQodGFibGVjc3MuZGVzY2VuZGluZyk7XG4gICAgICB0aC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNvcnRcIiwgXCJkZXNjZW5kaW5nXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aC5jbGFzc0xpc3QucmVtb3ZlKHRhYmxlY3NzLmRlc2NlbmRpbmcpO1xuICAgICAgdGguY2xhc3NMaXN0LmFkZCh0YWJsZWNzcy5hc2NlbmRpbmcpO1xuICAgICAgdGguc2V0QXR0cmlidXRlKFwiYXJpYS1zb3J0XCIsIFwiYXNjZW5kaW5nXCIpO1xuICAgIH1cblxuICAgIC8qIENsZWFyIGFzYy9kZXNjIGNsYXNzIG5hbWVzIGZyb20gdGhlIGxhc3Qgc29ydGVkIGNvbHVtbidzIHRoIGlmIGl0IGlzbid0IHRoZSBzYW1lIGFzIHRoZSBvbmUgdGhhdCB3YXMganVzdCBjbGlja2VkICovXG4gICAgaWYgKHRoaXMuZG9tLmRhdGFzZXQubGFzdHRoICE9PSB1bmRlZmluZWQgJiYgdGguY2VsbEluZGV4ICE9IHRoaXMuZG9tLmRhdGFzZXQubGFzdHRoKSB7XG4gICAgICBjb25zdCBoZWFkaW5ncyA9IHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0aGVhZCB0aFwiKTtcbiAgICAgIGhlYWRpbmdzW3RoaXMuZG9tLmRhdGFzZXQubGFzdHRoXS5jbGFzc0xpc3QucmVtb3ZlKHRhYmxlY3NzLmRlc2NlbmRpbmcpO1xuICAgICAgaGVhZGluZ3NbdGhpcy5kb20uZGF0YXNldC5sYXN0dGhdLmNsYXNzTGlzdC5yZW1vdmUodGFibGVjc3MuYXNjZW5kaW5nKTtcbiAgICAgIGhlYWRpbmdzW3RoaXMuZG9tLmRhdGFzZXQubGFzdHRoXS5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLXNvcnRcIik7XG5cbiAgICB9XG4gICAgdGhpcy5kb20uZGF0YXNldC5sYXN0dGggPSB0aC5jZWxsSW5kZXg7XG5cbiAgICByb3dzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIHJldHVybiBjb21wYXJlX2NvbGRhdGEoYSwgYik7XG4gICAgfSk7XG4gICAgY29uc3QgdGJvZHkgPSB0aGlzLmRvbS5xdWVyeVNlbGVjdG9yKCd0Ym9keScpO1xuICAgIGNvbnN0IGNsb25lID0gdGJvZHkuY2xvbmVOb2RlKCk7XG4gICAgY29uc3QgdHJzID0gdGJvZHkucXVlcnlTZWxlY3RvckFsbCgndHInKTtcbiAgICB0Ym9keS5pbm5lckhUTUwgPSBgYDtcbiAgICB0aGlzLmR0ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zb2xlLmxvZygndGltZXN0YXInLCB0aGlzLmR0KTtcbiAgICBjb25zdCBzb3J0ZWQgPSBbXTtcbiAgICByb3dzLmZvckVhY2goKHIsIGkpID0+IHtcbiAgICAgIGNsb25lLmFwcGVuZENoaWxkKHRyc1tyLnJvd10pO1xuICAgICAgc29ydGVkLnB1c2godGhpcy5ncmlkLmRhdGFbci5yb3ddKTtcblxuICAgIH0pO1xuICAgIHRoaXMuZ3JpZC5kYXRhID0gc29ydGVkO1xuICAgIHRoaXMuZG9tLnJlcGxhY2VDaGlsZChjbG9uZSwgdGJvZHkpO1xuXG4gICAgdGhpcy5lbWl0KHRoaXMuZXZlbnRuYW1lcy5zb3J0ZWQsIGRpciwgdGguY2VsbEluZGV4KTtcblxuXG4gIH1cblxuICB0YWJsZVNlYXJjaChpbnB1dCwgY2FzZXNlbnNpdGl2ZSA9IGZhbHNlKSB7XG4gICAgZnVuY3Rpb24gc2VhcmNoX3N0cmluZyhzdHIsIGNhc2VzZW5zaXRpdmUpIHtcbiAgICAgIHN0ciA9IChjYXNlc2Vuc2l0aXZlKSA/IHN0ciA6IHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHN0cjsgLy8gc3RyLnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXS9nLCAnXFxcXCQmJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VhcmNoX3F1ZXJpZXMoc3RyLCBjYXNlc2Vuc2l0aXZlKSB7XG4gICAgICBzdHIgPSBzZWFyY2hfc3RyaW5nKHN0ciwgY2FzZXNlbnNpdGl2ZSk7XG4gICAgICBsZXQgc3RycyA9IFtdO1xuICAgICAgbGV0IHBocmFzZTtcbiAgICAgIHdoaWxlICgocGhyYXNlID0gc3RyLm1hdGNoKC9cIihbXlwiXSspXCIvKSkgIT09IG51bGwpIHtcblxuICAgICAgICBzdHJzLnB1c2gocGhyYXNlWzFdKTtcbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBwaHJhc2UuaW5kZXgpICsgc3RyLnN1YnN0cmluZyhwaHJhc2UuaW5kZXggKyBwaHJhc2VbMF0ubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIC8vIEdldCByZW1haW5pbmcgc3BhY2Utc2VwYXJhdGVkIHdvcmRzIChpZiBhbnkpXG4gICAgICBzdHIgPSBzdHIudHJpbSgpO1xuICAgICAgaWYgKHN0ci5sZW5ndGgpIHN0cnMgPSBzdHJzLmNvbmNhdChzdHIuc3BsaXQoL1xccysvKSk7XG4gICAgICByZXR1cm4gc3RycztcbiAgICB9XG5cbiAgICBsZXQgcXVlcmllcyA9IHNlYXJjaF9xdWVyaWVzKGlucHV0LnZhbHVlKTtcbiAgICBsZXQgZGF0YXMgPSB0aGlzLmdyaWQuZGF0YSxcbiAgICAgIGluZGV4ZXMgPSBbXTtcbiAgICBjb25zdCB0cnMgPSB0aGlzLmRvbS5xdWVyeVNlbGVjdG9yQWxsKCd0Ym9keSB0cicpO1xuICAgIGNvbnN0IGNlbGxpZCA9IHRoaXMuZ2V0Q2VsbElkKHRoaXMuY2VsbGlkbmFtZSk7XG4gICAgcXVlcmllcy5mb3JFYWNoKHFyeSA9PiB7XG4gICAgICBpbmRleGVzID0gW107XG4gICAgICBkYXRhcyA9IGRhdGFzLmZpbHRlcigoZGF0YSwgaikgPT4ge1xuICAgICAgICBjb25zdCBmb3VuZCA9IGRhdGEuZmlsdGVyKGNlbGwgPT4ge1xuICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGNlbGwpIHtcbiAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICAgIGNlbGwgPSAoY2VsbCkgPyBPYmplY3QudmFsdWVzKGNlbGwpLmpvaW4oJyAnKSA6IGBgO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgICAgICAgICAgY2VsbCA9IGNlbGwuam9pbignICcpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGNlbGwgPSBTdHJpbmcoY2VsbCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoKGNhc2VzZW5zaXRpdmUpID8gY2VsbC5pbmRleE9mKHFyeSkgOiBjZWxsLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxcnkpKSA+IC0xO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZm91bmQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChjZWxsaWQgPCAwKSBpbmRleGVzLnB1c2goU3RyaW5nKGopKTtcbiAgICAgICAgICBlbHNlIGluZGV4ZXMucHVzaChTdHJpbmcoZGF0YVtjZWxsaWRdKSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgICB0cnMuZm9yRWFjaCgodHIsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoKHF1ZXJpZXMubGVuZ3RoID4gMCAmJiBpbmRleGVzLmxlbmd0aCA9PT0gMCkgfHwgKGluZGV4ZXMubGVuZ3RoICYmIGluZGV4ZXMuaW5kZXhPZih0ci5kYXRhc2V0LmlkKSA8IDApKSB0ci5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgIGVsc2UgdHIuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIGluaXRTZWFyY2goKSB7XG4gICAgdGhpcy5zZWFyY2hpbmcgPSBmYWxzZTtcbiAgICAvLyBzZWFyY2ggaXRlbXNcbiAgICBjb25zdCBzZWFyY2hpbnB1dCA9IHRoaXMud3JhcHBlci5xdWVyeVNlbGVjdG9yKHRhYmxlc2VsZWN0b3JzLnNlYXJjaCArICcgaW5wdXQnKTtcbiAgICBpZiAoIXNlYXJjaGlucHV0KSByZXR1cm47XG4gICAgbGV0IHNlYXJjaHN0cmluZyA9IGBgO1xuICAgIGNvbnN0IHNlYXJjaF90ZXJtcyA9IGRlYm91bmNlKChlbCkgPT4ge1xuICAgICAgc2VhcmNoc3RyaW5nID0gZWwudmFsdWU7XG4gICAgICB0aGlzLnRhYmxlU2VhcmNoKGVsKTtcbiAgICB9LCA1MDApO1xuICAgIHNlYXJjaGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc2VhcmNoX3Rlcm1zKGUuY3VycmVudFRhcmdldCk7XG4gICAgfSlcbiAgICBzZWFyY2hpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblxuICAgICAgaWYgKHNlYXJjaHN0cmluZyAhPT0gZS5jdXJyZW50VGFyZ2V0LnZhbHVlKSBzZWFyY2hfdGVybXMoZS5jdXJyZW50VGFyZ2V0KTtcblxuICAgIH0pXG4gICAgbGV0IHRpbWVzZWFyY2ggPSBmYWxzZTtcbiAgICB0aGlzLm9uKHRoaXMuZXZlbnRuYW1lcy5zZWFyY2gsIChxdWVyeSwgbWF0Y2hlZCkgPT4ge1xuICAgICAgaWYgKHRoaXMucGx1Z2lucy5oYXNPd25Qcm9wZXJ0eSgnanNEZXRhaWwnKSkgdGhpcy5wbHVnaW5zWydqc0RldGFpbCddLmFjdGl2ZURldGFpbChmYWxzZSk7XG4gICAgICB0aGlzLnNlYXJjaGluZyA9IHRydWU7XG4gICAgfSk7XG4gICAgdGhpcy5vbih0aGlzLmV2ZW50bmFtZXMuc2VhcmNoZW5kLCAocXVlcnksIG1hdGNoZWQpID0+IHtcblxuICAgICAgdGhpcy5zZWFyY2hpbmcgPSBmYWxzZTtcbiAgICB9KTtcbiAgICB0aGlzLm9uKHRoaXMuZXZlbnRuYW1lcy51cGRhdGUsICgpID0+IHtcbiAgICAgIGlmICh0aW1lc2VhcmNoID09PSBmYWxzZSkge1xuICAgICAgICB0aW1lc2VhcmNoID0gdHJ1ZTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgcmVmcmVzaF9kZXRhaWxzKCk7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuZG9tLmRhdGFzZXQuaXNzZWFyY2hpbmc7XG4gICAgICAgICAgdGltZXNlYXJjaCA9IGZhbHNlO1xuICAgICAgICB9LCAzMDApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGluaXRTZWxlY3QoY29udGFpbmVyKSB7XG4gICAgY29uc3QgaW5wdXRzID0gdGhpcy5kb20ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbbmFtZV49XCInICsgdGhpcy5pbnN0YW5jZWlkICsgJ1wiXScpO1xuICAgIGlmIChpbnB1dHMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgY29uc3QgaW5wdXRuYW1lID0gaW5wdXRzWzBdLm5hbWU7XG4gICAgbGV0IHNlbGVjdGFjdGlvbiA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuJyArIHRhYmxlY3NzLnNlbGVjdGFjdGlvbik7XG4gICAgaWYgKCFzZWxlY3RhY3Rpb24pIHJldHVybjtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChzZWxlY3RhY3Rpb24pO1xuICAgIHNlbGVjdGFjdGlvbi5xdWVyeVNlbGVjdG9yKCdhJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgbGV0IHZhbHMgPSBbXTtcbiAgICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgaWYgKGlucHV0LmNoZWNrZWQpIHZhbHMucHVzaChpbnB1dC52YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChzZWxlY3RhY3Rpb24uZGF0YXNldC5pbnB1dCkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzZWxlY3RhY3Rpb24uZGF0YXNldC5pbnB1dCkudmFsdWUgPSB2YWxzLmpvaW4oJywnKTtcbiAgICAgICAgaWYgKHNlbGVjdGFjdGlvbi5kYXRhc2V0LmZvcm0pIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdGFjdGlvbi5kYXRhc2V0LmZvcm0pLnN1Ym1pdCgpO1xuICAgICAgfSBlbHNlIGUuY3VycmVudFRhcmdldC5ocmVmID0gdGhpcy5wYXJhbXMub25zZWxlY3QgKyBlbmNvZGVVUkkodmFscy5qb2luKCcsJykpO1xuXG4gICAgfSk7XG4gICAgY29uc3QgY2xvc2UgPSBzZWxlY3RhY3Rpb24ucXVlcnlTZWxlY3RvcignW2RhdGEtZGlzbWlzc10nKTtcbiAgICBpZiAoY2xvc2UpIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICBwb3B1cF9zZWxlY3RlZChudWxsLCBudWxsKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHBvcHVwX3NlbGVjdGVkID0gKHRvcCA9IG51bGwsIGxlZnQgPSBudWxsLCBmb3JjZWNsb3NlID0gZmFsc2UpID0+IHtcbiAgICAgIGlmIChzZWxlY3RhY3Rpb24uZGF0YXNldC5jbG9zZSkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChzZWxlY3RhY3Rpb24pO1xuICAgICAgICBjbG9zZS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgc2VsZWN0YWN0aW9uLmNsYXNzTGlzdC5hZGQodGFibGVjc3MuYWJzaW5wdXQpO1xuICAgICAgfVxuICAgICAgaWYgKHRvcCAhPT0gbnVsbCAmJiBsZWZ0ICE9PSBudWxsKSB7XG4gICAgICAgIHNlbGVjdGFjdGlvbi5jbGFzc0xpc3QucmVtb3ZlKGNzcy5oaWRlKTtcbiAgICAgICAgc2VsZWN0YWN0aW9uLnN0eWxlLnRvcCA9IHRvcCArICdweCc7XG4gICAgICAgIHNlbGVjdGFjdGlvbi5zdHlsZS5sZWZ0ID0gbGVmdCArICdweCc7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3JjZWNsb3NlID09PSB0cnVlKSB7XG4gICAgICAgICAgc2VsZWN0YWN0aW9uLmNsYXNzTGlzdC5hZGQoY3NzLmhpZGUpO1xuICAgICAgICAgIGRlbGV0ZSBzZWxlY3RhY3Rpb24uZGF0YXNldC5jbG9zZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxlY3RhY3Rpb24uZGF0YXNldC5jbG9zZSA9IHRydWU7XG4gICAgICAgICAgY2xvc2UuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgY29uc3QgdG9wdGFibGUgPSB0aGlzLndyYXBwZXIucXVlcnlTZWxlY3Rvcih0YWJsZXNlbGVjdG9ycy50b3ApID8gdGhpcy53cmFwcGVyLnF1ZXJ5U2VsZWN0b3IodGFibGVzZWxlY3RvcnMudG9wKSA6IHRoaXMud3JhcHBlcjtcbiAgICAgICAgICB0b3B0YWJsZS5wcmVwZW5kKHNlbGVjdGFjdGlvbik7XG4gICAgICAgICAgc2VsZWN0YWN0aW9uLmNsYXNzTGlzdC5yZW1vdmUodGFibGVjc3MuYWJzaW5wdXQpO1xuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGlucHV0LmNoZWNrZWQpIHBvcHVwX3NlbGVjdGVkKGlucHV0Lm9mZnNldFRvcCwgaW5wdXQub2Zmc2V0TGVmdCk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W25hbWVePVwiJyArIHRoaXMuaW5zdGFuY2VpZCArICdcIl06Y2hlY2tlZCcpLmxlbmd0aCA9PT0gMCkgcG9wdXBfc2VsZWN0ZWQobnVsbCwgbnVsbCwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAodGhpcy5kb20ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbbmFtZV49XCInICsgdGhpcy5pbnN0YW5jZWlkICsgJ1wiXTpjaGVja2VkJykubGVuZ3RoID4gMCkge1xuICAgICAgc2VsZWN0YWN0aW9uLmNsYXNzTGlzdC5yZW1vdmUoY3NzLmhpZGUpO1xuICAgICAgcG9wdXBfc2VsZWN0ZWQobnVsbCwgbnVsbCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGluaXREZXRhaWxzKCkgeyAvLyBUT0RPIDogZ2VuZXJpY1xuICAgIC8vIGFib3V0IC0gb25lIGRpdiB0byBkaXNwbGF5IGNlbGwgZGV0YWlscyBtYWtlIGl0IGFwcGVhciBhcyB0YWJsZSByb3cgZXhwYW5kaW5nXG4gICAgY29uc3Qgd3JhcHBlciA9IHRoaXMud3JhcHBlcjtcblxuICAgIGNvbnN0IGFib3V0ID0gd3JhcHBlci5xdWVyeVNlbGVjdG9yKCcjJyArIHRhYmxlY3NzLnRpcGlubGluZSkgPyB3cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJyMnICsgdGFibGVjc3MudGlwaW5saW5lKSA6IHRhYmxlY3NzLnRpcGlubGluZTtcbiAgICBpZiAoIWR5bmFtaWNzLkpzRGV0YWlsKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIEpzRGV0YWlsXG4gICAgICB9ID0gYXdhaXRcbiAgICAgIGltcG9ydCgnLi4vbW9kdWxlcy9qcy1kZXRhaWwuanMnKTtcbiAgICAgIGR5bmFtaWNzLkpzRGV0YWlsID0gSnNEZXRhaWw7XG4gICAgfVxuICAgIGNvbnN0IGpzRGV0YWlsID0gbmV3IGR5bmFtaWNzLkpzRGV0YWlsKGFib3V0LCB3cmFwcGVyLCB7XG4gICAgICB3YWl0ZGl2OiB0aGlzLndhaXRkaXZcbiAgICB9KTsgLy8gc3BlY2lmaWMgdG8gYWJvdXQgZGV0YWlscyBpbiB0YWJsZVxuICAgIC8vIGhpZGUgLyBzaG93IGRpc2FibGUgZGV0YWlscyB6b25lXG4gICAgY29uc3QgY2FsbGJhY2tjbG9zZSA9IChlbCwgY2FsbGJhY2sgPSBudWxsKSA9PiB7XG4gICAgICBqc0RldGFpbC5hY3RpdmVEZXRhaWwoZmFsc2UpO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIGNvbnN0IGNhbGxiYWNrb3BlbiA9IChlbCwgY2FsbGJhY2sgPSBudWxsKSA9PiB7XG4gICAgICBqc0RldGFpbC5hY3RpdmVEZXRhaWwodHJ1ZSk7XG4gICAgICBpZiAoanNEZXRhaWwuY3VycmVudCAmJiBqc0RldGFpbC5jdXJyZW50ID09PSBlbCkge1xuICAgICAgICBqc0RldGFpbC5leHBhbmREZXRhaWwoZWwpO1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoanNEZXRhaWwuY3VycmVudCkganNEZXRhaWwuY3VycmVudC5xdWVyeVNlbGVjdG9yKCdzdW1tYXJ5JykuY2xpY2soKTtcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5wYXJhbXMuZGV0YWlsc3VybCArIGVsLmRhdGFzZXQuaWQgKyAnPycgK1xuICAgICAgICAgIG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgICAgICAgcGFydGlhbDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICBqc0RldGFpbC5hY3RpdmVEZXRhaWwodHJ1ZSk7XG4gICAgICAgIC8vIGFwcGVuZCB0byBjZWxsIGRldGFpbHMgYW5kIGRpc3BsYXlcblxuICAgICAgICBmZXRjaCh1cmwsIGZldGNoU2V0dGluZ3MoKSkudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpLnRoZW4oaHRtbCA9PiB7XG4gICAgICAgICAganNEZXRhaWwuZXhwYW5kRGV0YWlsKGVsLCBodG1sKTtcbiAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ3JlcXVlc3QnLCBlcnIpO1xuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgfVxuICAgIGlmICghZHluYW1pY3MuSnNBY2NvcmRpb24pIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgSnNBY2NvcmRpb25cbiAgICAgIH0gPSBhd2FpdCBpbXBvcnQoJy4uL21vZHVsZXMvanMtYWNjb3JkaW9uLmpzJyk7XG4gICAgICBkeW5hbWljcy5Kc0FjY29yZGlvbiA9IEpzQWNjb3JkaW9uO1xuICAgIH1cblxuICAgIGNvbnN0IHJlZnJlc2hfZGV0YWlscyA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmRvbS5jbGFzc0xpc3QuY29udGFpbnMoY3NzLmhpZGUpKSB0aGlzLmRvbS5jbGFzc0xpc3QucmVtb3ZlKGNzcy5oaWRlKTtcbiAgICAgIGNvbnN0IGRldGFpbHMgPSB0aGlzLmRvbS5xdWVyeVNlbGVjdG9yQWxsKHRhYmxlc2VsZWN0b3JzLmRldGFpbHMpO1xuICAgICAgaWYgKCFkZXRhaWxzKSByZXR1cm47XG4gICAgICBkZXRhaWxzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmICghaXRlbS5kYXRhc2V0LmlkKSByZXR1cm47XG5cbiAgICAgICAgaXRlbSA9IG5ldyBkeW5hbWljcy5Kc0FjY29yZGlvbihpdGVtLCBjYWxsYmFja29wZW4sIGNhbGxiYWNrY2xvc2UsIGpzRGV0YWlsLmRldGFpbCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5wbHVnaW5zWydqc0RldGFpbCddID0ganNEZXRhaWw7XG4gICAgcmVmcmVzaF9kZXRhaWxzKCk7XG4gIH1cblxuICBpbml0QWx0ZXJuYXRlU29ydChjb2xzKSB7XG5cbiAgICBsZXQgdGRjb2xzID0gW107XG4gICAgY29scy5mb3JFYWNoKGNvbCA9PiB7XG4gICAgICBjb25zdCB0ZGNvbCA9IGNvbC5jbG9zZXN0KCd0aCcpO1xuICAgICAgT2JqZWN0LmVudHJpZXMoY29sLmRhdGFzZXQpLmZvckVhY2goKFtrLCB2XSkgPT4ge1xuICAgICAgICB0ZGNvbC5kYXRhc2V0W2tdID0gdjtcbiAgICAgICAgY29sLmNsYXNzTGlzdC5hZGQoJ2lubGluZS1ibG9jaycpXG4gICAgICB9KTtcbiAgICAgIHRkY29scy5wdXNoKHRkY29sKTtcbiAgICB9KTtcbiAgICBjb2xzID0gdGRjb2xzO1xuICAgIC8vIGVuZCBmaXhcblxuICAgIGxldCBjb2x0b3NvcnQ7XG4gICAgY29uc3Qgc29ydGFsdGVybmF0ZSA9IChjb2wpID0+IHtcbiAgICAgIGxldCB0b2RpcjtcbiAgICAgIC8vIGtlZXAgdGhlIHNhbWUgZGlyIGlmIHNvcnQgb24gY29sIGNoYW5nZXNcbiAgICAgIGlmIChwYXJzZUludChjb2wuZGF0YXNldC5zb3J0YWN0aXZlKSA9PT0gcGFyc2VJbnQoY29sdG9zb3J0KSkge1xuICAgICAgICB0b2RpciA9IChjb2wuY2xhc3NMaXN0LmNvbnRhaW5zKHRhYmxlY3NzLmFzY2VuZGluZykpID8gJ2Rlc2MnIDogKChjb2wuY2xhc3NMaXN0LmNvbnRhaW5zKHRhYmxlY3NzLmRlc2NlbmRpbmcpKSA/ICdhc2MnIDogJ2FzYycpO1xuICAgICAgfSBlbHNlIHRvZGlyID0gKGNvbC5jbGFzc0xpc3QuY29udGFpbnModGFibGVjc3MuYXNjZW5kaW5nKSkgPyAnYXNjJyA6IChjb2wuY2xhc3NMaXN0LmNvbnRhaW5zKHRhYmxlY3NzLmRlc2NlbmRpbmcpKSA/ICdkZXNjJyA6ICdhc2MnO1xuICAgICAgLy8gIHRoaXMuZ3JpZC5jb2x1bW5zLnNvcnQoY29sdG9zb3J0LCB0b2Rpcik7XG5cbiAgICAgIHRoaXMuc29ydENvbHVtbihjb2wsIGNvbHRvc29ydCwgdG9kaXIpO1xuXG4gICAgfVxuICAgIGNvbHMuZm9yRWFjaChjb2wgPT4ge1xuICAgICAgY29uc3QgYWx0c29ydCA9IChjb2wuZGF0YXNldC5hbHRzb3J0KSA/IGNvbC5kYXRhc2V0LmFsdHNvcnQuc3BsaXQoJywnKSA6IG51bGw7XG4gICAgICBpZiAoIWFsdHNvcnQpIHJldHVybjtcbiAgICAgIGNvbnN0IGNzc3NvcnRlciA9IGNvbC5xdWVyeVNlbGVjdG9yKHRhYmxlc2VsZWN0b3JzLnNvcnRlcik7XG4gICAgICBpZiAoY3Nzc29ydGVyKSBjc3Nzb3J0ZXIuY2xhc3NMaXN0LmFkZCh0YWJsZWNzcy5kaXNhYmxlZCk7XG4gICAgICBjb25zdCBjb250cm9sID0gY29sLnF1ZXJ5U2VsZWN0b3IodGFibGVzZWxlY3RvcnMuc29ydG9uKTtcbiAgICAgIC8vIHByZXZlbnRzIGltYnJpY2F0ZWQgbGlua3NcbiAgICAgIGNvbC5hcHBlbmQoY29udHJvbCk7XG4gICAgICBjb25zdCB0cmlnZ2VycyA9IGNvbC5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT1cImJ1dHRvblwiXScpO1xuXG4gICAgICBjb2wuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNvcnRhbHRlcm5hdGUoY29sKTtcbiAgICAgIH0sIGZhbHNlKTtcbiAgICAgIGNvbnN0IGNoYW5nZWNvbHRvc29ydCA9IChjbCwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSBjb2x0b3NvcnQgPSB0aGlzLmdyaWQuY29sdW1ucy5maW5kSW5kZXgoY29sdW1uID0+IChjb2x1bW4uaW5kZXggPT09IGNsLmNlbGxJbmRleCkpO1xuICAgICAgICBlbHNlIGNvbHRvc29ydCA9IHRoaXMuZ3JpZC5jb2x1bW5zLmZpbmRJbmRleChjb2x1bW4gPT4gKGNvbHVtbi5uYW1lID09PSBhbHRzb3J0W2luZGV4IC0gMV0pKTtcbiAgICAgIH1cbiAgICAgIGNvbC5kYXRhc2V0LnNvcnRhY3RpdmUgPSBjb2wuY2VsbEluZGV4O1xuICAgICAgdHJpZ2dlcnMuZm9yRWFjaCgodHJpZ2dlciwgaW5kZXgpID0+IHtcbiAgICAgICAgdHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGNvbnN0IGFjdGl2ZSA9IGUuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUnKTtcbiAgICAgICAgICBpZiAoYWN0aXZlKSBhY3RpdmUuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICAgIGNoYW5nZWNvbHRvc29ydChjb2wsIGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChjb2wuZGF0YXNldC50aXApIHtcblxuICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMuZG9tLnJvd3MpLmZvckVhY2goKHJvdywgaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHJldHVybjtcbiAgICAgICAgICBjb25zdCBjb2x0aXAgPSB0aGlzLmdyaWQuY29sdW1ucy5maW5kSW5kZXgoY29sdW1uID0+IChjb2x1bW4ubmFtZSA9PT0gYWx0c29ydFtwYXJzZUludChjb2wuZGF0YXNldC50aXApIC0gMV0pKTtcblxuICAgICAgICAgIGlmIChyb3cuY2VsbHMubGVuZ3RoID09PSAwIHx8IGNvbHRpcCA9PT0gY29sLmNlbGxJbmRleCkgcmV0dXJuO1xuICAgICAgICAgIHJvdy5jZWxsc1tjb2wuY2VsbEluZGV4XS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKGUpID0+IHtcblxuICAgICAgICAgICAgY29uc3QgdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB0aXAuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRhYmxlY3NzLnRpcG92ZXIpO1xuICAgICAgICAgICAgdGlwLmlubmVySFRNTCA9IHJvdy5jZWxsc1tjb2x0aXBdLmlubmVySFRNTDtcbiAgICAgICAgICAgIGUuY3VycmVudFRhcmdldC5hcHBlbmQodGlwKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByb3cuY2VsbHNbY29sLmNlbGxJbmRleF0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGlwID0gZS5jdXJyZW50VGFyZ2V0LnF1ZXJ5U2VsZWN0b3IodGFibGVzZWxlY3RvcnMudGlwb3Zlcik7XG4gICAgICAgICAgICBpZiAodGlwKSB0aXAucmVtb3ZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuXG4gIGNsb3NlU2hvd2Z1bGwoKSB7XG4gICAgY29uc3Qgc2hvd2Z1bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIGNzcy5jb21wb25lbnQudGFibGUudGlwICsgJy4nICsgdGFibGVjc3Muc2hvd2Z1bGwpO1xuICAgIGlmIChzaG93ZnVsbCkgc2hvd2Z1bGwuY2xpY2soKTtcbiAgfVxuICBtYWtlRXhwYW5kYWJsZShjb250YWluZXIpIHtcbiAgICBpZiAoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlJykub2Zmc2V0SGVpZ2h0IDwgY29udGFpbmVyLm9mZnNldEhlaWdodCArIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCd0YWJsZSB0Ym9keSB0cicpLm9mZnNldEhlaWdodCkgcmV0dXJuO1xuICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGJ0bi5jbGFzc0xpc3QuYWRkKCdidXR0b24tZXhwYW5kJyk7XG4gICAgYnRuLmNsYXNzTGlzdC5hZGQoJ2JvcmRlci10Jyk7XG4gICAgYnRuLnRpdGxlID0gdGhpcy5wYXJhbXMuZXhwYW5kO1xuICAgIGJ0bi5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJzbWFsbC1jYXBzIGJsb2NrIG14LWF1dG8gcC0wXCI+JHt0aGlzLnBhcmFtcy5leHBhbmR9PC9zcGFuPjxpIGNsYXNzPVwiY2xlYXItYm90aCBwLTAgbXgtYXV0byBpY29uIGljb24tY2hldnJvbi1kb3duIGhvdmVyOmZpbGwtc2Vjb25kYmx1ZS01MDBcIj48L2k+PHNwYW4gY2xhc3M9XCJzbWFsbC1jYXBzIGJsb2NrIG14LWF1dG8gcC0wIGhpZGRlblwiPiR7XG4gICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcy5zaHJpbmt9PC9zcGFuPmA7XG4gICAgY29udGFpbmVyLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGJ0biwgY29udGFpbmVyLm5leHRFbGVtZW50U2libGluZyk7XG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ292ZXJmbG93LXktaGlkZGVuJyk7XG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ21heC10YWJzdGF0LWgnKTtcbiAgICBjb250YWluZXIucGFyZW50RWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgY29uc3QgaCA9IHBhcnNlSW50KHRoaXMud3JhcHBlci5xdWVyeVNlbGVjdG9yKCd0Ym9keSB0cicpLm9mZnNldEhlaWdodCkgKiAoKHRoaXMucGFyYW1zLm1heHJvd3MpID8gdGhpcy5wYXJhbXMubWF4cm93cyA6IDIwKTtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbWF4LWgtWycgKyBoICsgJ3B4XScpO1xuICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JztcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgdGhpcy5jbG9zZVNob3dmdWxsKCk7XG4gICAgICBidG4uY2xhc3NMaXN0LnRvZ2dsZSgnYm9yZGVyLXQnKTtcbiAgICAgIGJ0bi5jbGFzc0xpc3QudG9nZ2xlKCdib3JkZXItYicpO1xuICAgICAgY29uc3QgaWNvID0gYnRuLnF1ZXJ5U2VsZWN0b3IoJ2knKTtcbiAgICAgIGljby5jbGFzc0xpc3QudG9nZ2xlKCdpY29uLWNoZXZyb24tZG93bicpO1xuICAgICAgaWNvLmNsYXNzTGlzdC50b2dnbGUoJ2ljb24tY2hldnJvbi11cCcpO1xuICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ292ZXJmbG93LXktaGlkZGVuJyk7XG4gICAgICBjb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgnbWF4LWgtWycgKyBoICsgJ3B4XScpO1xuICAgICAgYnRuLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4nKS5mb3JFYWNoKHNwYW4gPT4ge1xuICAgICAgICBzcGFuLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xuICAgICAgfSk7XG4gICAgICBpZiAoY29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucygnb3ZlcmZsb3cteS1oaWRkZW4nKSkgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGggKyAncHgnO1xuICAgICAgZWxzZSBjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgIH0pO1xuICB9XG4gIG1ha2VFeHBvcnRhYmxlKGNvbnRhaW5lcikge1xuICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGJ0bi5jbGFzc0xpc3QuYWRkKCdidXR0b24tZXhwb3J0Jyk7XG4gICAgYnRuLmNsYXNzTGlzdC5hZGQoJ2lzLXBpY2snKTtcbiAgICBidG4uaW5uZXJIVE1MID0gYDxpIGNsYXNzPVwiaWNvbiBpY29uLWFycm93LWRvd24tb24tc3F1YXJlXCI+PC9pPjxzcGFuPiR7KCh0aGlzLnBhcmFtcy5leHBvcnRsYWJlbCkgPyB0aGlzLnBhcmFtcy5leHBvcnRsYWJlbCA6ICdleHBvcnQgc3RhdGlzdGljcyAnKX08L3NwYW4+YDtcbiAgICBjb250YWluZXIucHJlcGVuZChidG4pO1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmdyaWQuY29sdW1ucztcbiAgICBsZXQgZXhjbHVkZV9jb2x1bW5zID0gW107XG4gICAgdGhpcy5ncmlkLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGNvbHVtbi5uYW1lID09PSAnc2VsZWN0JykgZXhjbHVkZV9jb2x1bW5zLnB1c2goY29sdW1uLmluZGV4KTtcbiAgICB9KTtcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKCF0aGlzLmR5bmFtaWNzKSB0aGlzLmR5bmFtaWNzID0ge307XG4gICAgICBpZiAoIXRoaXMuZHluYW1pY3MuZXhwb3J0Q1NWKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBleHBvcnRDU1YgLy8gb3IgZXhwb3J0SlNPTiwgZXhwb3J0U1FMXG4gICAgICAgIH0gPSBhd2FpdFxuICAgICAgICBpbXBvcnQoXCIuLi9tb2R1bGVzL2pzLWV4cG9ydC1jc3YuanNcIik7XG5cbiAgICAgICAgdGhpcy5keW5hbWljcy5leHBvcnRDU1YgPSBleHBvcnRDU1Y7XG4gICAgICB9XG4gICAgICBsZXQgc3RyID0gdGhpcy5keW5hbWljcy5leHBvcnRDU1YodGhpcywge1xuICAgICAgICBkb3dubG9hZDogZmFsc2UsXG4gICAgICAgIGxpbmVkZWxpbWl0ZXI6IFwiXFxuXCIsXG4gICAgICAgIGNvbHVtbmRlbGltaXRlcjogXCJcXHRcIixcbiAgICAgICAgc2tpcGNvbHVtbnM6IGV4Y2x1ZGVfY29sdW1uc1xuICAgICAgfSk7XG4gICAgICBzdHIgPSBlbmNvZGVVUkkoYGRhdGE6dGV4dC90c3Y7Y2hhcnNldD11dGYtOCwke3N0cn1gKTtcblxuICAgICAgZG93bmxvYWRfdXJsKHN0ciwgKChjb250YWluZXIuaWQpID8gY29udGFpbmVyLmlkIDogJ3N0YXRzX3Byb2onKSArICcudHN2Jyk7XG5cbiAgICB9KTtcbiAgfVxuICBpbml0VGlwcygpIHtcbiAgICAvLyBzaG93IGJpZyBjZWxsIGNvbnRlbnRcbiAgICBsZXQgY3VycmVudCA9IG51bGw7XG4gICAgdGhpcy5kb20ucXVlcnlTZWxlY3RvckFsbCh0YWJsZXNlbGVjdG9ycy50aXApLmZvckVhY2godGlwID0+IHtcbiAgICAgIHRpcC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKGUpID0+IHtcbiAgICAgICAgaWYgKHRpcC5jbGFzc0xpc3QuY29udGFpbnModGFibGVjc3Muc2hvd2Z1bGwpIHx8ICh0aXAuc2Nyb2xsSGVpZ2h0ID4gdGlwLm9mZnNldEhlaWdodCkpIHtcbiAgICAgICAgICB0aXAuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRpcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0eWxlcGFyZW50ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGlwLnBhcmVudEVsZW1lbnQpO1xuICAgICAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRpcC5wYXJlbnRFbGVtZW50KTtcbiAgICAgICAgaWYgKHRpcC5jbGFzc0xpc3QuY29udGFpbnModGFibGVjc3Muc2hvd2Z1bGwpKSB7XG4gICAgICAgICAgdGlwLmNsYXNzTGlzdC5yZW1vdmUodGFibGVjc3Muc2hvd2Z1bGwpO1xuICAgICAgICAgIHRpcC5wYXJlbnRFbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9ICdub25lJztcbiAgICAgICAgICB0aXAucGFyZW50RWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgICAgICAgdGlwLnN0eWxlLm1heFdpZHRoID0gdGlwLmRhdGFzZXQudyArICdweCc7XG4gICAgICAgICAgdGlwLnN0eWxlLnBhZGRpbmcgPSB0aXAuZGF0YXNldC5wICsgJ3B4JztcbiAgICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmICh0aXAuc2Nyb2xsSGVpZ2h0ID4gdGlwLm9mZnNldEhlaWdodCkge1xuICAgICAgICAgIGlmIChjdXJyZW50KSBjdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUodGFibGVjc3Muc2hvd2Z1bGwpO1xuICAgICAgICAgIGNvbnN0IGggPSBwYXJzZUludCh0aXAuY2xpZW50SGVpZ2h0KTtcbiAgICAgICAgICB0aXAucGFyZW50RWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSB0aXAucGFyZW50RWxlbWVudC5zdHlsZS5oZWlnaHQgPSAoKChoIDwgcGFyc2VJbnQoc3R5bGVwYXJlbnQubWF4SGVpZ2h0KSkgPyBoIDogcGFyc2VJbnQoc3R5bGVwYXJlbnQubWF4SGVpZ2h0KSkgLSAyICogcGFyc2VJbnQoc3R5bGVwYXJlbnQucGFkZGluZykpICsgJ3B4JztcbiAgICAgICAgICBpZiAoIXRpcC5kYXRhc2V0LncpIHRpcC5kYXRhc2V0LncgPSBwYXJzZUludCh0aXAuY2xpZW50V2lkdGgpO1xuICAgICAgICAgIGlmICghdGlwLmRhdGFzZXQucCkgdGlwLmRhdGFzZXQucCA9IHBhcnNlSW50KHN0eWxlLnBhZGRpbmcpO1xuICAgICAgICAgIHRpcC5zdHlsZS5tYXhXaWR0aCA9IHBhcnNlSW50KHRpcC5jbGllbnRXaWR0aCkgKyAncHgnO1xuICAgICAgICAgIHRpcC5jbGFzc0xpc3QuYWRkKHRhYmxlY3NzLnNob3dmdWxsKTtcbiAgICAgICAgICB0aXAuc3R5bGUudG9wID0gKHBhcnNlSW50KHRpcC5vZmZzZXRUb3ApIC0gcGFyc2VJbnQoc3R5bGVwYXJlbnQucGFkZGluZykpICsgJ3B4JztcbiAgICAgICAgICBjdXJyZW50ID0gdGlwO1xuXG4gICAgICAgIH1cblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/modules/table-component.js\n")},"?4f7e":()=>{}}]);
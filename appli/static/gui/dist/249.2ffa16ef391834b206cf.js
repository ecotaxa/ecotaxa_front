/*! For license information please see 249.2ffa16ef391834b206cf.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[249],{6249:(e,i,t)=>{t.d(i,{JsDirToZip:()=>p});var s=t(9162),n=t(3778);const a=new Set(["zip","gz","png","jpg","jpeg","pdf","doc","docx","ppt","pptx","xls","xlsx","heic","heif","7z","bz2","rar","gif","webp","webm","mp4","mov","mp3","aifc"]);let l=null;const o=1073741824;class p{_events={};eventnames={ready:"ready",endzip:"endzip",complete:"complete",gzip:"gzipfile",sendfile:"sendfile",bigfile:"bigfile",terminate:"terminate",pending:"pending",getfile:"getzipfile",counter:"counter",message:"message",error:"error"};zip=null;zipname=null;filestream=null;streamhandle=null;gzipped=null;sizetozip=0;part=0;continue=null;constructor(e={}){if(l)return l;const i={uploadurl:"/gui/files/upload",largefile:4194304,accept:".tsv,.png,.jpg, .jpeg,.zip,.gz,.7z,.bz2".split(",")};return this.options={...i,...e},console.log("thisopts",this.options),this.init(),l=this,l}init(){(0,s.TG)(this),this.initStorage(),this.on(this.eventnames.ready,(()=>{console.log("ready")}))}reset(){this.zip=null,this.zipname=null,this.filestream=null,this.streamhandle=null,this.gzipped=null,this.sizetozip=0,this.part=0,this.continue=null,this.initStorage()}initZip(){const e=this;this.pos=0,this.sizetozip=0,this.zip=new n.sZ(((i,t,s)=>{if(i)return console.log("error",i),!1;e.streamhandle.write(t,{at:e.pos}),e.pos+=t.length,s&&(e.streamhandle.close(),console.log("final-----------------------------*******************************-",this.part))})),this.continue?this.continue():(this.on(this.eventnames.endzip,(e=>{!e.bigfile&&this.zip?(console.log("zipend",this.zip),this.zip.end()):e.bigfile&&this.gzipped&&console.log("-------------------------gzipped end ",this.gzipped);const i={name:this.eventnames.sendfile};e.part?i.part=e.part:this.part=0,e.hasOwnProperty("bigfile")&&(i.bigfile=e.bigfile),e.hasOwnProperty("path")&&(i.path=e.path),console.log("endzip%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",e),this.emit(this.eventnames.complete,i)})),this.on(this.eventnames.sendfile,(async e=>{console.log("eventsendfile",e);let i=e.bigfile?await this.getFile(this.gzipped):await this.getFile();console.log("sendfile",i),this.sendZipFile(i,e.path?e.path:"",null,!!e.bigfile&&e.bigfile)})),this.on(this.eventnames.bigfile,(e=>{console.log("onsendchunk",e),this.sendChunk(e.path?e.path:"")})))}async initStorage(){navigator&&navigator.storage&&navigator.storage.estimate?(await this.cleanStorage(),this.emit(this.eventnames.ready),navigator.storage.estimate().then((e=>{const i=e.usage/e.quota*100,t=e.quota-e.usage;this.emit(this.eventnames.message,{name:"console",message:"You can write up to "+t+" more bytes."}),this.emit(this.eventnames.message,{name:"console",message:"you've used "+i+"% of the available storage."})}))):this.emit(this.eventnames.message,{name:"error",message:"no navigator storage"})}async createLocalStream(e,i={"application/zip":[".zip"]}){const t=await navigator.storage.getDirectory(),s={types:[{description:"Temp file",accept:i}],create:!0},n=await t.getFileHandle(e,s),a=await n.createWritable();return{filestream:n,streamhandle:a}}async scanHandle(e,i={}){if(console.log("this.zip",this.zip),null===this.zip){const s=i&&i.type?i.type:".zip";this.zipname=(i.zipname?i.zipname:e.name)+s;const{filestream:n,streamhandle:a}=await this.createLocalStream(this.zipname);console.log("streamhandle",a),this.filestream=n,this.streamhandle=a;this.part=0,this.initZip(),console;this.zip;if(!this.jsScanDir){const{JsScanDir:e}=await t.e(284).then(t.bind(t,5614));this.jsScanDir=new e}this.jsScanDir.processFile=(e,i)=>{this.processFile(e,i)},await this.jsScanDir.readDirectory(e,(()=>{this.emit(this.eventnames.complete,{name:this.eventnames.endzip})}))}}async sendBigFile(e,i,t){console.log("sendbigfilepath",t),this.dt=Date.now(),t=0===t.indexOf("/")?t.substr(1):t;const s=e.name.slice(e.name.lastIndexOf(".")+1);if(a.has(s))this.gzipped=e,this.emit(this.eventnames.counter,{name:"zip",filepath:t,size:e.size}),this.emit(this.eventnames.complete,{name:this.eventnames.bigfile,bigfile:t});else{this.emit(this.eventnames.gzip,{name:this.eventnames.gzip,bigfile:t,size:e.size});let a=e.name.split(s);a.pop(),a=a.join(s)+"gz",console.log("bigfile ext="+s,a);const{filestream:l,streamhandle:o}=await this.createLocalStream(a,{"application/gzip":[".gz"]});let p=0;const h=this,r=new n._f({level:9,filename:t});r.ondata=(e,s)=>{s?(console.log("final BIGFILE%%%%%%%%%%%%%%%%%%%%"+h.eventnames.bigfile,t),h.emit(h.eventnames.complete,{name:h.eventnames.bigfile,bigfile:t}),console.log("callbackbig",i),o.close(),console.log("timetozip",(Date.now()-this.dt)/1e3),h.gzipped=l,console.log("big file *******************"+t,h.gzipped)):(o.write(e,{at:p}),p+=e.length)},await this.readFile(e,t,r,i)}}async partZip(){this.part+=1,this.emit(this.eventnames.complete,{name:this.eventnames.endzip,part:this.part})}async readFile(e,i,t,s=null){const n=e.stream().getReader();for(;;){const{done:a,value:l}=await n.read();if(a)return t.push(new Uint8Array(0),!0),this.emit(this.eventnames.counter,{name:"zip",filepath:i,size:t.size?t.size:e.size}),t.terminate&&t.terminate(),s&&s(),a;t.push(l)}}async zipStream(e,i,t){const s=i.slice(i.lastIndexOf(".")+1),l=a.has(s)?new n.Ud(i):e.size>this.options.largefile?new n.wL(i,{level:9}):new n.Tf(i,{level:6});this.zip.add(l),await this.readFile(e,i,l,t)}async processFile(e,i=null){const t=e.fullPath,s=t.slice(t.lastIndexOf(".")+1);this.options.accept.includes(s)?console.log("reject",t):e.isDirectory?i&&i():e.file((async e=>{this.emit(this.eventnames.counter,{name:"scan",filepath:t,size:e.size}),this.continue=null,e.size>=o?this.sendBigFile(e,i,t):(this.sizetozip+=e.size,this.sizetozip>=o?(this.continue=async()=>{await this.zipStream(e,t,i)},this.partZip()):await this.zipStream(e,t,i))}))}onError(){this.cleanStorage(),this.emit(this.eventnames.error,{name:"reload"})}async cleanStorage(e=null){e=e||await navigator.storage.getDirectory();for await(const[i,t]of e.entries())console.log("keyval",{key:i,value:t}),await e.removeEntry(i)}async endFetch(e,i=!1){e.name=this.eventnames.terminate,e.hasOwnProperty("bigfile")&&""!==e.bigfile&&!1!==e.bigfile&&null!==e.bigfile?(e.bigfile=this.gzipped.name,this.gzipped=null):this.continue?(console.log("continue"),this.streamhandle=await this.filestream.createWritable(),this.initZip()):!0===i&&await this.cleanStorage(),this.emit(this.eventnames.complete,e),console.log("continue",this.continue)}async sendChunk(e,i=0,t=0,s=o){console.log("send chunk ",this.gzipped),console.log("chunkpath",e);const n=this.gzipped?await this.getFile(this.gzipped):await this.getFile();console.log("file",n),(e=e.split("/")).pop(),e=e.join("/");const a=Math.min(i+s,n.size);if(console.log("end---",a),a===n.size)this.sendZipFile(n,e,null,!0);else{const l=n.slice(i,a);l.name=t+"_"+n.name,this.sendZipfile(l,e,(()=>{t++,(i+=a)<=n.size&&this.sendChunk(e,i,t,s)}),!0)}return t}async getFile(e=null){e=null===e?this.filestream:e;return await e.getFile()}async sendZipFile(e,i,t=null,s=!1){console.log("sendzipfile------------_______________________"+s,e);const n=s?{bigfile:e.name}:{};this.emit(this.eventnames.pending,n),console.log("file",e),console.log("callbackchunk---sendzip",t);const a=new FormData;a.append("tag","ecotaxa_import"),a.append("path",i+e.name),a.append("file",e,e.name),this.part?a.append("part",this.part):null!==t&&a.append("ischunk",!0),fetch(this.options.uploadurl,{method:"POST",credentials:"include",body:a}).then((async e=>{console.log("response----------------------",e),console.log("callbackchunk-------------------------------",t),null!==t?t():this.endFetch(n)}))}}}}]);
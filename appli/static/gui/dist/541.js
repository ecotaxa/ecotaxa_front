/*! For license information please see 541.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[541],{8541:(t,s,i)=>{i.d(s,{JsMyFiles:()=>d});var n=i(9162),o=i(2817),r=i(4672);const a="mr-4";let l=null;class d{alertBox=null;done=!0;jsDirToZip=null;counters={};path="";_events={};eventnames={complete:"complete",error:"error"};constructor(e,t={}){if(!l){if(!(e=e instanceof HTMLElement?e:document.querySelector(e)))return;(0,n.KZ)(e,"dataset"),this.container=e,console.log("/gui/files/list");const s={url:"/gui/files/list",compress:{label:"compress"},counters:{id:"display-file-counters"},controls:{zip:{btn:{zip:"makezip",zipped:"makezipped"},display:{size:"sizezipped",counter:"counterzipped"}},scan:{display:{counter:"counter",size:"size"}}},upload:{label:"upload"},btnprefix:"btn",btnfilelist:null,selector:{doupload:".target-upload",droptarget:".droptarget",trigger:".trigger",dirlist:".dirlist",entries:".entries",uploadfile:"uploadfile",displayresult:"results"},display:{local:"local-list",server:"server-list",dropzone:"dropzone",dirlist:"dirlist",boxtitle:"boxtitle"},css:{enabled:"enabled"}};this.options=Object.assign(s,t),this.init(),l=this}return l}init(){let e=this.container.querySelector(this.options.selector.dirlist);if(e||(e=document.createElement("div"),e.classList.add(this.options.selector.dirlist.slice(1)),this.container.append(e)),this.options.btnfilelist){(0,n.Bh)("div",e,{class:"button is-secondary",text:this.options.btnfilelist}).addEventListener("click",(t=>{this.serverList(e),this.classList.toggle(o.iv.hide)}))}else this.serverList(e);this.dropzone=document.createElement("div"),this.dropzone.id=this.options.display.dropzone,this.dropzone.innerHTML=`<input type="file" class="hidden"  name="${this.options.selector.uploadfile}" id="${this.options.selector.uploadfile}">\n            <div class="${this.options.selector.droptarget.slice(1)}">\n            <div id="${this.options.display.boxtitle}"><span class="${this.options.selector.trigger.slice(1)}">${this.container.dataset.textbrowse}</span>  ${this.container.dataset.textdrop}</div>\n          </div>`,this.container.append(this.dropzone),e=document.getElementById(this.options.counters.id),e||(console.log("counterscreate"),e=document.createElement("div"),e.id=this.options.counters.id,e.innerHTML='<div class="counters"></div><div class="sizes"></div><div class="progresss"></div><div class="timers"></div>',this.container.append(e)),this.displaylist=document.getElementById(this.options.display.dirlist);const t=this.container.querySelector(this.options.selector.droptarget);t.addEventListener("dragover",(e=>{this.handleDragOver(e)})),t.addEventListener("drop",(async e=>{this.handleDrop(e)})),this.container.querySelector(this.options.selector.trigger).addEventListener("click",(e=>{let t=e;this.openDirDialog(".tsv,.png,.jpg, .jpeg,.zip,.gz,.7z,.bz2",(e=>{console.log("edrop",t)}))})),(0,n.TG)(this),this.on(this.eventnames.error,(e=>{consoile.log("scandir recevie error messgae",e)})),this.on(this.eventnames.processed,(async e=>{this.nextaction&&await this.nextaction()})),window.addEventListener("beforeunload",(e=>{this.done||(e.preventDefault(),e.returnValue=this.options.preventclose?this.options.preventclose:"Some work is in progress in this window.\nAre you sure you want to leave?")}))}async addDirList(e){}serverList(t=null,s=null,i=null){if(!(t=t||this.container.querySelector(this.options.selector.dirlist)))return;t.classList.add("wait");const r=t.querySelector(this.options.selector.entries);r&&r.remove();const a="ul"===(i=i?"select"===i?"optiongroup":i:"ul")?"li":"option";console.log("list subdir",s),fetch(this.options.url+(s||""),(0,n.wv)()).then((e=>e.json())).then((async n=>{if(console.log("jspn",n),n.entries&&n.entries.length){t.dataset.label&&t.insertAdjacentHTML("afterbegin",`<label>${t.dataset.label}</label>`);let r=[`<${i} class="${this.options.selector.entries.slice(1)}">`],l=[],d=[],c=n.entries;for(;c.length>0;){const e=c.shift();"F"===e.type?l.push(e):d.push(e)}l.sort(((e,t)=>e.name<t.name)),d.sort(((e,t)=>e.name<t.name)),[d,l].forEach((e=>{e.forEach((e=>{const t=e.name.split(".").pop(),s=`<span class="entry${e.type}"><i class="icon p-[0.125rem] icon-${"D"===e.type?"folder-sm":o.FB.images.split(",").indexOf(t)>=0?"image-sm":"document-sm"} align-text-bottom mb-0.5 mr-0.5"></i>${e.name}</span>`;r.push(`<${a} ${"D"===e.type?'draggable="true"':""} data-name="${e.name}" ${"select"===i?` class="entry${e.type}"`:""}>${s}`),r.push(`<i class="icon-sm icon-trash delentry ml-2 hidden" alt="delete"></i></${a}>`)}))})),r.push(`</${i}>`),t.insertAdjacentHTML("beforeend",r.join("")),t.querySelectorAll(".entryD").forEach((t=>{t.addEventListener("click",(e=>{e.stopImmediatePropagation();const t=e.currentTarget.parentElement;t.classList.toggle("on");const n=e.currentTarget.querySelector("i.icon");n&&(n.classList.toggle("icon-folder-sm"),n.classList.toggle("icon-folder-open-sm")),t.classList.contains("on")&&(t.dataset.load||this.serverList(t,(s?s+"/":"/")+t.dataset.name,i))})),t.querySelectorAll(".entryF").forEach((t=>{const s=()=>{alert("del",delfile.parentElement.dataset.name)},i=e.currentTarget.parentElement.querySelector(".delentry");console.log("trash",i),t.addEventListener("mouseenter",(e=>{console.log("file",e),i.classList.remove("hidden"),t.addEventListener("click",s)})),t.addEventListener("mouseout",(e=>{i.classList.add("hidden"),t.removeEventListener("click",s)}))}))}))}await this.addUploadDialog(this.container),t.classList.remove("wait"),t.dataset.loaded=!0}))}attachDropzone(e){this.targetdir=e.parentElement.dataset.name?e.parentElement.dataset.name:"",this.dropzone.classList.add(this.options.css.enabled),e.append(this.dropzone)}detachDropzone(){this.targetdir=null,this.container.classList.remove(this.options.css.enabled)}openDirDialog(e,t){const s=document.createElement("input");s.type="file",s.directory=!0,s.multiple=!0,s.webkitdirectory=!0,s.allowdirs=!0,s.accept=e,s.addEventListener("change",t),s.dispatchEvent(new MouseEvent("click"))}handleDragOver(e){e.preventDefault(),e.dataTransfer.dropEffect="move"}async handleDrop(e){let t;e.dataTransfer?(e.preventDefault(),t=e.dataTransfer):t=e,this.done=!1,this.timer=new Date;const s=[...t.items?t.items:t.files];s.length&&(this.enableDropzone(!1),await s.forEach((async e=>{"file"===e.kind&&(e=await e.webkitGetAsEntry(),console.log("itemtoread",e),await this.readEntry(e))})))}showComplete(){this.timer=(new Date-this.timer)/1e3,console.log("item-------------------------------------"+parseInt(this.timer/60)+" --- "+(this.timer-60*parseInt(this.timer/60))),this.enableDropzone()}stopOnError(e){console.log("err",e)}enableDropzone(e=!0,t=!1){t&&this.dropzone.classList.add(o.iv.hide),e?this.dropzone.classList.add(this.options.css.enabled):this.dropzone.classList.remove(this.options.css.enabled)}async addUploadDialog(e){if(e=e||this.container,this.options.controls.scan&&(this.attachDropzone(e),this.options.controls.zip)){const{JsDirToZip:e}=await Promise.all([i.e(778),i.e(249)]).then(i.bind(i,6249));this.jsDirToZip=new e,this.jsDirToZip.on(this.jsDirToZip.eventnames.ready,(e=>{console.log("ready"),this.initDisplays()})),this.jsDirToZip.on(this.jsDirToZip.eventnames.message,(async e=>{console.log("e",e);let t="info";switch(e.name){case"console":console.log("console",e),t="warning";break;case"error":t="error",console.log("error",e);default:console.log("message",e)}null===this.alertBox&&(this.alertBox=this.alertBox=new r.AlertBox),await this.alertBox.build({dismissible:!0,message:e.message,codeid:!0,parent:this.container,type:t})}));const t=this;this.jsDirToZip.on(this.jsDirToZip.eventnames.ready,(e=>{t.showControl(this.jsDirToZip.eventnames.ready)})),this.jsDirToZip.on(this.jsDirToZip.eventnames.counter,(e=>{t.fileCounter(e.name,e.filepath,e.size)})),this.jsDirToZip.on(this.jsDirToZip.eventnames.complete,(e=>{e&&e.name?t.showControl(e.name,e.hasOwnProperty("bigfile")&&e.bigfile?"zipped":"zip",e.hasOwnProperty("part")?e.part:e.hasOwnProperty("bigfile")?e.bigfile:null):console.log("no emit complete name")})),this.jsDirToZip.on(this.jsDirToZip.eventnames.pending,(e=>{t.showControl(this.jsDirToZip.eventnames.pending,e&&e.hasOwnProperty("bigfile")&&e.bigfile?"zipped":"zip")})),this.jsDirToZip.on(this.jsDirToZip.eventnames.gzip,(e=>{console.log("gzipped",e),t.showControl(this.jsDirToZip.eventnames.gzip,"zipped",e)})),this.jsDirToZip.on(this.jsDirToZip.eventnames.terminate,(e=>{console.log("terminate",e),t.showControl(this.jsDirToZip.eventnames.terminate,e&&e.hasOwnProperty("bigfile")&&e.bigfile?"zipped":"zip")}))}}async readEntry(e){this.toggleCounters(!0),await this.jsDirToZip.scanHandle(e)}async addFilesStore(e,t){if(e=e||this.options.dbname,!this.jsFilesStore){const{JsFilesStore:e}=await i.e(988).then(i.bind(i,5988));this.jsFilesStore=new e(null,t),this.displayFiles()}t&&await t()}displayFiles(){this.jsFilesStore.getItems("local")}fileCounter(e,t,s=null){const i=this.counters[e];i.counter++,null!==s&&(i.size+=parseInt(s)),i.display.counter.textContent=i.counter,i.display.size&&(i.display.size.textContent=i.size)}resetCounter(e){const t=this.counters[e];["counter","size"].forEach((e=>{t.display[e].textContent=0})),this.toggleCounters(!1)}toggleCounters(e=!0){const t=document.getElementById(this.options.counters.id);t&&(e?t.classList.remove(o.iv.hide):t.classList.add(o.iv.hide))}initFileCounter(e,t,s){let i=document.getElementById(this.options.counters.id);const o={display:{}};Object.entries(t).forEach((([t,s])=>{const r=t+"s";let a=i.querySelector("."+r);a||(a=(0,n.Bh)("div",{class:r},i,""));let l=a.querySelector("."+s);l?this.resetCounter(e):l=(0,n.Bh)("span",{class:s},a),o.display[t]=l,o[t]=0})),this.counters={...this.counters,[e]:o}}showControl(t,s="zip",i=null){let n,r=null;const a=this[this.options.btnprefix+"zip"+s];if(console.log("shoiwcontrol",a),a){switch(a.removeAttribute("disabled"),t){case this.jsDirToZip.eventnames.ready:a.dataset.message&&delete a.dataset.message,a.classList.add(o.iv.hide),this.initDisplays();break;case this.jsDirToZip.eventnames.endzip:const t=i;t||this.showComplete(),a.textContent="Close zip file"+(t||""),a.title=t?"Your file is too big - you have to send this part before continuing to process the directory":"Click to end zip file",n={name:this.jsDirToZip.eventnames.endzip,part:t,bigfile:"zip"!==s},t&&(n.part=t),a.dataset.message=JSON.stringify(n);break;case this.jsDirToZip.eventnames.bigfile:a.textContent="Upload big File separately",n={name:this.jsDirToZip.eventnames.bigfile,path:this.path,bigfile:!0};const l=i;l&&(n.path=l),a.dataset.message=JSON.stringify(n),console.log("bigfile",n);break;case this.jsDirToZip.eventnames.sendfile:n={name:this.jsDirToZip.eventnames.sendfile,path:this.path,bigfile:i},a.textContent="Upload zip file",null!==n.bigfile&&(a.textContent+=" "+i),a.dataset.message=JSON.stringify(n),console.log("messageup",n);break;case this.jsDirToZip.eventnames.pending:a.textContent=" Pending "+("zip"!==s?" big file":""),a.dataset.message="",a.setAttribute("disabled",!0);break;case this.jsDirToZip.eventnames.gzip:r=`compressing separately big file :${i&&i.bigfile?i.bigfile:""} ${i&&i.size?i.size:""}`,a.textContent=r,a.setAttribute("disabled",!0),console.log("optsbigfl",i),a.dataset.message=JSON.stringify({name:this.jsDirToZip.eventnames.endzip,path:i.hasOwnProperty("bigfile")?i.bigfile:e.path,bigfile:i.hasOwnProperty("bigfile")&&""!==i.bigfile});break;case this.jsDirToZip.eventnames.terminate:console.log("terminate "+("zip"!==s?"bigfile":"")),this.serverList(),a.dataset.message=JSON.stringify({name:"ready",bigfile:"zip"!==s}),a.textContent="End!! "+("zip"!==s?"bigfile":"")}a.dataset.message&&a.classList.remove(o.iv.hide)}}emitToZip(e){const t=e.dataset.message?JSON.parse(e.dataset.message):null;if(console.log("message",t),t||e.classList.add(o.iv.hide),t&&t.name){const e=t.name;delete t.name,console.log("emit ----"+e,t),this.jsDirToZip.emit(e,t)}name===this.jsDirToZip.eventnames.sendfile&&(e.disabled=!0)}getBtn(e,t,s=null){const i=this.options.btnprefix+e+t;if(this[i])return this[i];const n=this.options.controls[e].btn[t];return document.getElementById(n)||((s=s||this.dropzone).insertAdjacentHTML("beforeend",`<button id="${n}" class="button ${n} ${a} ${o.iv.hide}"></button>`),this[i]=document.getElementById(n),this[i].addEventListener("click",(async e=>{this.emitToZip(e.currentTarget)}))),this[i]}initDisplays(){console.log("initdispay",this.options.controls),Object.entries(this.options.controls).forEach((([e,t],s)=>{this.initFileCounter(e,t.display,s),t.btn&&this.activateControls(e,t.btn)}))}activateControls(e,t){Object.keys(t).forEach((t=>{this[this.options.btnprefix+e+t]=this.getBtn(e,t)}))}}}}]);
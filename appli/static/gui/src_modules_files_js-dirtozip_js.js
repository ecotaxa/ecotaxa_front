/*! For license information please see src_modules_files_js-dirtozip_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_files_js-dirtozip_js"],{"./src/modules/files/js-dirtozip.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsDirToZip: () => (/* binding */ JsDirToZip)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var fflate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fflate */ \"./node_modules/fflate/esm/browser.js\");\n\n\n\n\nconst already_compressed = new Set([\n  'zip', 'gz', 'png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx', 'ppt', 'pptx',\n  'xls', 'xlsx', 'heic', 'heif', '7z', 'bz2', 'rar', 'gif', 'webp', 'webm',\n  'mp4', 'mov', 'mp3', 'aifc'\n]);\nconst accept = '.tsv,.png,.jpg, .jpeg,.zip,.gz,.7z,.bz2';\nlet instance = null;\nconst MAXSIZE = 1073741824; ////maxfilesize: 1073741824,\nclass JsDirToZip {\n  _events = {};\n  eventnames = {\n    ready: 'ready',\n    endzip: 'endzip',\n    complete: 'complete',\n    gzip: 'gzipfile',\n    sendfile: 'sendfile',\n    bigfile: 'bigfile',\n    terminate: 'terminate',\n    pending: 'pending',\n    getfile: 'getzipfile',\n    counter: 'counter',\n    message: 'message',\n    error: 'error'\n  }\n  zip = null;\n  zipname = null;\n  filestream = null;\n  streamhandle = null;\n  gzipped = null;\n  sizetozip = 0;\n  part = 0;\n  continue = null;\n  constructor(options = {}) {\n    if (instance) return instance;\n    const defaultOptions = {\n      uploadurl: '/gui/files/upload',\n      largefile: 4194304,\n      accept: accept.split(',')\n    }\n    this.options = { ...defaultOptions,\n      ...options\n    };\n    console.log('thisopts', this.options)\n\n    this.init();\n\n    instance = this;\n    return instance;\n  }\n  init() {\n    (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.add_custom_events)(this);\n    this.initStorage();\n    this.on(this.eventnames.ready, () => {\n      //this.initZip();\n      console.log('ready')\n    });\n  }\n  reset() {\n    this.zip = null;\n    this.zipname = null;\n    this.filestream = null;\n    this.streamhandle = null;\n    this.gzipped = null;\n    this.sizetozip = 0;\n    this.part = 0;\n    this.continue = null;\n    this.initStorage();\n  }\n  initZip() {\n    const self = this;\n    this.pos = 0;\n    this.sizetozip = 0;\n    this.zip = new fflate__WEBPACK_IMPORTED_MODULE_1__.Zip(\n      (error, chunk, final) => {\n        if (error) {\n          console.log('error', error);\n          return false;\n        } else {\n          self.streamhandle.write(chunk, {\n            at: self.pos\n          });\n          self.pos += chunk.length;\n          if (final) {\n            self.streamhandle.close();\n            console.log('final-----------------------------*******************************-', this.part);\n\n          }\n\n        }\n      });\n    if (this.continue) this.continue();\n    else {\n      // events\n      this.on(this.eventnames.endzip, (e) => {\n\n        if (!e.bigfile && this.zip) {\n          console.log('zipend', this.zip)\n          this.zip.end();\n        } else if (e.bigfile && this.gzipped.name) console.log('-------------------------gzipped end ', this.gzipped)\n        const message = {\n          name: this.eventnames.sendfile\n        };\n        if (e.part) {\n          message[\"part\"] = e.part;\n        } else this.part = 0;\n        if (e.bigfile) message[\"bigfile\"] = e.bigfile;\n        console.log('endzip%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', e)\n        this.emit(this.eventnames.complete, message);\n      });\n\n      this.on(this.eventnames.sendfile, async (e) => {\n        let file = (e.bigfile) ? this.gzipped : await this.getFile();\n        console.log('sendfile', file)\n        /*  if (e.bigfile) this.sendChunk((e.path ? e.path : ''));\n          else */\n        this.sendZipFile(file, (e.path ? e.path : ''), null, (e.bigfile ? e.bigfile : false));\n      });\n      this.on(this.eventnames.bigfile, (e) => {\n        this.sendChunk((e.path ? e.path : ''));\n      });\n    }\n  }\n  async initStorage() {\n    if (navigator && navigator.storage && navigator.storage.estimate) {\n      await this.cleanStorage();\n      this.emit(this.eventnames.ready);\n      navigator.storage.estimate().then((quota) => {\n        const percentageUsed = (quota.usage / quota.quota) * 100;\n        const remaining = quota.quota - quota.usage;\n        this.emit(this.eventnames.message, {\n          name: \"console\",\n          message: \"You can write up to \" + remaining + \" more bytes.\"\n        });\n        this.emit(this.eventnames.message, {\n          name: \"console\",\n          message: \"you've used \" + percentageUsed + \"% of the available storage.\"\n        });\n      });\n    } else this.emit(this.eventnames.message, {\n      name: \"error\",\n      message: \"no navigator storage\"\n    });\n  }\n  async createLocalStream(name, accept = {\n    'application/zip': ['.zip'],\n  }) {\n    const root = await navigator.storage.getDirectory();\n    const opts = {\n      types: [{\n        description: 'Temp file',\n        accept: accept,\n      }, ],\n      create: true\n    };\n    const filestream = await root.getFileHandle(name, opts);\n    const streamhandle = await filestream.createWritable();\n    return {\n      filestream,\n      streamhandle\n    };\n  }\n\n  async scanHandle(dir, options = {}) {\n    console.log('this.zip', this.zip)\n    if (this.zip === null) {\n      const type = (options && options.type) ? options.type : '.zip';\n      this.zipname = ((options.zipname) ? options.zipname : dir.name) + type;\n      //\n\n      const {\n        filestream,\n        streamhandle\n      } = await this.createLocalStream(this.zipname);\n      console.log('streamhandle', streamhandle)\n      this.filestream = filestream;\n      this.streamhandle = streamhandle;\n      let size = 0;\n      this.part = 0;\n      this.initZip();\n      console\n      const zip = this.zip;\n      if (!this.jsScanDir) {\n        const {\n          JsScanDir\n        } = await __webpack_require__.e(/*! import() */ \"src_modules_files_js-scandir_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../files/js-scandir.js */ \"./src/modules/files/js-scandir.js\"));\n        this.jsScanDir = new JsScanDir();\n      }\n      this.jsScanDir.processFile = (entry, callback) => {\n        this.processFile(entry, callback);\n      };\n      await this.jsScanDir.readDirectory(dir, () => {\n        this.emit(this.eventnames.complete, {\n          name: this.eventnames.endzip\n        });\n\n      });\n    }\n  }\n  async sendBigFile(file, callback, filepath) {\n    console.log('sendbigfilepath', filepath)\n    /*let filepath = file.webkitRelativePath;\n    filepath = (filepath === '') ? dirname + '/' + file.name : filepath;*/\n    const ext = file.name.slice(file.name.lastIndexOf('.') + 1);\n    if (already_compressed.has(ext)) {\n      this.gzipped = file;\n      this.emit(this.eventnames.counter, {\n        name: 'zip',\n        filepath: filepath,\n        size: file.size\n      });\n      this.emit(this.eventnames.complete, {\n        name: this.eventnames.bigfile,\n        bigfile: filepath\n      });\n    } else {\n      this.emit(this.eventnames.gzip, {\n        name: this.eventnames.gzip,\n        bigfile: filepath,\n        size: file.size\n      });\n      let zipname = file.name.split(ext);\n      zipname.pop();\n      zipname = zipname.join(ext) + 'gz';\n      console.log('bigfile ext=' + ext, zipname)\n      const {\n        filestream,\n        streamhandle\n      } = await this.createLocalStream(zipname, {\n        'application/gzip': ['.gz'],\n      });\n      let pos = 0;\n      const selfi = this;\n      const gzipped = new fflate__WEBPACK_IMPORTED_MODULE_1__.Gzip({\n        level: 9,\n        filename: file.name\n      });\n      gzipped.ondata = (data, final) => {\n        if (final) {\n          console.log('final BIGFILE%%%%%%%%%%%%%%%%%%%%' + selfi.eventnames.bigfile, filepath)\n          selfi.emit(selfi.eventnames.counter, {\n            name: 'zip',\n            filepath: filepath,\n            size: file.size\n          });\n          selfi.gzipped = streamhandle;\n          console.log('big file *******************', this.gzipped);\n          selfi.emit(selfi.eventnames.complete, {\n            name: selfi.eventnames.bigfile,\n            bigfile: filepath\n\n          });\n\n          console.log('callbackbig', callback)\n          //  gzipped.terminate();\n          //  streamhandle.close();\n\n\n        } else {\n\n          streamhandle.write(data, {\n            at: pos\n          });\n          pos += data.length;\n        }\n      };\n      await this.readFile(file, filepath, gzipped, callback);\n    }\n\n\n  }\n  async partZip() {\n    this.part += 1;\n    this.emit(this.eventnames.complete, {\n      name: this.eventnames.endzip,\n      part: this.part\n    });\n  }\n  async readFile(file, filepath, zippedstream, callback = null) {\n    const reader = file.stream().getReader();\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) {\n        zippedstream.push(new Uint8Array(0), true);\n        this.emit(this.eventnames.counter, {\n          name: 'zip',\n          filepath: filepath,\n          size: (zippedstream.size) ? zippedstream.size : file.size\n        });\n        if (zippedstream.terminate) zippedstream.terminate();\n        if (callback) callback();\n        return done;\n      }\n      zippedstream.push(value);\n    }\n  }\n  async zipStream(file, filepath, callback) {\n    const ext = filepath.slice(filepath.lastIndexOf('.') + 1);\n    const iscompressed = already_compressed.has(ext);\n    const zippedstream = (iscompressed) ? new fflate__WEBPACK_IMPORTED_MODULE_1__.ZipPassThrough(filepath) : file.size > this.options.largefile ?\n      new fflate__WEBPACK_IMPORTED_MODULE_1__.AsyncZipDeflate(filepath, {\n        level: 9\n      }) : new fflate__WEBPACK_IMPORTED_MODULE_1__.ZipDeflate(filepath, {\n        level: 6\n      });\n    this.zip.add(zippedstream);\n    await this.readFile(file, filepath, zippedstream, callback);\n  }\n  async processFile(entry, callback = null) {\n    const self = this;\n    const filepath = entry.fullPath;\n    const ext = filepath.slice(filepath.lastIndexOf('.') + 1);\n    if (this.options.accept.includes(ext)) {\n      console.log('reject', filepath);\n      return;\n    }\n    if (entry.isDirectory) {\n      //  console.log('zipdir', callback)\n      if (callback) callback();\n    } else {\n      entry.file(async file => {\n        this.emit(this.eventnames.counter, {\n          name: 'scan',\n          filepath: filepath,\n          size: file.size\n        });\n        this.continue = null;\n        // check file size > max post size\n        if (file.size >= MAXSIZE) {\n          this.sendBigFile(file, callback, filepath);\n        } else {\n          // check zip file size > total zip size\n          this.sizetozip += file.size;\n          if (this.sizetozip >= MAXSIZE) {\n            this.continue = async () => {\n              await this.zipStream(file, filepath, callback);\n            }\n            this.partZip();\n          } else {\n            await this.zipStream(file, filepath, callback);\n          }\n        }\n      });\n\n    }\n  }\n  onError() {\n    this.cleanStorage();\n    this.emit(this.eventnames.error, {\n      name: \"reload\"\n    });\n  }\n  async cleanStorage(entry = null) {\n    entry = (entry) ? entry : await navigator.storage.getDirectory();\n    for await (const [key, value] of entry.entries()) {\n      console.log('keyval', {\n        key,\n        value\n      });\n      await entry.removeEntry(key);\n    }\n\n  }\n\n  async endFetch(message, clean = false) {\n    message.name = this.eventnames.terminate;\n    if (message.hasOwnProperty(\"bigfile\") && message.bigfile !== \"\" &&\n      message.bigfile !== false && message.bigfile !== null) {\n      message[\"bigfile\"] = this.gzipped.name;\n      this.gzipped = null;\n    } else if (this.continue) {\n      console.log('continue')\n      this.streamhandle = await this.filestream.createWritable();\n      this.initZip();\n    } else if (clean === true) await this.cleanStorage();\n    this.emit(this.eventnames.complete, message);\n    console.log('continue', this.continue)\n  }\n\n  async sendChunk(path, start = 0, chunknum = 0, chunksize = MAXSIZE) {\n    const file = (this.gzipped.kind) ? await this.gzipped.getFile(): file;\n    path = path.split('/');\n    path.pop();\n    path = path.join('/');\n    const end = Math.min(start + chunksize, file.size);\n    if (end === file.size) {\n\n      this.sendZipFile(file, path, null, true);\n    } else {\n      const partfile = file.slice(start, end);\n      partfile.name = chunknum + '_' + file.name;\n      this.sendZipfile(partfile, path, () => {\n        start += end;\n        chunknum++;\n\n        if (start <= file.size) this.sendChunk(path, start, chunknum, chunksize);\n      }, true)\n    }\n    return chunknum;\n  }\n  async getFile() {\n    const file = await this.filestream.getFile();\n    return file;\n  }\n  async sendZipFile(file, path, callbackchunk = null, isbigfile = false) {\n    const message = (isbigfile) ? {\n      bigfile: file.name\n    } : {};\n    this.emit(this.eventnames.pending, message);\n    console.log('file', file)\n    console.log('callbackchunk---sendzip', callbackchunk)\n    const formdata = new FormData();\n    formdata.append('tag', 'ecotaxa_import');\n    formdata.append('path', path + file.name);\n    formdata.append('file', file, file.name);\n    if (this.part) formdata.append('part', this.part);\n    else if (callbackchunk !== null) formdata.append('ischunk', true);\n    fetch(this.options.uploadurl, {\n      //  mode: 'cors',\n      method: \"POST\",\n      credentials: \"include\",\n      body: formdata,\n    }).then(async (response) => {\n      console.log('response----------------------', response);\n      console.log('callbackchunk-------------------------------', callbackchunk)\n      if (callbackchunk !== null) {\n        callbackchunk();\n      } else this.endFetch(message);\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/files/js-dirtozip.js\n")}}]);
/*! For license information please see src_modules_job-monitor_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_job-monitor_js"],{"./src/modules/job-monitor.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jobMonitor: () => (/* binding */ jobMonitor)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n\n\nfunction jobMonitor(item) {\n  let intervalHandle;\n  const jobid = item.dataset.id;\n  if (!jobid) return;\n  const spinner = item.querySelector('#spinner-icon');\n  const statusdiv = item.querySelector(\"#statusdiv\");\n  let stop = false;\n  const progress_bar = (show, percent = 0, description = ``) => {\n    if (!percent) percent = 0;\n    if (!description) description = \"In progress\";\n    const progressbar = item.querySelector('#progressbar');\n    if (show === false) {\n      if (spinner) spinner.remove();\n    } else {\n      if (spinner) spinner.classList.remove('hidden');\n      if (progressbar) progressbar.classList.remove('hidden');\n\n\n    }\n\n  }\n  const display_errors = (errors, jobstate, msg = '') => {\n    if (!errors || errors.length === 0) {\n      if (msg.length) statusdiv.firstChild.innerHTML = msg;\n      return;\n    }\n    if (errors.length && jobstate != 'E' && jobstate !== 'F') {\n      const divalert = statusdiv.querySelector('.alert');\n      if (divalert === null) statusdiv.insertAdjacentHTML('beforeend', `<div class=\"alert alert-danger inverse\" data-dismissible=\"true\">${errors.join(`<br>`)}</div> `);\n      else divalert.insertAdjacentHTML('beforeend', errors.join(`<br>`));\n    }\n  }\n  const display_next = async (url) => {\n    fetch(url, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings)()).then(response => response.text()).then(response => {\n      statusdiv.lastChild.insertAdjacentHTML('beforeend', response);\n    });\n\n  }\n  let html = [];\n  const check_job_status = () => {\n    fetch(\"/gui/job/status/\" + jobid, _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings).then(response => response.json()).then(job => {\n      if (job.errors.length) {\n        clearInterval(intervalHandle);\n        progress_bar(false);\n        display_errors(job.errors, job.state);\n      }\n      if (stop === true) return;\n\n      if (job) {\n        switch (job.state) {\n          case \"A\":\n            // question\n            stop = true;\n            display_next(\"/gui/job/question/\" + job.id);\n            progress_bar(false);\n            clearInterval(intervalHandle);\n            break;\n          case \"F\":\n            stop = true;\n            progress_bar(false);\n            if (spinner) spinner.remove();\n            clearInterval(intervalHandle);\n            if (job.finalaction) html.push(job.finalaction);\n            if (job.description) statusdiv.firstChild.innerHTML = job.description;\n            //  display_next(\"/gui/job/show/\"+job.id+'?monitor=true');\n            break;\n          case \"E\":\n            stop = true;\n            progress_bar(false);\n            spinner.remove();\n            clearInterval(intervalHandle);\n\n            break;\n          case \"P\":\n            // pending\n\n            break;\n          case \"R\":\n            // running\n            display_errors(job.errors, job.state, job.progress_msg);\n            break;\n        }\n        progress_bar(true, job.progress_pct, job.progress_msg);\n      }\n      if (statusdiv) statusdiv.childNodes[1].innerHTML = html.join('');\n      if (job.state && job.state == \"E\" || (job.state == 'F' && !job.out)) return;\n      if (stop === false) setTimeout(check_job_status, 1000);\n    });\n  }\n  check_job_status();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9qb2ItbW9uaXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUU2Qjs7QUFFdEI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBJQUEwSSxvQkFBb0I7QUFDOUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdFQUFhO0FBQzVCO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsNERBQWE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvam9iLW1vbml0b3IuanM/MjA1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBmZXRjaFNldHRpbmdzLFxufSBmcm9tICcuLi9tb2R1bGVzL3V0aWxzLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGpvYk1vbml0b3IoaXRlbSkge1xuICBsZXQgaW50ZXJ2YWxIYW5kbGU7XG4gIGNvbnN0IGpvYmlkID0gaXRlbS5kYXRhc2V0LmlkO1xuICBpZiAoIWpvYmlkKSByZXR1cm47XG4gIGNvbnN0IHNwaW5uZXIgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJyNzcGlubmVyLWljb24nKTtcbiAgY29uc3Qgc3RhdHVzZGl2ID0gaXRlbS5xdWVyeVNlbGVjdG9yKFwiI3N0YXR1c2RpdlwiKTtcbiAgbGV0IHN0b3AgPSBmYWxzZTtcbiAgY29uc3QgcHJvZ3Jlc3NfYmFyID0gKHNob3csIHBlcmNlbnQgPSAwLCBkZXNjcmlwdGlvbiA9IGBgKSA9PiB7XG4gICAgaWYgKCFwZXJjZW50KSBwZXJjZW50ID0gMDtcbiAgICBpZiAoIWRlc2NyaXB0aW9uKSBkZXNjcmlwdGlvbiA9IFwiSW4gcHJvZ3Jlc3NcIjtcbiAgICBjb25zdCBwcm9ncmVzc2JhciA9IGl0ZW0ucXVlcnlTZWxlY3RvcignI3Byb2dyZXNzYmFyJyk7XG4gICAgaWYgKHNob3cgPT09IGZhbHNlKSB7XG4gICAgICBpZiAoc3Bpbm5lcikgc3Bpbm5lci5yZW1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNwaW5uZXIpIHNwaW5uZXIuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICBpZiAocHJvZ3Jlc3NiYXIpIHByb2dyZXNzYmFyLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuXG5cbiAgICB9XG5cbiAgfVxuICBjb25zdCBkaXNwbGF5X2Vycm9ycyA9IChlcnJvcnMsIGpvYnN0YXRlLCBtc2cgPSAnJykgPT4ge1xuICAgIGlmICghZXJyb3JzIHx8IGVycm9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmIChtc2cubGVuZ3RoKSBzdGF0dXNkaXYuZmlyc3RDaGlsZC5pbm5lckhUTUwgPSBtc2c7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlcnJvcnMubGVuZ3RoICYmIGpvYnN0YXRlICE9ICdFJyAmJiBqb2JzdGF0ZSAhPT0gJ0YnKSB7XG4gICAgICBjb25zdCBkaXZhbGVydCA9IHN0YXR1c2Rpdi5xdWVyeVNlbGVjdG9yKCcuYWxlcnQnKTtcbiAgICAgIGlmIChkaXZhbGVydCA9PT0gbnVsbCkgc3RhdHVzZGl2Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgaW52ZXJzZVwiIGRhdGEtZGlzbWlzc2libGU9XCJ0cnVlXCI+JHtlcnJvcnMuam9pbihgPGJyPmApfTwvZGl2PiBgKTtcbiAgICAgIGVsc2UgZGl2YWxlcnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBlcnJvcnMuam9pbihgPGJyPmApKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZGlzcGxheV9uZXh0ID0gYXN5bmMgKHVybCkgPT4ge1xuICAgIGZldGNoKHVybCwgZmV0Y2hTZXR0aW5ncygpKS50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICBzdGF0dXNkaXYubGFzdENoaWxkLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgcmVzcG9uc2UpO1xuICAgIH0pO1xuXG4gIH1cbiAgbGV0IGh0bWwgPSBbXTtcbiAgY29uc3QgY2hlY2tfam9iX3N0YXR1cyA9ICgpID0+IHtcbiAgICBmZXRjaChcIi9ndWkvam9iL3N0YXR1cy9cIiArIGpvYmlkLCBmZXRjaFNldHRpbmdzKS50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSkudGhlbihqb2IgPT4ge1xuICAgICAgaWYgKGpvYi5lcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGUpO1xuICAgICAgICBwcm9ncmVzc19iYXIoZmFsc2UpO1xuICAgICAgICBkaXNwbGF5X2Vycm9ycyhqb2IuZXJyb3JzLCBqb2Iuc3RhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKHN0b3AgPT09IHRydWUpIHJldHVybjtcblxuICAgICAgaWYgKGpvYikge1xuICAgICAgICBzd2l0Y2ggKGpvYi5zdGF0ZSkge1xuICAgICAgICAgIGNhc2UgXCJBXCI6XG4gICAgICAgICAgICAvLyBxdWVzdGlvblxuICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICBkaXNwbGF5X25leHQoXCIvZ3VpL2pvYi9xdWVzdGlvbi9cIiArIGpvYi5pZCk7XG4gICAgICAgICAgICBwcm9ncmVzc19iYXIoZmFsc2UpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbEhhbmRsZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiRlwiOlxuICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICBwcm9ncmVzc19iYXIoZmFsc2UpO1xuICAgICAgICAgICAgaWYgKHNwaW5uZXIpIHNwaW5uZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSGFuZGxlKTtcbiAgICAgICAgICAgIGlmIChqb2IuZmluYWxhY3Rpb24pIGh0bWwucHVzaChqb2IuZmluYWxhY3Rpb24pO1xuICAgICAgICAgICAgaWYgKGpvYi5kZXNjcmlwdGlvbikgc3RhdHVzZGl2LmZpcnN0Q2hpbGQuaW5uZXJIVE1MID0gam9iLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgLy8gIGRpc3BsYXlfbmV4dChcIi9ndWkvam9iL3Nob3cvXCIram9iLmlkKyc/bW9uaXRvcj10cnVlJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiRVwiOlxuICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICBwcm9ncmVzc19iYXIoZmFsc2UpO1xuICAgICAgICAgICAgc3Bpbm5lci5yZW1vdmUoKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGUpO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiUFwiOlxuICAgICAgICAgICAgLy8gcGVuZGluZ1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiUlwiOlxuICAgICAgICAgICAgLy8gcnVubmluZ1xuICAgICAgICAgICAgZGlzcGxheV9lcnJvcnMoam9iLmVycm9ycywgam9iLnN0YXRlLCBqb2IucHJvZ3Jlc3NfbXNnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHByb2dyZXNzX2Jhcih0cnVlLCBqb2IucHJvZ3Jlc3NfcGN0LCBqb2IucHJvZ3Jlc3NfbXNnKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0dXNkaXYpIHN0YXR1c2Rpdi5jaGlsZE5vZGVzWzFdLmlubmVySFRNTCA9IGh0bWwuam9pbignJyk7XG4gICAgICBpZiAoam9iLnN0YXRlICYmIGpvYi5zdGF0ZSA9PSBcIkVcIiB8fCAoam9iLnN0YXRlID09ICdGJyAmJiAham9iLm91dCkpIHJldHVybjtcbiAgICAgIGlmIChzdG9wID09PSBmYWxzZSkgc2V0VGltZW91dChjaGVja19qb2Jfc3RhdHVzLCAxMDAwKTtcbiAgICB9KTtcbiAgfVxuICBjaGVja19qb2Jfc3RhdHVzKCk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/modules/job-monitor.js\n")}}]);
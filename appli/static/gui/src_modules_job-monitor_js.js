/*! For license information please see src_modules_job-monitor_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_job-monitor_js"],{"./src/modules/job-monitor.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jobMonitor: () => (/* binding */ jobMonitor)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n\n\nfunction jobMonitor(item) {\n  let intervalHandle;\n  const jobid = item.dataset.id;\n  const jobStates = {\n    E: 'Error',\n    F: 'Done',\n    R: 'Running',\n    A: 'Question',\n    P: 'Waiting'\n  }\n  if (!jobid) return;\n  const spinner = document.getElementById('spinner-icon');\n  const divstate = document.getElementById(\"divstate\");\n  let responsediv = document.getElementById(\"responsediv\");\n  if (responsediv === null) {\n    responsediv = document.createElement('div');\n    responsediv.id = 'responsediv';\n    item.prepend(responsediv);\n  }\n  let stop = false;\n  let cl = 'is-pending';\n  const progress_bar = (state, percent = 0, msg = \"\") => {\n    if (!percent) percent = 0;\n    const progressbar = document.getElementById('progressbar');\n    responsediv.contentText = msg;\n    divstate.contentText = msg;\n    console.log(msg, responsediv)\n    if (progressbar) {\n      progressbar.classList.remove('hidden');\n      progressbar.contentText = percent + '%';\n      const progressbarsz = progressbar.querySelector('.percent');\n\n      if (progressbarsz) {\n        progressbarsz.classList.remove(cl);\n        cl = 'is-running';\n        switch (state) {\n          case 'E':\n            cl = 'is-error';\n            break;\n          case 'F':\n            cl = 'is-done';\n            break;\n          case 'A':\n            cl = 'is-warning';\n            break;\n        }\n        if (!progressbarsz.classList.contains(cl)) progressbarsz.classList.add(cl);\n        progressbarsz.style.width = percent + '%';\n\n      }\n    }\n  }\n  const display_errors = (errors, jobstate) => {\n    if (!errors || errors.length === 0) return;\n    if (errors.length && jobstate != 'E' && jobstate !== 'F') {\n      const divalert = responsediv.querySelector('.alert');\n      if (divalert === null) responsediv.insertAdjacentHTML('beforeend', `<div class=\"alert alert-danger inverse\" data-dismissible=\"true\">${errors.join(`<br>`)}</div> `);\n      else divalert.insertAdjacentHTML('beforeend', errors.join(`<br>`));\n    }\n  }\n  const display_next = async (url) => {\n    fetch(url, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings)()).then(response => response.text()).then(response => {\n      responsediv.insertAdjacentHTML('beforeend', response);\n    });\n\n  }\n  const go_next = (url, title, type = \"secondary\") => {\n    return `<a href=\"${url}\" class=\"button  is-${type}\">${title}</a>`;\n  }\n  const set_jobstate = (job) => {\n    if (!divstate) return;\n    divstate.innerText = jobStates[job.state];\n  }\n  let html = [];\n  const check_job_status = () => {\n\n    fetch(\"/gui/job/status/\" + jobid, _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings).then(response => response.json()).then(job => {\n      if (job.errors.length) {\n        clearInterval(intervalHandle);\n        display_errors(job.errors, job.state);\n      }\n\n\n      if (job) {\n\n        set_jobstate(job);\n        if (spinner) spinner.classList.remove('hidden');\n        progress_bar(job.state, job.progress_pct, job.progress_msg);\n        switch (job.state) {\n          case \"A\":\n            // question\n            stop = true;\n            if (spinner) spinner.remove();\n\n            //window.location.href = window.location.origin + \"/Job/Question/\" + job.id;\n            responsediv.innerHTML = `Question waiting for an answer ` + go_next(window.location.origin + \"/Job/Question/\" + job.id, 'Go', 'warning')\n            clearInterval(intervalHandle);\n\n            break;\n          case \"F\":\n            stop = true;\n            if (spinner) spinner.remove();\n            clearInterval(intervalHandle);\n            if (job.finalaction) html.push(job.finalaction);\n\n            break;\n          case \"E\":\n            stop = true;\n            if (spinner) spinner.remove();\n            clearInterval(intervalHandle);\n            break;\n          case \"P\":\n            // pending\n\n            break;\n          case \"R\":\n            // running\n            console.log('job', job)\n            display_errors(job.errors, job.state);\n            break;\n        }\n\n        if (job.state && job.state == \"E\" || (job.state == 'F' && !job.out)) {\n          if (responsediv) {\n            responsediv.insertAdjacentHTML('afterbegin', html.join(''));\n            responsediv.classList.remove('hidden');\n          }\n          return;\n        }\n      }\n      if (stop === false) setTimeout(check_job_status, 1000);\n      return;\n    });\n  }\n  check_job_status();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9qb2ItbW9uaXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUU2Qjs7QUFFdEI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0SUFBNEksb0JBQW9CO0FBQ2hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnRUFBYTtBQUM1QjtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLHVCQUF1QixJQUFJLHNCQUFzQixLQUFLLElBQUksTUFBTTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0MsNERBQWE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2pvYi1tb25pdG9yLmpzPzIwNTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZmV0Y2hTZXR0aW5ncyxcbn0gZnJvbSAnLi4vbW9kdWxlcy91dGlscy5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBqb2JNb25pdG9yKGl0ZW0pIHtcbiAgbGV0IGludGVydmFsSGFuZGxlO1xuICBjb25zdCBqb2JpZCA9IGl0ZW0uZGF0YXNldC5pZDtcbiAgY29uc3Qgam9iU3RhdGVzID0ge1xuICAgIEU6ICdFcnJvcicsXG4gICAgRjogJ0RvbmUnLFxuICAgIFI6ICdSdW5uaW5nJyxcbiAgICBBOiAnUXVlc3Rpb24nLFxuICAgIFA6ICdXYWl0aW5nJ1xuICB9XG4gIGlmICgham9iaWQpIHJldHVybjtcbiAgY29uc3Qgc3Bpbm5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzcGlubmVyLWljb24nKTtcbiAgY29uc3QgZGl2c3RhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRpdnN0YXRlXCIpO1xuICBsZXQgcmVzcG9uc2VkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc3BvbnNlZGl2XCIpO1xuICBpZiAocmVzcG9uc2VkaXYgPT09IG51bGwpIHtcbiAgICByZXNwb25zZWRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHJlc3BvbnNlZGl2LmlkID0gJ3Jlc3BvbnNlZGl2JztcbiAgICBpdGVtLnByZXBlbmQocmVzcG9uc2VkaXYpO1xuICB9XG4gIGxldCBzdG9wID0gZmFsc2U7XG4gIGxldCBjbCA9ICdpcy1wZW5kaW5nJztcbiAgY29uc3QgcHJvZ3Jlc3NfYmFyID0gKHN0YXRlLCBwZXJjZW50ID0gMCwgbXNnID0gXCJcIikgPT4ge1xuICAgIGlmICghcGVyY2VudCkgcGVyY2VudCA9IDA7XG4gICAgY29uc3QgcHJvZ3Jlc3NiYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NiYXInKTtcbiAgICByZXNwb25zZWRpdi5jb250ZW50VGV4dCA9IG1zZztcbiAgICBkaXZzdGF0ZS5jb250ZW50VGV4dCA9IG1zZztcbiAgICBjb25zb2xlLmxvZyhtc2csIHJlc3BvbnNlZGl2KVxuICAgIGlmIChwcm9ncmVzc2Jhcikge1xuICAgICAgcHJvZ3Jlc3NiYXIuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICBwcm9ncmVzc2Jhci5jb250ZW50VGV4dCA9IHBlcmNlbnQgKyAnJSc7XG4gICAgICBjb25zdCBwcm9ncmVzc2JhcnN6ID0gcHJvZ3Jlc3NiYXIucXVlcnlTZWxlY3RvcignLnBlcmNlbnQnKTtcblxuICAgICAgaWYgKHByb2dyZXNzYmFyc3opIHtcbiAgICAgICAgcHJvZ3Jlc3NiYXJzei5jbGFzc0xpc3QucmVtb3ZlKGNsKTtcbiAgICAgICAgY2wgPSAnaXMtcnVubmluZyc7XG4gICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgICAgIGNsID0gJ2lzLWVycm9yJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0YnOlxuICAgICAgICAgICAgY2wgPSAnaXMtZG9uZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICAgIGNsID0gJ2lzLXdhcm5pbmcnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwcm9ncmVzc2JhcnN6LmNsYXNzTGlzdC5jb250YWlucyhjbCkpIHByb2dyZXNzYmFyc3ouY2xhc3NMaXN0LmFkZChjbCk7XG4gICAgICAgIHByb2dyZXNzYmFyc3ouc3R5bGUud2lkdGggPSBwZXJjZW50ICsgJyUnO1xuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IGRpc3BsYXlfZXJyb3JzID0gKGVycm9ycywgam9ic3RhdGUpID0+IHtcbiAgICBpZiAoIWVycm9ycyB8fCBlcnJvcnMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKGVycm9ycy5sZW5ndGggJiYgam9ic3RhdGUgIT0gJ0UnICYmIGpvYnN0YXRlICE9PSAnRicpIHtcbiAgICAgIGNvbnN0IGRpdmFsZXJ0ID0gcmVzcG9uc2VkaXYucXVlcnlTZWxlY3RvcignLmFsZXJ0Jyk7XG4gICAgICBpZiAoZGl2YWxlcnQgPT09IG51bGwpIHJlc3BvbnNlZGl2Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgaW52ZXJzZVwiIGRhdGEtZGlzbWlzc2libGU9XCJ0cnVlXCI+JHtlcnJvcnMuam9pbihgPGJyPmApfTwvZGl2PiBgKTtcbiAgICAgIGVsc2UgZGl2YWxlcnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBlcnJvcnMuam9pbihgPGJyPmApKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZGlzcGxheV9uZXh0ID0gYXN5bmMgKHVybCkgPT4ge1xuICAgIGZldGNoKHVybCwgZmV0Y2hTZXR0aW5ncygpKS50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICByZXNwb25zZWRpdi5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIHJlc3BvbnNlKTtcbiAgICB9KTtcblxuICB9XG4gIGNvbnN0IGdvX25leHQgPSAodXJsLCB0aXRsZSwgdHlwZSA9IFwic2Vjb25kYXJ5XCIpID0+IHtcbiAgICByZXR1cm4gYDxhIGhyZWY9XCIke3VybH1cIiBjbGFzcz1cImJ1dHRvbiAgaXMtJHt0eXBlfVwiPiR7dGl0bGV9PC9hPmA7XG4gIH1cbiAgY29uc3Qgc2V0X2pvYnN0YXRlID0gKGpvYikgPT4ge1xuICAgIGlmICghZGl2c3RhdGUpIHJldHVybjtcbiAgICBkaXZzdGF0ZS5pbm5lclRleHQgPSBqb2JTdGF0ZXNbam9iLnN0YXRlXTtcbiAgfVxuICBsZXQgaHRtbCA9IFtdO1xuICBjb25zdCBjaGVja19qb2Jfc3RhdHVzID0gKCkgPT4ge1xuXG4gICAgZmV0Y2goXCIvZ3VpL2pvYi9zdGF0dXMvXCIgKyBqb2JpZCwgZmV0Y2hTZXR0aW5ncykudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpLnRoZW4oam9iID0+IHtcbiAgICAgIGlmIChqb2IuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSGFuZGxlKTtcbiAgICAgICAgZGlzcGxheV9lcnJvcnMoam9iLmVycm9ycywgam9iLnN0YXRlKTtcbiAgICAgIH1cblxuXG4gICAgICBpZiAoam9iKSB7XG5cbiAgICAgICAgc2V0X2pvYnN0YXRlKGpvYik7XG4gICAgICAgIGlmIChzcGlubmVyKSBzcGlubmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICBwcm9ncmVzc19iYXIoam9iLnN0YXRlLCBqb2IucHJvZ3Jlc3NfcGN0LCBqb2IucHJvZ3Jlc3NfbXNnKTtcbiAgICAgICAgc3dpdGNoIChqb2Iuc3RhdGUpIHtcbiAgICAgICAgICBjYXNlIFwiQVwiOlxuICAgICAgICAgICAgLy8gcXVlc3Rpb25cbiAgICAgICAgICAgIHN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHNwaW5uZXIpIHNwaW5uZXIucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgIC8vd2luZG93LmxvY2F0aW9uLmhyZWYgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgXCIvSm9iL1F1ZXN0aW9uL1wiICsgam9iLmlkO1xuICAgICAgICAgICAgcmVzcG9uc2VkaXYuaW5uZXJIVE1MID0gYFF1ZXN0aW9uIHdhaXRpbmcgZm9yIGFuIGFuc3dlciBgICsgZ29fbmV4dCh3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgXCIvSm9iL1F1ZXN0aW9uL1wiICsgam9iLmlkLCAnR28nLCAnd2FybmluZycpXG4gICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSGFuZGxlKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkZcIjpcbiAgICAgICAgICAgIHN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHNwaW5uZXIpIHNwaW5uZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSGFuZGxlKTtcbiAgICAgICAgICAgIGlmIChqb2IuZmluYWxhY3Rpb24pIGh0bWwucHVzaChqb2IuZmluYWxhY3Rpb24pO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiRVwiOlxuICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoc3Bpbm5lcikgc3Bpbm5lci5yZW1vdmUoKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlBcIjpcbiAgICAgICAgICAgIC8vIHBlbmRpbmdcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlJcIjpcbiAgICAgICAgICAgIC8vIHJ1bm5pbmdcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdqb2InLCBqb2IpXG4gICAgICAgICAgICBkaXNwbGF5X2Vycm9ycyhqb2IuZXJyb3JzLCBqb2Iuc3RhdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoam9iLnN0YXRlICYmIGpvYi5zdGF0ZSA9PSBcIkVcIiB8fCAoam9iLnN0YXRlID09ICdGJyAmJiAham9iLm91dCkpIHtcbiAgICAgICAgICBpZiAocmVzcG9uc2VkaXYpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlZGl2Lmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGh0bWwuam9pbignJykpO1xuICAgICAgICAgICAgcmVzcG9uc2VkaXYuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN0b3AgPT09IGZhbHNlKSBzZXRUaW1lb3V0KGNoZWNrX2pvYl9zdGF0dXMsIDEwMDApO1xuICAgICAgcmV0dXJuO1xuICAgIH0pO1xuICB9XG4gIGNoZWNrX2pvYl9zdGF0dXMoKTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/modules/job-monitor.js\n")}}]);
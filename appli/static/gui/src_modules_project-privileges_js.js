/*! For license information please see src_modules_project-privileges_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_project-privileges_js"],{"./src/modules/form-submit.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FormSubmit: () => (/* binding */ FormSubmit)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n\n\nlet instance = null;\nconst formcss = {\n  invalid: 'invalid',\n  inputvalidate: 'input-validate'\n}\nclass FormSubmit {\n  handlers = [];\n  form = null;\n  listener = null;\n  constructor(form, options = {}) {\n    if (!instance) {\n      if (!form) return;\n      const defaultOptions = {};\n      this.options = Object.assign(defaultOptions, options);\n      this.form = form instanceof HTMLElement ? form : document.querySelector(form);\n      if (!this.form) return;\n      this.validateFields(true);\n      this.init();\n      instance = this;\n    }\n    return instance;\n  }\n  init() {\n\n    // init the form ( options like beforeunload etc...)\n    this.form.addEventListener('submit', async (e) => {\n      const res = await this.submitForm();\n      e.preventDefault();\n    });\n    if (this.form.dataset.captcha) {\n      const captcha_handler = async function() {\n        const token = grecaptcha.getResponse();\n        console.log('token ', token)\n        document.getElementById('g-recaptcha-response').value = token;\n        return true;\n      }\n      this.handlers.push(captcha_handler);\n\n    }\n    this.specialFields();\n  }\n  specialFields() {\n    // check if there is a password confirm input\n    this.form.querySelectorAll('input[data-match]').forEach(input => {\n      //\n      const match = input.dataset.match;\n      if (!match) return;\n      const target = document.getElementById(match);\n      if (!target) return;\n      const invalid = (input.dataset.matchinvalid) ? input.dataset.matchinvalid : \"no match\";\n      const label = input.closest('label');\n      const check_match = (item, itemtarget) => {\n        if (item.value !== itemtarget.value) {\n          item.setCustomValidity(invalid);\n          itemtarget.setCustomValidity(invalid);\n          if (input != item) {\n            if (label) label.classList.add(formcss.invalid);\n            input.classList.add(formcss.inputvalidate);\n          }\n        } else {\n          item.setCustomValidity(\"\");\n          itemtarget.setCustomValidity(\"\");\n          item.dataset.invalid = '';\n          itemtarget.dataset.invalid = '';\n          if (input != item) {\n            if (label) label.classList.remove(formcss.invalid);\n            input.classList.remove(formcss.inputvalidate);\n\n          }\n        }\n        item.reportValidity();\n        itemtarget.reportValidity();\n        item.focus();\n      };\n      [input, target].forEach(item => {\n        item.addEventListener('keyup', (e) => {\n          const itemtarget = (item === input) ? target : input;\n          check_match(item, itemtarget);\n        });\n      });\n\n    });\n  }\n\n  validateField(field) {\n\n    const get_message = (field, type) => {\n      let message = 'invalid';\n      if (field.required) message = (field.dataset.required) ? field.dataset.required : ((this.form.dataset.required) ? this.form.dataset.required : 'invalid');\n      if (message === 'invalid') message = (field.dataset.invalid) ? field.dataset.invalid : ((this.form.dataset.invalid) ? this.form.dataset.invalid : 'invalid input');\n      return message;\n    }\n    if (['textarea', 'input'].indexOf(field.tagName.toLowerCase()) >= 0) {\n      field.value = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(field.value);\n    }\n\n    const rep = field.checkValidity();\n    if (field.classList.contains('select-one')) {\n      console.log('select rep', rep);\n    }\n    const label = field.closest('.form-box') ? field.closest('.form-box').querySelector('label') : null;\n\n    if (rep && label) label.classList.remove(formcss.invalid);\n\n    else if (!rep) {\n      if (label) {\n        label.dataset.invalid = get_message(field);\n        label.classList.add(formcss.invalid);\n        window.scrollTo({\n          top: parseInt(label.offsetTop),\n          left: parseInt(label.offsetLeft),\n          behavior: 'smooth'\n        });\n      }\n\n    }\n    return rep;\n  }\n\n  validateFields(init = false) {\n    //todo: complete validation foreach field type\n    let resp = true;\n    // .required input for tom-select component\n    this.form.querySelectorAll('input,textarea, select').forEach(field => {\n\n      if (init === true) {\n\n        if (!field.dataset.listen) {\n          if (field.hasAttribute('required') && field.required) {\n            const label = field.closest('.form-box') ? field.closest('.form-box').querySelector('label') : field.parentElement.querySelector('label');\n            if (label) label.classList.add('required');\n          }\n\n          ['change', 'blur'].forEach(evt => {\n            field.addEventListener(evt, (e) => {\n              this.validateField(e.currentTarget);\n            });\n          });\n          field.dataset.listen = true;\n        }\n      } else resp = (resp && this.validateField(field));\n    });\n    return resp;\n  }\n\n  addHandler(handler) {\n    this.handlers.push(handler);\n  }\n  fieldEnable() {\n    this.form.querySelectorAll('input[data-sub=\"enable\"]').forEach(input => {\n      input.removeAttribute('disabled');\n    });\n  }\n  async submitHandler() {\n    if (!this.validateFields()) return false;\n    if (this.handlers.length === 0) return true;\n    let resp = true;\n    // series\n    /*  for (const handler of this.handlers) {\n          const rep = await handler()\n          resp = (resp && rep)\n      }*/\n    // concurrent\n    await Promise.all(this.handlers.map(async handler => {\n      const rep = await handler();\n      resp = (resp && rep);\n    }));\n    if (resp === true) this.handlers = [];\n    console.log('resp', resp)\n    return resp;\n  }\n  async submitForm() {\n    if (this.validateFields(false)) {\n      const yessubmit = await this.submitHandler();\n      if (yessubmit) {\n        this.fieldEnable();\n        this.form.submit();\n      } else return false;\n    } else return false;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9mb3JtLXN1Ym1pdC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0M7QUFDQTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTzs7QUFFUCxLQUFLO0FBQ0w7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IseURBQWtCO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBLFFBQVE7QUFDUixLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLE1BQU07QUFDTjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvZm9ybS1zdWJtaXQuanM/YzZiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdG9yIGZyb20gJ3ZhbGlkYXRvcic7XG5pbXBvcnQgRE9NUHVyaWZ5IGZyb20gJ2RvbXB1cmlmeSc7XG5sZXQgaW5zdGFuY2UgPSBudWxsO1xuY29uc3QgZm9ybWNzcyA9IHtcbiAgaW52YWxpZDogJ2ludmFsaWQnLFxuICBpbnB1dHZhbGlkYXRlOiAnaW5wdXQtdmFsaWRhdGUnXG59XG5leHBvcnQgY2xhc3MgRm9ybVN1Ym1pdCB7XG4gIGhhbmRsZXJzID0gW107XG4gIGZvcm0gPSBudWxsO1xuICBsaXN0ZW5lciA9IG51bGw7XG4gIGNvbnN0cnVjdG9yKGZvcm0sIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgIGlmICghZm9ybSkgcmV0dXJuO1xuICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7fTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5mb3JtID0gZm9ybSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ID8gZm9ybSA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZm9ybSk7XG4gICAgICBpZiAoIXRoaXMuZm9ybSkgcmV0dXJuO1xuICAgICAgdGhpcy52YWxpZGF0ZUZpZWxkcyh0cnVlKTtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgaW5zdGFuY2UgPSB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH1cbiAgaW5pdCgpIHtcblxuICAgIC8vIGluaXQgdGhlIGZvcm0gKCBvcHRpb25zIGxpa2UgYmVmb3JldW5sb2FkIGV0Yy4uLilcbiAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgYXN5bmMgKGUpID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuc3VibWl0Rm9ybSgpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLmZvcm0uZGF0YXNldC5jYXB0Y2hhKSB7XG4gICAgICBjb25zdCBjYXB0Y2hhX2hhbmRsZXIgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBncmVjYXB0Y2hhLmdldFJlc3BvbnNlKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0b2tlbiAnLCB0b2tlbilcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsdWUgPSB0b2tlbjtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLmhhbmRsZXJzLnB1c2goY2FwdGNoYV9oYW5kbGVyKTtcblxuICAgIH1cbiAgICB0aGlzLnNwZWNpYWxGaWVsZHMoKTtcbiAgfVxuICBzcGVjaWFsRmllbGRzKCkge1xuICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgcGFzc3dvcmQgY29uZmlybSBpbnB1dFxuICAgIHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtkYXRhLW1hdGNoXScpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgLy9cbiAgICAgIGNvbnN0IG1hdGNoID0gaW5wdXQuZGF0YXNldC5tYXRjaDtcbiAgICAgIGlmICghbWF0Y2gpIHJldHVybjtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hdGNoKTtcbiAgICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgICBjb25zdCBpbnZhbGlkID0gKGlucHV0LmRhdGFzZXQubWF0Y2hpbnZhbGlkKSA/IGlucHV0LmRhdGFzZXQubWF0Y2hpbnZhbGlkIDogXCJubyBtYXRjaFwiO1xuICAgICAgY29uc3QgbGFiZWwgPSBpbnB1dC5jbG9zZXN0KCdsYWJlbCcpO1xuICAgICAgY29uc3QgY2hlY2tfbWF0Y2ggPSAoaXRlbSwgaXRlbXRhcmdldCkgPT4ge1xuICAgICAgICBpZiAoaXRlbS52YWx1ZSAhPT0gaXRlbXRhcmdldC52YWx1ZSkge1xuICAgICAgICAgIGl0ZW0uc2V0Q3VzdG9tVmFsaWRpdHkoaW52YWxpZCk7XG4gICAgICAgICAgaXRlbXRhcmdldC5zZXRDdXN0b21WYWxpZGl0eShpbnZhbGlkKTtcbiAgICAgICAgICBpZiAoaW5wdXQgIT0gaXRlbSkge1xuICAgICAgICAgICAgaWYgKGxhYmVsKSBsYWJlbC5jbGFzc0xpc3QuYWRkKGZvcm1jc3MuaW52YWxpZCk7XG4gICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKGZvcm1jc3MuaW5wdXR2YWxpZGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW0uc2V0Q3VzdG9tVmFsaWRpdHkoXCJcIik7XG4gICAgICAgICAgaXRlbXRhcmdldC5zZXRDdXN0b21WYWxpZGl0eShcIlwiKTtcbiAgICAgICAgICBpdGVtLmRhdGFzZXQuaW52YWxpZCA9ICcnO1xuICAgICAgICAgIGl0ZW10YXJnZXQuZGF0YXNldC5pbnZhbGlkID0gJyc7XG4gICAgICAgICAgaWYgKGlucHV0ICE9IGl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChsYWJlbCkgbGFiZWwuY2xhc3NMaXN0LnJlbW92ZShmb3JtY3NzLmludmFsaWQpO1xuICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZShmb3JtY3NzLmlucHV0dmFsaWRhdGUpO1xuXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGl0ZW0ucmVwb3J0VmFsaWRpdHkoKTtcbiAgICAgICAgaXRlbXRhcmdldC5yZXBvcnRWYWxpZGl0eSgpO1xuICAgICAgICBpdGVtLmZvY3VzKCk7XG4gICAgICB9O1xuICAgICAgW2lucHV0LCB0YXJnZXRdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGl0ZW10YXJnZXQgPSAoaXRlbSA9PT0gaW5wdXQpID8gdGFyZ2V0IDogaW5wdXQ7XG4gICAgICAgICAgY2hlY2tfbWF0Y2goaXRlbSwgaXRlbXRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIHZhbGlkYXRlRmllbGQoZmllbGQpIHtcblxuICAgIGNvbnN0IGdldF9tZXNzYWdlID0gKGZpZWxkLCB0eXBlKSA9PiB7XG4gICAgICBsZXQgbWVzc2FnZSA9ICdpbnZhbGlkJztcbiAgICAgIGlmIChmaWVsZC5yZXF1aXJlZCkgbWVzc2FnZSA9IChmaWVsZC5kYXRhc2V0LnJlcXVpcmVkKSA/IGZpZWxkLmRhdGFzZXQucmVxdWlyZWQgOiAoKHRoaXMuZm9ybS5kYXRhc2V0LnJlcXVpcmVkKSA/IHRoaXMuZm9ybS5kYXRhc2V0LnJlcXVpcmVkIDogJ2ludmFsaWQnKTtcbiAgICAgIGlmIChtZXNzYWdlID09PSAnaW52YWxpZCcpIG1lc3NhZ2UgPSAoZmllbGQuZGF0YXNldC5pbnZhbGlkKSA/IGZpZWxkLmRhdGFzZXQuaW52YWxpZCA6ICgodGhpcy5mb3JtLmRhdGFzZXQuaW52YWxpZCkgPyB0aGlzLmZvcm0uZGF0YXNldC5pbnZhbGlkIDogJ2ludmFsaWQgaW5wdXQnKTtcbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpZiAoWyd0ZXh0YXJlYScsICdpbnB1dCddLmluZGV4T2YoZmllbGQudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSA+PSAwKSB7XG4gICAgICBmaWVsZC52YWx1ZSA9IERPTVB1cmlmeS5zYW5pdGl6ZShmaWVsZC52YWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVwID0gZmllbGQuY2hlY2tWYWxpZGl0eSgpO1xuICAgIGlmIChmaWVsZC5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdC1vbmUnKSkge1xuICAgICAgY29uc29sZS5sb2coJ3NlbGVjdCByZXAnLCByZXApO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbCA9IGZpZWxkLmNsb3Nlc3QoJy5mb3JtLWJveCcpID8gZmllbGQuY2xvc2VzdCgnLmZvcm0tYm94JykucXVlcnlTZWxlY3RvcignbGFiZWwnKSA6IG51bGw7XG5cbiAgICBpZiAocmVwICYmIGxhYmVsKSBsYWJlbC5jbGFzc0xpc3QucmVtb3ZlKGZvcm1jc3MuaW52YWxpZCk7XG5cbiAgICBlbHNlIGlmICghcmVwKSB7XG4gICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgbGFiZWwuZGF0YXNldC5pbnZhbGlkID0gZ2V0X21lc3NhZ2UoZmllbGQpO1xuICAgICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKGZvcm1jc3MuaW52YWxpZCk7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyh7XG4gICAgICAgICAgdG9wOiBwYXJzZUludChsYWJlbC5vZmZzZXRUb3ApLFxuICAgICAgICAgIGxlZnQ6IHBhcnNlSW50KGxhYmVsLm9mZnNldExlZnQpLFxuICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIH1cbiAgICByZXR1cm4gcmVwO1xuICB9XG5cbiAgdmFsaWRhdGVGaWVsZHMoaW5pdCA9IGZhbHNlKSB7XG4gICAgLy90b2RvOiBjb21wbGV0ZSB2YWxpZGF0aW9uIGZvcmVhY2ggZmllbGQgdHlwZVxuICAgIGxldCByZXNwID0gdHJ1ZTtcbiAgICAvLyAucmVxdWlyZWQgaW5wdXQgZm9yIHRvbS1zZWxlY3QgY29tcG9uZW50XG4gICAgdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LHRleHRhcmVhLCBzZWxlY3QnKS5mb3JFYWNoKGZpZWxkID0+IHtcblxuICAgICAgaWYgKGluaXQgPT09IHRydWUpIHtcblxuICAgICAgICBpZiAoIWZpZWxkLmRhdGFzZXQubGlzdGVuKSB7XG4gICAgICAgICAgaWYgKGZpZWxkLmhhc0F0dHJpYnV0ZSgncmVxdWlyZWQnKSAmJiBmaWVsZC5yZXF1aXJlZCkge1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBmaWVsZC5jbG9zZXN0KCcuZm9ybS1ib3gnKSA/IGZpZWxkLmNsb3Nlc3QoJy5mb3JtLWJveCcpLnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsJykgOiBmaWVsZC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsJyk7XG4gICAgICAgICAgICBpZiAobGFiZWwpIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ3JlcXVpcmVkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgWydjaGFuZ2UnLCAnYmx1ciddLmZvckVhY2goZXZ0ID0+IHtcbiAgICAgICAgICAgIGZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoZXZ0LCAoZSkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlRmllbGQoZS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZpZWxkLmRhdGFzZXQubGlzdGVuID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHJlc3AgPSAocmVzcCAmJiB0aGlzLnZhbGlkYXRlRmllbGQoZmllbGQpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcDtcbiAgfVxuXG4gIGFkZEhhbmRsZXIoaGFuZGxlcikge1xuICAgIHRoaXMuaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgfVxuICBmaWVsZEVuYWJsZSgpIHtcbiAgICB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbZGF0YS1zdWI9XCJlbmFibGVcIl0nKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlucHV0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBzdWJtaXRIYW5kbGVyKCkge1xuICAgIGlmICghdGhpcy52YWxpZGF0ZUZpZWxkcygpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICBsZXQgcmVzcCA9IHRydWU7XG4gICAgLy8gc2VyaWVzXG4gICAgLyogIGZvciAoY29uc3QgaGFuZGxlciBvZiB0aGlzLmhhbmRsZXJzKSB7XG4gICAgICAgICAgY29uc3QgcmVwID0gYXdhaXQgaGFuZGxlcigpXG4gICAgICAgICAgcmVzcCA9IChyZXNwICYmIHJlcClcbiAgICAgIH0qL1xuICAgIC8vIGNvbmN1cnJlbnRcbiAgICBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLmhhbmRsZXJzLm1hcChhc3luYyBoYW5kbGVyID0+IHtcbiAgICAgIGNvbnN0IHJlcCA9IGF3YWl0IGhhbmRsZXIoKTtcbiAgICAgIHJlc3AgPSAocmVzcCAmJiByZXApO1xuICAgIH0pKTtcbiAgICBpZiAocmVzcCA9PT0gdHJ1ZSkgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIGNvbnNvbGUubG9nKCdyZXNwJywgcmVzcClcbiAgICByZXR1cm4gcmVzcDtcbiAgfVxuICBhc3luYyBzdWJtaXRGb3JtKCkge1xuICAgIGlmICh0aGlzLnZhbGlkYXRlRmllbGRzKGZhbHNlKSkge1xuICAgICAgY29uc3QgeWVzc3VibWl0ID0gYXdhaXQgdGhpcy5zdWJtaXRIYW5kbGVyKCk7XG4gICAgICBpZiAoeWVzc3VibWl0KSB7XG4gICAgICAgIHRoaXMuZmllbGRFbmFibGUoKTtcbiAgICAgICAgdGhpcy5mb3JtLnN1Ym1pdCgpO1xuICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xuICB9XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/modules/form-submit.js\n")},"./src/modules/project-privileges.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectPrivileges: () => (/* binding */ ProjectPrivileges)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_form_submit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/form-submit.js */ \"./src/modules/form-submit.js\");\n/* harmony import */ var _modules_alert_boxes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/alert-boxes.js */ \"./src/modules/alert-boxes.js\");\n/* harmony import */ var _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/js-tom-select.js */ \"./src/modules/js-tom-select.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n// privileges of a project\n// line with member name , priviliege , is contact , and delete functionality\n\n\n\n\n\n\nconst codemessages = {\n  oneatleast: 'oneatleast',\n  nomanager: 'nomanager',\n  nocontact: 'nocontact',\n  uhasnopriv: 'uhasnopriv',\n  importpriverror: 'importpriverror',\n  emptyname: 'emptyname'\n}\nlet instance = null;\nclass ProjectPrivileges {\n  //TODO: rewrite to not depend on DOM select\n  options;\n  alertBox;\n  // current user id;\n  current_uid;\n  fieldset;\n  fieldset_alert_zone;\n  // unique users\n  constructor(options = {}) {\n    if (!instance) {\n      const defaultOptions = {\n        groupid: \"#section-privileges\",\n        separ: '.new-privilege',\n        addbtn: '[data-add=\"block\"]',\n        target: 'member',\n        ident: 'member',\n        privilege: 'privilege',\n        delet: 'delet',\n        contact: 'contact',\n        contactfieldname: 'contact_user_id',\n\n      };\n      this.options = Object.assign({}, defaultOptions, options);\n      this.fieldset = document.querySelector(this.options.groupid);\n      if (!this.fieldset) return;\n      this.fieldset_alert_zone = this.fieldset.querySelector('.tab-content') ? this.fieldset.querySelector('.tab-content') : this.fieldset;\n      this.options.separ = this.options.separ instanceof HTMLElement ? this.options.separ : (document.querySelector(this.options.separ) ? document.querySelector(this.options.separ) : null);\n      this.options.addbtn = this.options.addbtn instanceof HTMLElement ? this.options.addbtn : document.querySelector(this.options.addbtn);\n      if (this.options.addbtn) this.addListener();\n      const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n      this.current_uid = this.fieldset.dataset.u;\n      this.alertBox = new _modules_alert_boxes_js__WEBPACK_IMPORTED_MODULE_2__.AlertBox();\n      lines.forEach((line) => {\n        this.activateEvents(line);\n      });\n\n      //remove deleted , clean && validate datas , format names before sending the form\n      const form = this.fieldset.closest('form');\n      const formSubmit = new _modules_form_submit_js__WEBPACK_IMPORTED_MODULE_1__.FormSubmit(form);\n      // handler - verify privileges before settings form submit\n      const submit_privileges = async () => {\n        const resp = await this.cleanPrivileges();\n        return resp;\n      }\n      formSubmit.addHandler(submit_privileges);\n      instance = this;\n    }\n    return instance;\n  }\n\n  newLine(ret = false, check = 0) {\n    let line;\n    if (check > 0) {\n      line = this.getLinePrivilege(check);\n      if (line) return line;\n    }\n    const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n\n    if (lines.length === 0) return;\n    const n = lines.length - 1;\n    line = lines[n];\n    if (line !== null) {\n      line = this.clearLine(line.cloneNode(true), n, (this.options.separ ? this.options.separ : line));\n\n      this.activateEvents(line);\n\n    }\n    if (ret === true) return line;\n  }\n\n  addListener() {\n    this.options.target = (this.options.addbtn.dataset.target) ? this.options.addbtn.dataset.target : this.options.target;\n    this.options.addbtn.addEventListener('click', async (e) => {\n      e.preventDefault();\n      this.newLine();\n    })\n  }\n\n  clearLine(line, n, separ = null) {\n    /*clean line element */\n\n    let has_autocomplete = null;\n    line.dataset.mod = '';\n    line.disabled = false;\n    const elems = line.querySelectorAll('[data-elem]');\n    elems.forEach((elem) => {\n      // change loop index - necessary for tailwindcss peerchecked to work otherwise not if name ends with []\n      //remove components\n      const rms = elem.querySelectorAll('[data-component]')\n      rms.forEach((rm) => {\n        switch (rm.dataset.component) {\n          case 'tom-select':\n            rm.remove();\n            break;\n        }\n      })\n      // clean and reset events\n      const els = elem.querySelectorAll('input, select, label');\n      els.forEach((el) => {\n\n        el.disabled = false;\n        if (separ) { // change names and id when adding a new row - not if clear only\n          const keys = ['id', 'for', 'aria-controls', 'name'];\n          keys.forEach((key) => {\n            let val = el.getAttribute(key);\n            if (val !== null) {\n              if (key === 'name') val = val.replace('[' + n + ']', '[' + (n + 1) + ']');\n              else val = val.replace('_' + n, '_' + (n + 1));\n              el.setAttribute(key, val);\n            }\n          });\n        }\n        switch (el.tagName.toLowerCase()) {\n          case 'input':\n            //el.indeterminate = true;\n            el.checked = false;\n            // disable contact as privilege is empty\n            if (el.name == this.options.contactfieldname) {\n              el.value = \"0\";\n              el.disabled = true;\n            }\n            break;\n          case 'select':\n            el.selectedIndex = -1;\n            break;\n          case 'label':\n            el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.peerchecked);\n            break;\n        }\n        if (el.tomselect) {\n          has_autocomplete = el;\n          el.tomselect.clear();\n          el.tomselect.destroy();\n\n        }\n        if (el.classList.contains(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.component.autocomplete.tomselected)) {\n          has_autocomplete = el;\n          el.classList.forEach(cl => {\n            if (cl.indexOf('ts-') == 0) el.classList.remove(cl);\n          })\n          el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.component.autocomplete.tomselected);\n          if (el.type == \"select-one\") delete el.type;\n\n        }\n\n      })\n\n    })\n    /* add functionnalities */\n    if (separ) {\n      line.classList.add('new');\n      separ.after(line);\n    }\n    /* clear and add tom-select functionalities - only after adding line to the dom*/\n    if (has_autocomplete !== null) {\n      const jsTomSelect = new _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_3__.JsTomSelect();\n      jsTomSelect.applyTo(has_autocomplete);\n      has_autocomplete.tomselect.clearOptions();\n      let options = this.fieldset.dataset.options;\n      options = (options) ? options : [];\n      has_autocomplete.tomselect.addOptions(options);\n    };\n\n\n    return line;\n  }\n\n  setLine(line, mb = {\n    key: '',\n    value: ''\n  }, priv, ct) {\n\n    priv = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges[priv] ? _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges[priv] : _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges.viewers;\n    if (!priv) return;\n    const {\n      member,\n      privs,\n      contact,\n      delet\n    } = this.getInputs(line, priv);\n    if (!member || !privs || !contact || !delet) return;\n\n    // sanitize\n    mb.key = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(mb.key);\n    mb.value = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(mb.value);\n    const ts = member.tomselect;\n    if (ts) {\n      ts.clear();\n      const addmb = {}\n      addmb[ts.settings.valueField] = mb.key;\n      addmb[ts.settings.labelField] = addmb[ts.settings.searchField] = mb.value;\n      ts.addOption(addmb);\n      ts.setValue([mb.key]);\n    } else {\n      const selected = member.querySelector('select option[value=\"' + mb.key + '\"]');\n      if (selected) selected.selected = true;\n      else member.insertAdjacentHTML('beforeend', '<option value=\"' + mb.key + '\" selected>' + mb.value + '</option>');\n\n    }\n    privs.checked = true;\n    contact.value = mb.key;\n    if (priv === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.rights.manage) {\n      contact.disabled = false;\n      if (ct === true) contact.checked = true;\n    }\n\n  }\n  getInputs(line, priv = false) {\n    const member = line.querySelector(\"[name*='[\" + this.options.ident + \"]']\");\n    let privs;\n    if (priv) {\n      privs = line.querySelector('input[name*=\"[' + this.options.privilege + ']\"][value=\"' + priv + '\"]');\n    } else privs = line.querySelectorAll('input[name*=\"[' + this.options.privilege + ']\"]');\n    const contact = line.querySelector('input[name=\"' + this.options.contactfieldname + '\"]');\n    const delet = line.querySelector(\"input[name*='[\" + this.options.delet + \"]']\");\n\n    return {\n      member: member,\n      privs: privs,\n      contact: contact,\n      delet: delet\n    };\n  }\n  async importPrivileges(privileges, replace = false, contact = null, importedtag = null, dismiss = null) {\n    let lastline = !replace;\n\n    try {\n      Object.entries(privileges).forEach(([priv, members]) => {\n        members.forEach((member) => {\n          if (!lastline) lastline = this.clearAll(true);\n          else lastline = this.newLine(true, member.id);\n          if (lastline) {\n            this.setLine(lastline, {\n              key: member.id,\n              value: member.name,\n            }, priv, (contact && (parseInt(contact.id) === parseInt(member.id))));\n            if (importedtag) importedtag(lastline);\n\n          }\n\n        });\n\n      });\n      if (dismiss) dismiss();\n      this.alertBox.dismissAlert(codemessages.importpriverror);\n      return true;\n    } catch (err) {\n      await this.alertBox.build({\n        dismissible: true,\n        message: codemessages.importpriverror,\n        codeid: true,\n        parent: this.fieldset_alert_zone,\n        type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.danger,\n      });\n      console.log('err', err);\n      return false;\n    }\n  }\n  activateEvents(line) {\n    if (!line) return;\n    const {\n      member,\n      privs,\n      contact,\n      delet\n    } = this.getInputs(line);\n    if (!member || !privs || !contact || !delet) {\n      return;\n    }\n    const siblings = s => [...s.parentElement.children].filter(c => c.nodeType == 1 && c != s && c.classList.contains('row') && c.dataset.block !== null && c.dataset.block === this.options.target);\n\n    // enable/disable contact when privilege changes\n    const lineSettings = (pr, ct, dl, synchro = false) => {\n\n      if (pr && pr.value === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.rights.manage) {\n        // manager - can't delete line - can choose as contact\n        dl.disabled = true;\n        ct.disabled = false;\n        // dismiss related alert\n        this.alertBox.dismissAlert(codemessages.nomanager);\n        if (ct.checked) {\n          this.alertBox.dismissAlert(codemessages.nocontact);\n        }\n      } else {\n        // not manager - can delet line - cannot chose as contact\n        //  if (ct.checked === true) ct.dispatchEvent(new Event('click'));\n        ct.checked = false;\n        dl.disabled = false;\n        ct.disabled = true;\n      }\n\n      if (synchro === true) {\n        synchroSiblings(line);\n      }\n      // dismiss alerts\n      if (!dl.ckecked) {\n        this.alertBox.dismissAlert(codemessages.nobody);\n        this.alertBox.dismissAlert(codemessages.oneatleast);\n      }\n    }\n    const synchroSiblings = (line) => {\n      const lns = siblings(line);\n      lns.forEach((ln) => {\n        const dl = ln.querySelector(\"input[name*='[\" + this.options.delet + \"]']\");\n        const ct = ln.querySelector('input[name=\"' + this.options.contactfieldname + '\"]');\n        const pr = ln.querySelector('input[name*=\"[' + this.options.privilege + ']\"]:checked');\n        lineSettings(pr, ct, dl, false);\n\n      })\n    }\n\n    member.addEventListener('change', (e) => {\n      contact.value = member.value;\n      // dismiss alert\n      if (member.value) {\n        this.alertBox.dismissAlert(codemessages.emptyname);\n        this.alertBox.dismissAlert(codemessages.oneatleast);\n        this.alertBox.dismissAlert(codemessages.nobody);\n      }\n    })\n\n    privs.forEach((priv) => {\n      priv.addEventListener('change', (e) => {\n        if (priv.checked) lineSettings(priv, contact, delet, false);\n      });\n\n      if (priv.checked) lineSettings(priv, contact, delet, false);\n    })\n\n    contact.addEventListener('change', (e) => {\n      if (e.target.checked) delet.disabled = true;\n      else delet.disabled = false;\n      const priv = line.querySelector('input[name*=\"[' + this.options.privilege + ']\"]:checked');\n      lineSettings(priv, contact, delet, true);\n      // enable otherwise\n\n    })\n\n    // delet ok for all when new line\n    //\n    delet.addEventListener('click', (e) => {\n      // at least one priv line\n      const deletlabel = delet.closest('label');\n      const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]:not([data-mod=\"remove\"])');\n      if (lines.length <= 1 && e.target.checked) {\n        delet.disabled = true;\n        delet.checked = false;\n        this.alertBox.build({\n          dismissible: true,\n          message: codemessages.oneatleast,\n          codemessage: codemessages.oneatleast,\n          type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.warning,\n          parent: (e.currentTarget.id || null)\n        });\n        return;\n      } else if (e.target.checked) {\n        this.alertBox.dismissAlert(codemessages.oneatleast);\n        if (line.classList.contains('new')) {\n          line.remove();\n        } else {\n          if (deletlabel && deletlabel.dataset.restore) deletlabel.setAttribute('title', deletlabel.dataset.restore);\n          line.setAttribute('data-mod', 'remove');\n          privs.forEach(priv => {\n            priv.disabled = true;\n            priv.checked = false;\n          })\n          contact.checked = false;\n          contact.disabled = true;\n          member.disabled = true;\n        }\n      } else {\n        if (deletlabel && deletlabel.dataset.remove) deletlabel.setAttribute('title', deletlabel.dataset.remove);\n        line.removeAttribute('data-mod');\n        privs.forEach(priv => priv.disabled = false);\n        contact.disabled = false;\n        member.disabled = false;\n      }\n    });\n    // delet mouseover - explain why it is disabled when manage is checked\n    delet.addEventListener('mouseover', (e) => {\n      if (e.target.disabled) {\n        let pr = line.querySelector('input[name*=\"[' + this.options.privilege + ']\"]:checked');\n        if (!pr) return;\n        pr = pr.value.toLowerCase()\n        e.target.title = (e.target.dataset[pr]) ? e.target.dataset[pr] : e.target.title\n      }\n    })\n    // disable delet if user is the only manager\n    if (this.current_uid === member.value) delet.disabled = true;\n\n\n  }\n\n  // send clean data on submit\n  async cleanPrivileges() {\n    // check managers and contact_user_id on submit\n\n    const checkContact = async () => {\n      // check if one manager at least\n      const managers = this.fieldset.querySelectorAll('[name*=\"[' + this.options.privilege + ']\"][value=\"' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.rights.manage + '\"]:checked');\n      let n = managers.length;\n\n      if (n === 0) {\n        await this.alertBox.build({\n          dismissible: true,\n          message: codemessages.nomanager,\n          codeid: true,\n          type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.danger,\n          parent: this.fieldset_alert_zone,\n        });\n        return false;\n      } else this.alertBox.dismissAlert(codemessages.nomanager);\n      // check contact\n      const contact = this.fieldset.querySelector('[name=\"' + this.options.contactfieldname + '\"]:checked');\n\n      if (contact === null) {\n        await this.alertBox.build({\n          dismissible: true,\n          codeid: true,\n          message: codemessages.nocontact,\n          type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.danger,\n          parent: this.fieldset_alert_zone\n        });\n        return false;\n      }\n      this.alertBox.dismissAlert(codemessages.nocontact);\n      return true;\n    }\n    const hasMember = (line) => {\n      const member = line.querySelector('[name*=\"[' + this.options.ident + ']\"]');\n      return (member.value);\n    }\n    const hasPriv = (line) => {\n      const priv = line.querySelector('[name*=\"[' + this.options.privilege + ']\"]:checked');\n      if (priv && priv.value) return true;\n      return false;\n    }\n    const formatPrivilege = (line) => {\n\n      const els = line.querySelectorAll('[name*=\"members[\"');\n      els.forEach((el) => {\n        let name = el.name;\n        name = name.split('[');\n        name.pop();\n        el.name = name.join('[');\n        if (el.name.indexOf('[' + this.options.privilege + ']') > 0) {\n          el.type = 'checkbox';\n          el.classList.add('hidden');\n        }\n\n      })\n    }\n    const hascontact = await checkContact();\n    if (hascontact === true) {\n      const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n      let n = lines.length;\n      let verif = true;\n      for (const line of lines) {\n        if (line.dataset.mod && line.dataset.mod === 'remove') {\n          if (n > 1) {\n            line.remove();\n            n--;\n          } else return false;\n        } else if (!hasMember(line)) {\n          const lineno = line.querySelector('[name*=\"[' + this.options.ident + ']\"]');\n          lineno.focus();\n          if (lineno.tomselect) lineno.tomselect.focus();\n          await this.alertBox.build({\n            dismissible: true,\n            insertafter: true,\n            message: codemessages.emptyname,\n            codeid: true,\n            type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.warning,\n            parent: line\n          });\n          const resp = false; // no confimbox just wait for user action\n          // callback when confirmbox response is chosen if 'confirm'\n          if (resp === true) {\n            if (n > 1) {\n              line.remove();\n              n--;\n            } else return false;\n\n          } else return false;\n        } else if (!hasPriv(line)) {\n          this.alertBox.dismissAlert(codemessages.emptyname);\n          await this.alertBox.build({\n            dismissible: true,\n            insertafter: true,\n            codeid: true,\n            message: codemessages.uhasnopriv,\n            type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.warning,\n            parent: line\n          });\n          verif = false;\n        } else this.alertBox.dismissAlert(codemessages.uhasnopriv);\n      }\n      if (!verif) return verif;\n      for (const line of lines) {\n        formatPrivilege(line);\n      }\n\n      if (n === 0) {\n        await this.alertBox.build({\n          dismissible: true,\n          codeid: true,\n          message: codemessages.nobody,\n          type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.warning,\n          parent: this.fieldset_alert_zone\n        });\n        return false;\n      } else this.alertBox.dismissAlert(codemessages.nobody);\n      return true;\n    } else return false;\n  }\n  getLinePrivilege(id) {\n    let privilege = null;\n    const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]')\n    for (const line of lines) {\n      if (parseInt(line.querySelector('[name*=\"[' + this.options.ident + ']\"]').value) === parseInt(id)) {\n        privilege = line;\n        break;\n      }\n    }\n\n    return privilege;\n  }\n\n  clearAll(ret = false) {\n    const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n    let keepindex = -1;\n    lines.forEach((line, index) => {\n      const {\n        member,\n        privs,\n        contact,\n        delet\n      } = this.getInputs(line);\n      if (this.current_uid === member.value) keepindex = index;\n      if (index > 0 || (keepindex > 0 && keepindex !== index)) line.remove();\n    });\n    //\n    console.log('keepindex', keepindex)\n    const line = this.newLine(true);\n    if (keepindex !== 0) {\n      lines[0].remove();\n      console.log('rem line0', lines)\n    }\n    if (ret === true) return line;\n  }\n\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/project-privileges.js\n")}}]);
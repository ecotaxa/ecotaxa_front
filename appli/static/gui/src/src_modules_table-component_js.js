/*! For license information please see src_modules_table-component_js.js.LICENSE.txt */
(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_table-component_js"],{"./src/modules/table-component.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableComponent: () => (/* binding */ TableComponent)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var deep_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! deep-equal */ \"./node_modules/deep-equal/index.js\");\n/* harmony import */ var deep_equal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(deep_equal__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\n\n\nlet instance = [];\n// valid fetch urlparts\nconst fetchfroms = {\n  collectionlist: '/gui/collectionlist/',\n  prjlist: '/gui/prjlist/',\n  prjsamplestats: '/gui/prjsamplestats',\n  userslist: '/gui/admin/userslist/',\n  prjpredict: '/gui/prjsforprediction/'\n};\n// specifc css\nconst tablecss = {\n  showfull: 'showfull',\n  tipinline: \"tip-inline\",\n  searchresults: \"search-results\",\n  selectaction: \"selectaction\",\n  absinput: 'absinput',\n  disabled: 'table-disabled',\n  ascending: 'table-ascending',\n  descending: 'table-descending',\n  tipover: 'tipover absolute z-10 text-stone-50 rounded bg-stone-600 px-2 py-0.5 -mt-5 ml-12 ',\n  hide: 'hide',\n  nowrap: 'truncate',\n};\nconst tableselectors = {\n  table: '.table-table',\n  wrapper: '.table-wrapper',\n  top: '.table-top',\n  input: '.table-input',\n  search: '.table-search',\n  export: '.button-export',\n  filters: '.table-filters',\n  sorter: '.table-sorter',\n  details: 'details[data-what=\"about\"]',\n  tip: '.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.component.table.tip,\n  tipover: '.tipover',\n  wait: 'wait-please',\n  sorton: '.sorton',\n};\n\nObject.freeze(tablecss);\nObject.freeze(tableselectors);\nconst dynamics = {};\n\nclass TableComponent {\n  instanceid = null;\n  grid = {\n    columns: [],\n    active: [],\n    hidden: [],\n    data: []\n  };\n  domdef = {\n    columns: [],\n    data: [],\n  };\n  wrapper = null;\n  dom = null;\n  params = null;\n  _events = {};\n  eventnames = {\n    init: \"table.init\",\n    update: \"table.update\",\n    refresh: \"table.refresh\",\n    resize: \"table.resize\",\n    search: \"table.search\",\n    searchend: \"table.searchend\",\n    sorting: \"table.sorting\",\n    sorted: \"table.sorted\",\n    load: \"table.loaded\",\n    dismiss: 'table.dismiss'\n  }\n  labels = {\n    placeholder: \"Search...\",\n    perPage: \"{select} entries per page\",\n    noRows: \"No entries found\",\n    info: \"Showing {start} to {end} of {rows} entries\",\n    noResults: \"No result match your search query\"\n  };\n  cellidname = \"id\";\n  searching = false;\n  sorting = false;\n  initialized = false;\n  plugins = {};\n  constructor(container, options = {}) {\n    if (!container) return;\n    container = container instanceof HTMLElement ? container : document.querySelector(container);\n    if (!container) return;\n    //can select multiples tables in one page  or load data in the same table\n    this.instanceid = (container.dataset.instanceid) ? container.dataset.instanceid : document.querySelectorAll('table').length;\n    if (!instance[this.instanceid] || !deep_equal__WEBPACK_IMPORTED_MODULE_1___default()(container.dataset, instance[this.instanceid].params)) {\n      this.init(container);\n    } else this.refresh();\n    return instance[this.instanceid];\n\n  }\n  init(container) {\n    (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.add_custom_events)(this);\n    this.params = container.dataset;\n    let table = container.querySelector('table');\n    if (!table) {\n      table = document.createElement('table');\n      container.appendChild(table);\n    }\n    table.id = 'table-' + container.id;\n    table.classList.add(tableselectors.table.substr(1))\n    this.dom = table;\n    let top = {\n      nodename: \"DIV\",\n      attributes: {\n        class: tableselectors.top.substr(1)\n      }\n    };\n    if (this.params.searchable) top.childnodes = [{\n      nodename: \"DIV\",\n      attributes: {\n        class: tableselectors.search.substr(1)\n      },\n      html: `<input type=\"search\" name=\"table-search\" placeholder=\"${this.labels.placeholder}\" class=\"${tableselectors.input.substr(1)}  ${_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.input} ${_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide}\">`\n    }];\n    let wrapper = this.objToElement({\n      nodename: 'DIV',\n      attributes: {\n        class: tableselectors.wrapper.substr(1)\n      },\n      childnodes: [top]\n    });\n    container.appendChild(wrapper);\n    wrapper.appendChild(table);\n    this.wrapper = wrapper;\n\n    this.labels = (this.params.labels) ? this.params.labels : this.labels;\n    // cellid\n    this.cellidname = (this.params.hasOwnProperty(\"cellid\")) ? this.params.cellid : this.cellidname;\n    // only valid from values - fetchfroms\n    this.params.from = (this.params.from) ? dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(this.params.from) : null;\n\n    const from = (this.params.from) ? ((Object.keys(fetchfroms).indexOf(this.params.from) >= 0) ? fetchfroms[this.params.from] : null) : null;\n    if (from) {\n      if (this.params.defer) this.deferLoad(container, from);\n      else this.fetchData(container, from);\n    } else this.tableActivate(container);\n    this.dt = Date.now();\n  }\n\n  waitActivate(container) {\n    let waitdiv = container.querySelector('#' + tableselectors.wait);\n    if (!waitdiv) {\n      waitdiv = document.createElement('div');\n      waitdiv.id = tableselectors.wait;\n      container.append(waitdiv);\n    }\n    this.waitdiv = waitdiv;\n  }\n\n  waitDesactivate(message = null, type = 'info') {\n    if (!this.waitdiv) return;\n    if (message) this.waitdiv.innerHTML = `<div class=\"alert is-${type}\">${message}</div>`;\n    else this.waitdiv.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n  }\n\n  deferLoad(container, from) {\n    const btn = container.querySelector(this.params.defer);\n    if (!btn) return;\n\n    btn.addEventListener('click', (e) => {\n      this.fetchData(container, from);\n      btn.remove();\n    });\n  }\n\n  fetchData(container, fromurl, pagestart = 0) {\n    this.waitActivate(container);\n    const pagesize = (this.params.pagesize) ? this.params.pagesize : 0;\n    let from = fromurl;\n    if (this.params.fromid) from += '/' + this.params.fromid;\n\n    let query = (this.params.import) ? {\n      typeimport: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(this.params.import),\n      window_start: pagestart,\n      window_size: pagesize,\n      gz: true,\n    } : ((pagesize) ? {\n      window_start: pagestart,\n      window_size: pagesize,\n      listall: ((this.params.listall) ? this.params.listall : false)\n    } : ((this.params.listall) ? {\n      listall: ((this.params.listall) ? this.params.listall : false)\n    } : {}));\n    const queryparams = new URLSearchParams(window.location.search);\n    const querykeys = this.cellidname + 's';\n    if (querykeys.length) {\n      for (const entry of queryparams.entries()) {\n        if (querykeys.indexOf(entry[0]) >= 0) query[entry[0]] = entry[1];\n      }\n    }\n    if (Object.keys(query).length) from += '?' + new URLSearchParams(query);\n    this.dt = Date.now();\n    fetch(from, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.fetchSettings)()).then(response => {\n      if (response.ok) return response.json();\n      else return Promise.reject(response);\n    }).then(async tabledef => {\n      if (this.waitdiv) this.waitdiv.innerHTML = ((this.waitdiv.dataset.loaded) ? dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(this.waitdiv.dataset.loaded) : _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.default_messages.dataloaded);\n      if (pagestart === 0) {\n        console.log('seconds to fetch', (Date.now() - this.dt) / 1000);\n        this.dt = Date.now();\n        await this.tableActivate(container, tabledef);\n      } else if (tabledef.length) this.domInsertRows(tabledef);\n      else pagesize = 0;\n      if (pagesize > 0) this.fetchData(container, fromurl, pagestart + pagesize);\n    }).catch((err) => { /* print error from response */\n      this.waitDesactivate(err.status + ` ` + err.statusText, 'error');\n    })\n  }\n  async dataToTable(tabledef) {\n\n    if (!tabledef.data) return;\n    if (tabledef.columns) {\n      await this.convertColumns(tabledef);\n      let tr;\n      let thead = this.dom.tHead;\n      if (!thead) {\n        // create table headings\n        thead = document.createElement('thead');\n        tr = document.createElement('tr');\n        this.dom.appendChild(thead);\n      } else if (!thead.querySelector('tr')) {\n        tr = document.createElement('tr');\n\n      } else {\n        tr = thead.querySelector('tr');\n        tr.innerHTML = ``;\n      }\n      let tbody = (this.dom.tBodies.length) ? this.dom.tBodies[0] : null;\n      if (!tbody) {\n        tbody = document.createElement('tbody');\n        this.dom.appendChild(tbody);\n      }\n      const isjson = (!tabledef.hasOwnProperty('data') || (tabledef.hasOwnProperty('type') && tabledef.type === \"json\"));\n\n      this.grid.columns.forEach((column, index) => {\n\n        if (!column.hidden) {\n          const th = document.createElement('th');\n          th.innerHTML = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(column.label);\n          if (column.sort) th.dataset.sort = column.sort;\n          if (column.format) th.dataset.type = column.type;\n          if (column.name) th.dataset.name = column.name;\n          // TODO - find a place to define col import props\n          // set headings dataset values for import module\n          if (this.params.import)['selectcells', 'what', 'autocomplete', 'parts', 'value'].forEach(prop => {\n            if (column.hasOwnProperty(prop)) th.dataset[prop] = column[prop];\n          });\n          th.dataset.sortable = (column.sortable) ? true : false;\n          tr.appendChild(th);\n          this.grid.active.push(index);\n        } else this.grid.hidden.push(index);\n\n      });\n\n\n      thead.appendChild(tr);\n      const datalastused = (this.params.lastused && this.params.lastused.length > 0) ? [] : null;\n      //#TODO lastused reorder\n      if (isjson) {\n        this.grid.data = [];\n        tabledef.data.forEach((data, i) => {\n          const row = [];\n          let j = 0;\n          Object.entries(tabledef.columns).forEach(([key, column], i) => {\n            if (!column.hasOwnProperty('emptydata')) {\n              if (data.hasOwnProperty(key)) row[j] = data[key];\n              else if (column.field && data.hasOwnProperty(column.field)) row[j] = data[column.field];\n              else row[j] = null;\n              j++;\n            }\n          });\n          this.grid.data.push(row);\n        });\n      } else this.grid.data = tabledef.data;\n\n      const tfoot = this.dom.tFoot;\n      if (this.grid.active.length === 0) {\n        tbody.innerHTML = `<tr><td>${this.labels.noRows}</td</tr>`;\n        if (tfoot) tfoot.remove();\n        return;\n      } else if (tfoot && tfoot.querySelector('tr')) {\n        const tf = tfoot.querySelector('tr').childNodes;\n        this.grid.hidden.forEach(i => {\n          tf[i].remove();\n        });\n      };\n\n      this.renderTbody(tbody);\n    }\n  }\n\n  tableToData() {\n    if (!this.dom.querySelector('thead')) return;\n    const datalastused = (this.params.lastused && this.params.lastused.length > 0) ? [] : null;\n    this.dom.classList.add(tablecss.hide);\n    const cell_to_obj = (cell) => {\n      const obj = {\n        data: cell.innerText,\n      }\n      if (cell.innerText !== cell.innerHTML) obj.html = cell.innerHTML;\n      return obj;\n    }\n    const ths = (this.dom.querySelectorAll('thead tr th').length) ? this.dom.querySelectorAll('thead tr th') : this.dom.querySelectorAll('thead tr td');\n    const trs = this.dom.querySelectorAll('tbody tr');\n    let active = 0,\n      hidden = 0;\n\n    function find_label(th) {\n      if (th.childNodes.length) return find_label(th.childNodes[0]);\n      else return th.innerText;\n    }\n    ths.forEach((th, index) => {\n      const col = Object.assign({}, th.dataset);\n      if (col.mask) th.classList.add('hidden');\n      if (col.hidden && (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.string_to_boolean)(col.hidden)) {\n        col.hidden = true;\n        th.remove();\n      }\n      col.label = find_label(th);\n      if (col.type) {\n        col.format = col.type;\n        delete col.type;\n      }\n      col.index = index;\n      if (col.hidden) this.grid.hidden.push(index);\n      else this.grid.active.push(index);\n      this.grid.columns.push(col);\n    });\n    const cellid = this.getCellId(this.cellidname);\n    trs.forEach((tr, i) => {\n      if (cellid < 0) tr.dataset[this.cellidname] = i;\n      else if (i === cellid) tr.dataset[this.cellidname] = this.getCellData(i, this.cellidname, cellid);\n      const data = [];\n      tr.querySelectorAll('th,td').forEach((td, index) => {\n        if (this.grid.columns[index].hasOwnProperty('mask')) td.classList.add('hidden');\n        if (this.grid.hidden.indexOf(index) >= 0) td.remove();\n        data.push(td.innerText);\n      });\n      this.grid.data.push(data)\n    });\n\n    this.dom.querySelectorAll('tfoot tr th').forEach((td, index) => {\n      if (this.grid.columns[index].hasOwnProperty('mask')) td.classList.add('hidden');\n      if (this.grid.hidden.indexOf(index) >= 0) td.remove();\n    });\n    this.dom.classList.remove(tablecss.hide);\n    return;\n  }\n  renderTbody(tbody) {\n    const l = this.grid.data.length;\n    for (let i = 0; i < l; i++) {\n      const tr = this.createTableRow(this.grid.data[i], i);\n      tbody.append(tr);\n    };\n\n\n\n  }\n  async tableActivate(container, tabledef = null) {\n    this.on(this.eventnames.init, () => {\n      // hide and move waitdiv in the wrapper for inner elements display\n      this.dom.classList.remove(tablecss.hide);\n      this.waitDesactivate();\n      if (this.afterLoad) this.afterLoad();\n      // move import zones and/or search zone - reorg the page display\n      //container.style.top = container.offsetTop + 'px';\n      // fetch once the same table\n      container.dataset.table = this.params.table = true;\n\n    });\n    this.on(this.eventnames.load, () => {\n      this.initSearch();\n      this.initSort();\n      this.initPlugins(container);\n      console.log('plugin loaded', (Date.now() - this.dt) / 1000);\n    });\n    // dismiss table when dismiss modal\n    this.on(this.eventnames.dismiss, (e) => {\n      this.destroy();\n    });\n    if (tabledef) tabledef = await this.dataToTable(tabledef);\n    else await this.tableToData();\n    if (this.grid.data.length) this.emit(this.eventnames.load);\n    setTimeout(() => {\n      this.emit(this.eventnames.init);\n      this.initialized = true;\n    }, 10)\n    instance[this.instanceid] = this;\n\n  }\n\n  tableAppendRows(rows) {\n    console.log('rows');\n  }\n  destroy() {\n    if (this.dataImport) this.dataImport = null;\n    this.dom = null;\n    delete instance[this.instanceid];\n  }\n  refresh(e) {\n    if (this.dataImport && this.dataImport.selectors) this.dataImport.selectors.forEach(selector => {\n      if (this.disabled) this.disabled = false;\n    });\n  }\n  labelFormatter(column) {\n    let align = ``;\n    if (['number', 'progress', 'decimal'].find(format => format === column.format)) align = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.right;\n    if (column.subfield) return `${column.label} <span class=\"sublabel\">${column.sublabel}</span>`;\n    else if (column.label) return `<span class=\"${align}\">${column.label}</span>`;\n    else return ``;\n  }\n  getCellId(name, state = null) {\n    let cols = this.grid.columns.filter(column => (column.name === name));\n    return (cols.length) ? cols[0].index : -1;\n  }\n\n  getCellData(rowIndex, name, cellIndex = null) {\n    cellIndex = (cellIndex === null) ? this.getCellId(name) : cellIndex;\n    if (cellIndex < 0) return null;\n    return (this.grid.data.length) ? ((this.grid.data[rowIndex]) ? this.grid.data[rowIndex][cellIndex] : null) : null;\n  }\n\n  rowAttributes(tr, index) {\n    const id = this.getCellData(index, this.cellidname);\n    tr.dataset[this.cellidname] = id;\n    if (this.setRowAttributes) tr = this.setRowAttributes(this, tr, id);\n    return tr;\n  }\n\n  createTableRow(row, index, isheader = false) {\n    const tr = document.createElement('tr');\n    let td;\n    this.grid.columns.forEach(column => {\n      if (column.hasOwnProperty('hidden') && column.hidden === true) return;\n      const cell = row[column.index];\n      if (column.hasOwnProperty(\"render\")) {\n        td = column.render(cell, index, column.index);\n        td.nodename = (isheader) ? 'TH' : 'TD';\n        td = this.objToElement(td);\n      } else {\n        td = (isheader) ? document.createElement('th') : document.createElement('td');\n        td.appendChild(document.createTextNode(cell));\n      }\n      tr.appendChild(td);\n    })\n    return this.rowAttributes(tr, index);\n  }\n\n  objToElement(obj) {\n    if (obj.nodename === \"#text\") return document.createTextNode(obj.data);\n    const el = document.createElement(obj.nodename);\n    if (obj.hasOwnProperty(\"html\")) el.innerHTML = obj.html;\n    else el.textContent = obj.data;\n    if (obj.hasOwnProperty(\"attributes\")) {\n      for (const attr in obj.attributes) {\n        el.setAttribute(attr, obj.attributes[attr]);\n      }\n    }\n    if (obj.hasOwnProperty(\"childnodes\")) {\n      obj.childnodes.forEach(childnode => {\n\n        el.appendChild(this.objToElement(childnode));\n      });\n\n    }\n    return el;\n  }\n\n  setTextNode(value) {\n    return {\n      nodename: \"#text\",\n      data: value\n    };\n  }\n  async getFormatters() {\n    let formatters = {\n      controls: (value, rowIndex, cellIndex, td = {}) => {\n        const column = this.grid.columns[cellIndex];\n        const id = this.getCellData(rowIndex, column.field);\n        const actions = (column.actions) ? column.actions : null;\n        if (!actions) return ``;\n        let controls = [];\n        Object.entries(actions).forEach(([key, action]) => {\n          controls.push({\n            nodename: \"A\",\n            attributes: {\n              class: `btn is-${key} `,\n              href: `${action.link}${id}`\n            },\n            childnodes: [this.setTextNode(action.label)]\n          });\n\n        });\n        if (!td.hasOwnProperty('attributes')) td.attributes = {};\n        td.attributes.class = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.component.table.controls;\n        td.childnodes = controls;\n        return td;\n      },\n      select: (value, rowIndex, cellIndex, td = {}) => {\n        const column = this.grid.columns[cellIndex];\n        value = (isNaN(value)) ? this.getCellData(rowIndex, column.field) : value;\n\n        td.childnodes = [{\n          nodename: \"INPUT\",\n          attributes: {\n            type: \"radio\",\n            name: `${this.instanceid}select`,\n            value: String(value)\n          }\n        }];\n        return td;\n      },\n      selectmultiple: (value, rowIndex, cellIndex, td = {}) => {\n        const column = this.grid.columns[cellIndex];\n        value = (isNaN(value)) ? ((column.hasOwnProperty('field')) ? this.getCellData(rowIndex, column.field) : value) : value;\n        td.childnodes = [{\n          nodename: \"INPUT\",\n          attributes: {\n            type: \"checkbox\",\n            name: `${this.instanceid}select[]`,\n            value: String(value)\n          }\n        }];\n        return td;\n      },\n      decimal: (value, rowIndex, cellIndex, td = {}) => {\n        if (isNaN(value)) value = 0;\n        value = parseFloat(value).toFixed(2);\n        if (value - parseInt(value) === 0) value = parseInt(value);\n        if (!td.hasOwnProperty('attributes')) td.attributes = {};\n        td.attributes.class = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.number;\n        td.childnodes = [this.setTextNode(value)];\n        return td;\n      },\n      number: (value, rowIndex, cellIndex, td = {}) => {\n        if (isNaN(value)) value = 0;\n        if (!td.hasOwnProperty('attributes')) td.attributes = {};\n        td.attributes.class = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.number;\n        td.childnodes = [this.setTextNode(value)];\n        return td;\n      },\n      check: (value, rowIndex, cellIndex, td = {}) => {\n        if (isNaN(value)) value = ``;\n        switch (value) {\n          case true:\n          case 'Y':\n          case 1:\n            value = \"\";\n            break;\n          default:\n            value = \"no-\";\n            break;\n        }\n        const icon = {\n          nodename: \"I\",\n          attributes: {\n            class: `icon-sm  icon-${value}check `\n          },\n          childnodes: []\n        }\n        const column = this.grid.columns[cellIndex];\n        const id = this.getCellData(rowIndex, this.cellidname);\n        if (column.hasOwnProperty(\"toggle\")) td.childnodes = [{\n          nodename: \"A\",\n          attributes: {\n            \"data-request\": \"toggle\",\n            \"data-action\": `${column.toggle.link}/${id}`,\n            \"href\": \"javascript:void()\"\n\n          },\n          childnodes: [icon]\n\n        }]\n        else td.childnodes = [icon];\n        return td;\n      },\n      text: (value, rowIndex, cellIndex, td = {}) => {\n        if (value === null) td.childnodes = [];\n        else {\n          value = value.replaceAll('\\r\\n', ', ');\n          if (value !== ``) td.childnodes = [{\n            nodename: \"DIV\",\n            attributes: {\n              class: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.component.table.tip\n            },\n            childnodes: [this.setTextNode(value)]\n          }];\n          else td.childnodes = [];\n        }\n        return td;\n      },\n      default: (value, rowIndex, cellIndex, td = {}) => {\n        if (value === null || value === ``) td.childnodes = [];\n        else td.childnodes = [this.setTextNode(value)];\n        return td;\n      }\n\n    }\n    let tablecustom = null;\n\n    switch (this.params.from) {\n      case 'collectionlist':\n        tablecustom = await __webpack_require__.e(/*! import() */ \"src_modules_table-collection_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/table-collection.js */ \"./src/modules/table-collection.js\"));\n        this.cellidname = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.id;\n        break;\n      case 'prjlist':\n        tablecustom = await __webpack_require__.e(/*! import() */ \"src_modules_table-project_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/table-project.js */ \"./src/modules/table-project.js\"));\n        this.cellidname = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.projid;\n        break;\n      case 'prjsamplestats':\n        tablecustom = await __webpack_require__.e(/*! import() */ \"src_modules_table-sample_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/table-sample.js */ \"./src/modules/table-sample.js\"));\n        this.cellidname = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.sampleid;\n        break;\n      case \"prjpredict\":\n        tablecustom = await __webpack_require__.e(/*! import() */ \"src_modules_table-prediction_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/table-prediction.js */ \"./src/modules/table-prediction.js\"));\n        this.cellidname = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.projid;\n\n        break;\n    }\n\n    return (tablecustom) ? { ...formatters,\n      ...tablecustom.default(this)\n    } : formatters;\n\n\n  }\n  async convertColumns(tabledef) {\n    const columns = (tabledef.columns) ? tabledef.columns : ((this.params.columns) ? JSON.parse(this.params.columns) : null);\n    if (!columns) return;\n    const formatters = await this.getFormatters();\n    //\n    const fields = [];\n    Object.entries(tabledef.columns).forEach(([key, column]) => {\n      if (!column.hasOwnProperty('emptydata')) fields.push(key);\n    });\n    const map_column = (key, column, index) => {\n      if (!column) return {\n        index: index,\n        name: key,\n        hidden: true\n      };\n      let col = {\n        index: index,\n        name: key,\n        label: this.labelFormatter(column),\n        sortable: true,\n\n      };\n      col.index = (column.hasOwnProperty('emptydata')) ? fields.indexOf(column.emptydata) : fields.indexOf(key);\n      if (column.notsortable) col.sortable = false;\n      else if (column.sortable) col.sort = col.sortable;\n      col.searchable = (col.notsearchable) ? false : true;\n      if (column.hidden) col.hidden = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.string_to_boolean)(column.hidden);\n      if (['number', 'decimal'].find(format => format === column.format)) col.type = 'number';\n      let render = null;\n      switch (key) {\n        case 'select':\n          const select = (column.select && column.select == \"controls\") ? \"controls\" : ((column.selectcells) ? \"imports\" : column.select);\n          if (select) {\n            col = { ...column,\n              ...col\n            }\n\n            col.sortable = col.searchable = false;\n          }\n          break;\n      }\n      if (!column.hasOwnProperty('hidden')) {\n        const select = (column.select && column.select == _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.controls) ? _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.controls : ((column.selectcells) ? _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.models.imports : column.select)\n        const format = (column.format) ? column.format : ((column.subfield) ? column.subfield : ((select) ? select : \"default\"));\n        if (formatters && formatters[format]) col.render = formatters[format];\n\n      }\n      return col;\n    }\n\n    this.grid.columns = Object.entries(columns).map(([key, column], index) => map_column(key, column, index));\n  }\n  initEvents() {\n    this.on(this.eventnames.update, () => {\n      if (this.dom.classList.contains(tablecss.hide)) this.dom.classList.remove(tablecss.hide);\n\n    });\n  }\n  initPlugins(container) {\n    if (!this.grid.data.length) return;\n    if (this.params.import && this.initImport) this.initImport(this);\n    if (this.params.expand) this.makeExpandable(container);\n    if (this.params.export) this.makeExportable(container);\n    if (this.params.details || this.dom.querySelector(tableselectors.details)) this.initDetails();\n    else this.initEvents();\n    if (this.params.onselect) this.initSelect(container);\n    if (this.dom.querySelector(tableselectors.tip)) this.initTips();\n    if (this.dom.querySelectorAll('thead [data-altsort]').length) this.initAlternateSort(this.dom.querySelectorAll('thead [data-altsort]'));\n    if (this.params.filters) {\n      const top = this.wrapper.querySelector(tableselectors.top);\n      if (top && top.children.length) {\n        const filters = document.querySelector(tableselectors.filters);\n        // insert  filters node  in datatable top\n        if (filters) top.prepend(filters);\n      }\n    }\n  }\n  initSort() {\n\n    const ths = this.dom.querySelectorAll('thead th');\n    let index = 0;\n    this.grid.columns.forEach((column, i) => {\n      if (column.hasOwnProperty('hidden')) return;\n      if (column.sortable) {\n        const th = ths[index];\n        const a = document.createElement('a');\n        a.classList.add(tableselectors.sorter.substr(1));\n        a.appendChild(th.childNodes[0]);\n        th.appendChild(a);\n        th.childNodes.forEach(child => {\n          th.appendChild(child);\n        });\n\n        a.addEventListener('click', (e) => {\n          e.stopImmediatePropagation();\n          if (this.sorting === true || this.searching === true) {\n            e.preventDefault();\n            return false;\n          }\n          this.sortColumn(th, column.index);\n        });\n      }\n      index++;\n    });\n    this.sorting = false;\n    // remove details when sorting\n    this.on(this.eventnames.sorting, (direction, index) => {\n\n      if (this.plugins.hasOwnProperty('jsDetail')) this.plugins['jsDetail'].activeDetail(false);\n      this.dom.querySelectorAll('.table-sorter').forEach((a, i) => {\n        a.classList.add(((i === index) ? _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.wait : _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.disabled));\n      });\n      this.sorting = true;\n    });\n    // remove details when sorting\n    this.on(this.eventnames.sorted, (direction, index) => {\n      this.dom.querySelectorAll('.table-sorter').forEach((a, i) => {\n        a.classList.remove(((i === index) ? _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.wait : _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.disabled))\n      });\n      this.sorting = false;\n    });\n  }\n  sortColumn(th, index, dir = null) {\n    dir = (dir === null) ? ((th.classList.contains(tablecss.ascending)) ? false : (th.classList.contains(tablecss.descending)) ? true : ((th.dataset.sort) ? false : true)) : dir;\n    th.classList.toggle(tablecss.ascending);\n    th.classList.toggle(tablecss.descending);\n    this.emit(this.eventnames.sorting, dir, th.cellIndex);\n    let rows = this.grid.data.map((row, i) => {\n      const cell = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.is_object)(row[index]) ? JSON.stringify(row[index]) : ((Array.isArray(row[index])) ? row[index][0] : row[index]);\n      return {\n        value: typeof cell === \"string\" ? cell.toLowerCase() : ((cell === null) ? 0 : cell),\n        row: i\n      }\n    });\n\n    const compare_coldata = function(a, b) {\n      const x = (dir ? a.value : b.value);\n      const y = (dir ? b.value : a.value);\n      return x.localeCompare(y, undefined, {\n        numeric: true,\n        sensitivity: 'base'\n      });\n\n    };\n\n    if (dir === false) {\n      th.classList.remove(tablecss.ascending);\n      th.classList.add(tablecss.descending);\n      th.setAttribute(\"aria-sort\", \"descending\");\n    } else {\n      th.classList.remove(tablecss.descending);\n      th.classList.add(tablecss.ascending);\n      th.setAttribute(\"aria-sort\", \"ascending\");\n    }\n\n    /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */\n    if (this.dom.dataset.lastth !== undefined && th.cellIndex != this.dom.dataset.lastth) {\n      const headings = this.dom.querySelectorAll(\"thead th\");\n      headings[this.dom.dataset.lastth].classList.remove(tablecss.descending);\n      headings[this.dom.dataset.lastth].classList.remove(tablecss.ascending);\n      headings[this.dom.dataset.lastth].removeAttribute(\"aria-sort\");\n\n    }\n    this.dom.dataset.lastth = th.cellIndex;\n    const collator = new Intl.Collator(undefined, {\n      numeric: true,\n      sensitivity: 'base'\n    })\n    rows.sort((a, b) => {\n      return collator.compare((dir ? a.value : b.value), (dir ? b.value : a.value))\n    });\n    /*rows.sort((a, b) => {\n      return compare_coldata(a, b);\n    });*/\n    const tbody = this.dom.querySelector('tbody');\n    const clone = tbody.cloneNode();\n    const trs = tbody.querySelectorAll('tr');\n    tbody.innerHTML = ``;\n    const sorted = [];\n    rows.forEach((r, i) => {\n      clone.appendChild(trs[r.row]);\n      sorted.push(this.grid.data[r.row]);\n\n    });\n    this.grid.data = sorted;\n    this.dom.replaceChild(clone, tbody);\n\n    this.emit(this.eventnames.sorted, dir, th.cellIndex);\n\n\n  }\n\n  tableSearch(input, casesensitive = false) {\n    function search_string(str, casesensitive) {\n      str = (casesensitive) ? str : str.toLowerCase();\n      return str; // str.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, '\\\\$&');\n    }\n\n    function search_queries(str, casesensitive) {\n      str = search_string(str, casesensitive);\n      let strs = [];\n      let phrase;\n      while ((phrase = str.match(/\"([^\"]+)\"/)) !== null) {\n\n        strs.push(phrase[1]);\n        str = str.substring(0, phrase.index) + str.substring(phrase.index + phrase[0].length);\n      }\n      // Get remaining space-separated words (if any)\n      str = str.trim();\n      if (str.length) strs = strs.concat(str.split(/\\s+/));\n      return strs;\n    }\n\n    let queries = search_queries(input.value);\n    let datas = this.grid.data,\n      indexes = [];\n    const trs = this.dom.querySelectorAll('tbody tr');\n    const cellid = this.getCellId(this.cellidname);\n    queries.forEach(qry => {\n      indexes = [];\n      datas = datas.filter((data, j) => {\n        const found = data.filter(cell => {\n          switch (typeof cell) {\n            case 'object':\n              cell = (cell) ? cell : ``;\n              try {\n                cell = JSON.stringify(cell);\n              } catch (err) {\n                console.log('search', err);\n                cell = ``;\n              }\n              break;\n            case 'array':\n              cell = cell.join(' ');\n              break;\n            default:\n              cell = String(cell);\n              break;\n          }\n\n          return ((casesensitive) ? cell.indexOf(qry) > -1 : cell.toLowerCase().indexOf(qry)) > -1;\n        });\n\n        if (found.length > 0) {\n          if (cellid < 0) indexes.push(String(j));\n          else indexes.push(String(data[cellid]));\n          return data;\n        }\n      });\n    });\n\n    trs.forEach((tr, index) => {\n      const val = (tr.dataset[this.cellidname] !== null) ? tr.dataset[this.cellidname] : tr.cells[cellid].textContent;\n      if ((queries.length > 0 && indexes.length === 0) || indexes.indexOf(val) < 0) tr.hidden = true;\n      else tr.hidden = false;\n    });\n\n  }\n\n  initSearch() {\n    if (this.grid.data.length < 10) return this.toggleAddOns();\n    else this.toggleAddOns([tableselectors.search + ' input'], true);\n    this.searching = false;\n    // search items\n    const searchinput = this.wrapper.querySelector(tableselectors.search + ' input');\n    if (!searchinput) return;\n    let searchstring = ``;\n    const search_terms = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.debounce)((el) => {\n      searchstring = el.value;\n      this.tableSearch(el);\n    }, 500);\n    searchinput.addEventListener(\"keyup\", (e) => {\n      e.preventDefault();\n      search_terms(e.currentTarget);\n    })\n    searchinput.addEventListener(\"click\", (e) => {\n\n      if (searchstring !== e.currentTarget.value) search_terms(e.currentTarget);\n\n    })\n    let timesearch = false;\n    this.on(this.eventnames.search, (query, matched) => {\n      if (this.plugins.hasOwnProperty('jsDetail')) this.plugins['jsDetail'].activeDetail(false);\n      this.searching = true;\n    });\n    this.on(this.eventnames.searchend, (query, matched) => {\n\n      this.searching = false;\n    });\n    this.on(this.eventnames.update, () => {\n      if (timesearch === false) {\n        timesearch = true;\n        setTimeout(() => {\n          refresh_details();\n          delete this.dom.dataset.issearching;\n          timesearch = false;\n        }, 300);\n      }\n    });\n  }\n  initSelect(container) {\n    const inputs = this.dom.querySelectorAll('input[name^=\"' + this.instanceid + '\"]');\n    if (inputs.length === 0) return;\n    const inputname = inputs[0].name;\n    let selectaction = container.querySelector('.' + tablecss.selectaction);\n    if (!selectaction) return;\n    document.body.append(selectaction);\n    selectaction.querySelector('a').addEventListener('click', (e) => {\n      let vals = [];\n      inputs.forEach(input => {\n        if (input.checked) vals.push(input.value);\n      });\n      if (selectaction.dataset.input) {\n        document.getElementById(selectaction.dataset.input).value = vals.join(',');\n        if (selectaction.dataset.form) document.getElementById(selectaction.dataset.form).submit();\n      } else e.currentTarget.href = this.params.onselect + encodeURI(vals.join(','));\n\n    });\n    const close = selectaction.querySelector('[data-dismiss]');\n    if (close) close.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      popup_selected(null, null);\n    });\n\n    const popup_selected = (top = null, left = null, forceclose = false) => {\n      if (selectaction.dataset.close) {\n        document.body.append(selectaction);\n        close.classList.remove('hidden');\n        selectaction.classList.add(tablecss.absinput);\n      }\n      if (top !== null && left !== null) {\n        selectaction.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n        selectaction.style.top = top + 'px';\n        selectaction.style.left = left + 'px';\n\n      } else {\n        if (forceclose === true) {\n          selectaction.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n          delete selectaction.dataset.close;\n        } else {\n          selectaction.dataset.close = true;\n          close.classList.add('hidden');\n          const toptable = this.wrapper.querySelector(tableselectors.top) ? this.wrapper.querySelector(tableselectors.top) : this.wrapper;\n          toptable.prepend(selectaction);\n          selectaction.classList.remove(tablecss.absinput);\n\n        }\n      }\n    }\n    inputs.forEach(input => {\n      input.addEventListener('change', (e) => {\n        if (input.checked) popup_selected(input.offsetTop, input.offsetLeft);\n        else if (this.dom.querySelectorAll('input[name^=\"' + this.instanceid + '\"]:checked').length === 0) popup_selected(null, null, true);\n      });\n    });\n    if (this.dom.querySelectorAll('input[name^=\"' + this.instanceid + '\"]:checked').length > 0) {\n      selectaction.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n      popup_selected(null, null);\n    }\n  }\n  async initDetails() { // TODO : generic\n    // about - one div to display cell details make it appear as table row expanding\n    const wrapper = this.wrapper;\n\n    const about = wrapper.querySelector('#' + tablecss.tipinline) ? wrapper.querySelector('#' + tablecss.tipinline) : tablecss.tipinline;\n    if (!dynamics.JsDetail) {\n      const {\n        JsDetail\n      } = await\n      __webpack_require__.e(/*! import() */ \"src_modules_js-detail_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/js-detail.js */ \"./src/modules/js-detail.js\"));\n      dynamics.JsDetail = JsDetail;\n    }\n    const jsDetail = new dynamics.JsDetail(about, wrapper, {\n      waitdiv: this.waitdiv\n    }); // specific to about details in table\n    // hide / show disable details zone\n    const callbackclose = (el, callback = null) => {\n      jsDetail.activeDetail(false);\n      if (callback) callback();\n    }\n\n    const callbackopen = (el, callback = null) => {\n      jsDetail.activeDetail(true);\n      if (jsDetail.current && jsDetail.current === el) {\n        jsDetail.expandDetail(el);\n        if (callback) callback();\n      } else {\n        if (jsDetail.current) jsDetail.current.querySelector('summary').click();\n        const url = this.params.detailsurl + el.dataset.id + '?' +\n          new URLSearchParams({\n            partial: true\n          });\n        jsDetail.activeDetail(true);\n        // append to cell details and display\n\n        fetch(url, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.fetchSettings)()).then(response => response.text()).then(html => {\n          jsDetail.expandDetail(el, html);\n          if (callback) callback();\n        }).catch(err => {\n          console.log('request', err);\n        })\n      }\n\n    }\n    if (!dynamics.JsAccordion) {\n      const {\n        JsAccordion\n      } = await __webpack_require__.e(/*! import() */ \"src_modules_js-accordion_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/js-accordion.js */ \"./src/modules/js-accordion.js\"));\n      dynamics.JsAccordion = JsAccordion;\n    }\n\n    const refresh_details = () => {\n      if (this.dom.classList.contains(tablecss.hide)) this.dom.classList.remove(tablecss.hide);\n      const details = this.dom.querySelectorAll(tableselectors.details);\n      if (!details) return;\n      details.forEach(item => {\n        if (!item.dataset.id) return;\n\n        item = new dynamics.JsAccordion(item, callbackopen, callbackclose, jsDetail.detail);\n      });\n    }\n    this.plugins['jsDetail'] = jsDetail;\n    refresh_details();\n  }\n\n  initAlternateSort(cols) {\n\n    let tdcols = [];\n    cols.forEach(col => {\n      const tdcol = col.closest('th');\n      Object.entries(col.dataset).forEach(([k, v]) => {\n        tdcol.dataset[k] = v;\n        col.classList.add('inline-block')\n      });\n      tdcols.push(tdcol);\n    });\n    cols = tdcols;\n    // end fix\n\n    let coltosort;\n    const sortalternate = (col) => {\n      let todir;\n      // keep the same dir if sort on col changes\n      if (parseInt(col.dataset.sortactive) === parseInt(coltosort)) {\n        todir = (col.classList.contains(tablecss.ascending)) ? 'desc' : ((col.classList.contains(tablecss.descending)) ? 'asc' : 'asc');\n      } else todir = (col.classList.contains(tablecss.ascending)) ? 'asc' : (col.classList.contains(tablecss.descending)) ? 'desc' : 'asc';\n      //  this.grid.columns.sort(coltosort, todir);\n\n      this.sortColumn(col, coltosort, todir);\n\n    }\n    cols.forEach(col => {\n      const altsort = (col.dataset.altsort) ? col.dataset.altsort.split(',') : null;\n      if (!altsort) return;\n      const csssorter = col.querySelector(tableselectors.sorter);\n      if (csssorter) csssorter.classList.add(tablecss.disabled);\n      const control = col.querySelector(tableselectors.sorton);\n      // prevents imbricated links\n      col.append(control);\n      const triggers = col.querySelectorAll('[role=\"button\"]');\n\n      col.addEventListener('click', (e) => {\n        e.preventDefault();\n        sortalternate(col);\n      }, false);\n      const changecoltosort = (cl, index) => {\n        if (index === 0) coltosort = this.grid.columns.findIndex(column => (column.index === cl.cellIndex));\n        else coltosort = this.grid.columns.findIndex(column => (column.name === altsort[index - 1]));\n      }\n      col.dataset.sortactive = col.cellIndex;\n      triggers.forEach((trigger, index) => {\n        trigger.addEventListener('click', (e) => {\n          e.preventDefault();\n          const active = e.currentTarget.parentElement.querySelector('.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.active);\n          if (active) active.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.active);\n          e.currentTarget.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.active);\n          changecoltosort(col, index);\n        });\n      });\n      if (col.dataset.tip) {\n\n        Object.values(this.dom.rows).forEach((row, index) => {\n          if (index === 0) return;\n          const coltip = this.grid.columns.findIndex(column => (column.name === altsort[parseInt(col.dataset.tip) - 1]));\n\n          if (row.cells.length === 0 || coltip === col.cellIndex) return;\n          row.cells[col.cellIndex].addEventListener('mouseenter', (e) => {\n\n            const tip = document.createElement('div');\n            tip.setAttribute('class', tablecss.tipover);\n            tip.innerHTML = row.cells[coltip].innerHTML;\n            e.currentTarget.append(tip);\n          });\n          row.cells[col.cellIndex].addEventListener('mouseout', (e) => {\n            const tip = e.currentTarget.querySelector(tableselectors.tipover);\n            if (tip) tip.remove();\n          });\n        });\n      }\n    });\n\n  }\n\n\n  closeShowfull() {\n    const showfull = document.querySelector('.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.component.table.tip + '.' + tablecss.showfull);\n    if (showfull) showfull.click();\n  }\n  makeExpandable(container) {\n    if (container.querySelector('table').offsetHeight < container.offsetHeight) return;\n    const btn = document.createElement('div');\n    btn.classList.add('button-expand');\n    btn.classList.add('border-t');\n    btn.title = this.params.expand;\n    btn.innerHTML = `<span class=\"small-caps block mx-auto p-0\">${this.params.expand}</span><i class=\"clear-both p-0 mx-auto icon icon-chevron-down hover:fill-secondblue-500\"></i><span class=\"small-caps block mx-auto p-0 hidden\">${\n                  this.params.shrink}</span>`;\n    container.parentElement.insertBefore(btn, container.nextElementSibling);\n    container.classList.add('overflow-y-hidden');\n    container.classList.remove('max-tabstat-h');\n    container.parentElement.style.height = 'auto';\n    const h = parseInt(this.wrapper.querySelector('tbody tr').offsetHeight) * ((this.params.maxrows) ? this.params.maxrows : 20);\n    container.classList.add('max-h-[' + h + 'px]');\n    container.style.height = h + 'px';\n    btn.addEventListener('click', (e) => {\n      this.closeShowfull();\n      btn.classList.toggle('border-t');\n      btn.classList.toggle('border-b');\n      const ico = btn.querySelector('i');\n      ico.classList.toggle('icon-chevron-down');\n      ico.classList.toggle('icon-chevron-up');\n      container.classList.toggle('overflow-y-hidden');\n      container.classList.toggle('max-h-[' + h + 'px]');\n      btn.querySelectorAll('span').forEach(span => {\n        span.classList.toggle('hidden');\n      });\n      if (container.classList.contains('overflow-y-hidden')) container.style.height = h + 'px';\n      else container.style.height = 'auto';\n    });\n  }\n  makeExportable(container) {\n    const btn = document.createElement('div');\n    btn.classList.add(tableselectors.export.slice(1));\n    btn.classList.add('is-pick');\n    btn.innerHTML = `<i class=\"icon icon-arrow-down-on-square\"></i><span>${((this.params.exportlabel) ? this.params.exportlabel : 'export statistics ')}</span>`;\n    this.wrapper.prepend(btn);\n    const columns = this.grid.columns;\n    let exclude_columns = [];\n    this.grid.columns.forEach((column, index) => {\n      if (column.name === 'select') exclude_columns.push(column.index);\n    });\n    btn.addEventListener('click', async (e) => {\n      e.preventDefault();\n      if (!this.dynamics) this.dynamics = {};\n      if (!this.dynamics.exportCSV) {\n        const {\n          exportCSV // or exportJSON, exportSQL\n        } = await\n        __webpack_require__.e(/*! import() */ \"src_modules_js-export-csv_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/js-export-csv.js */ \"./src/modules/js-export-csv.js\"));\n\n        this.dynamics.exportCSV = exportCSV;\n      }\n      let str = this.dynamics.exportCSV(this, {\n        download: false,\n        linedelimiter: \"\\n\",\n        columndelimiter: \"\\t\",\n        skipcolumns: exclude_columns\n      });\n      str = encodeURI(`data:text/tsv;charset=utf-8,${str}`);\n\n      (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.download_url)(str, ((container.id) ? container.id : 'stats_proj') + '.tsv');\n\n    });\n  }\n  initTips() {\n    // show big cell content\n    let current = null;\n    this.dom.querySelectorAll(tableselectors.tip).forEach(tip => {\n      tip.addEventListener('mouseenter', (e) => {\n        if (tip.classList.contains(tablecss.showfull) || (tip.scrollHeight > tip.offsetHeight)) {\n          tip.style.cursor = 'pointer';\n        }\n      });\n      tip.addEventListener('click', (e) => {\n        const styleparent = window.getComputedStyle(tip.parentElement);\n        const style = window.getComputedStyle(tip.parentElement);\n        if (tip.classList.contains(tablecss.showfull)) {\n          tip.classList.remove(tablecss.showfull);\n          tip.parentElement.style.minHeight = 'none';\n          tip.parentElement.style.height = 'auto';\n          tip.style.maxWidth = tip.style.minWidth = 'none';\n          if (tip.dataset.p) {\n            tip.style.paddingLeft = tip.dataset.p.l;\n            tip.style.paddingRight = tip.dataset.p.r;\n            tip.style.paddingTop = tip.dataset.p.t;\n            tip.style.paddingLeft = tip.dataset.p.b;\n          }\n          current = null;\n        } else if (tip.scrollHeight > tip.offsetHeight) {\n          if (current) current.classList.remove(tablecss.showfull);\n\n          const h = parseInt(tip.clientHeight);\n          tip.parentElement.style.minHeight = tip.parentElement.style.height = (((h < parseInt(styleparent.maxHeight)) ? h : parseInt(styleparent.maxHeight)) - 2 * parseInt(styleparent.padding)) + 'px';\n\n          if (!tip.dataset.p) tip.dataset.p = {\n            l: style.paddingLeft,\n            r: style.paddingRight,\n            t: style.paddingTop,\n            b: style.paddingBottom\n          };\n          tip.style.maxWidth = tip.style.minWidth = tip.clientWidth + 'px';\n          tip.classList.add(tablecss.showfull);\n          tip.style.top = (parseInt(tip.offsetTop) - parseInt(styleparent.padding)) + 'px';\n\n          current = tip;\n        }\n\n      });\n    });\n  }\n  toggleAddOns(list = null, on = false) {\n    list = (list) ? list : [tableselectors.search + ' input', tableselectors.export];\n    const addons = [];\n    let addon;\n    list.forEach(addon => {\n      addon = this.wrapper.querySelector(addon);\n      if (addon) {\n        if (on) addon.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide)\n        else addon.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n      }\n    });\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/table-component.js\n")},"?4f7e":()=>{}}]);
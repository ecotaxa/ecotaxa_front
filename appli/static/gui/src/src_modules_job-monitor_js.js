/*! For license information please see src_modules_job-monitor_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_job-monitor_js"],{"./src/modules/job-monitor.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jobMonitor: () => (/* binding */ jobMonitor)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\n\nfunction jobMonitor(item, options = {}) {\n  const jobOptions = {\n    url: \"/gui/job/status/\"\n  }\n  options = { ...jobOptions,\n    ...options\n  }\n  const jobid = item.dataset.id;\n  const jobStates = {\n    E: 'Error',\n    F: 'Done',\n    R: 'Running',\n    A: 'Question',\n    P: 'Waiting'\n  }\n  if (!jobid) return;\n  const populates = (item.dataset.populate) ? JSON.parse(item.dataset.populate) : {};\n  if (item.dataset.state && ['E', 'F', 'A'].indexOf(item.dataset.state) >= 0) return;\n  const divstate = document.getElementById(\"divstate\");\n  let responsediv = document.getElementById(\"responsediv\");\n  if (responsediv === null) {\n    responsediv = document.createElement('div');\n    responsediv.id = 'responsediv';\n    item.prepend(responsediv);\n  }\n\n\n  let stop = false;\n  let cl = 'is-pending';\n  const progress_bar = function(state, percent = 0, msg = \"\") {\n    if (!percent) percent = 0;\n    const progressbar = document.getElementById('progressbar');\n    responsediv.textContent = msg;\n    if (divstate) divstate.textContent = msg;\n    if (progressbar !== null) {\n      progressbar.firstChild.textContent = percent + '%';\n      const progressbarsz = progressbar.querySelector('.percent');\n      if (progressbarsz) {\n        progressbarsz.classList.remove(cl);\n        cl = 'is-running';\n        switch (state) {\n          case 'E':\n            cl = 'is-error';\n            break;\n          case 'F':\n            cl = 'is-done';\n            break;\n          case 'A':\n            cl = 'is-warning';\n            break;\n        }\n        if (!progressbarsz.classList.contains(cl)) progressbarsz.classList.add(cl);\n        progressbarsz.style.width = percent + '%';\n\n      }\n    }\n  }\n\n  function spinner_icon(state) {\n    const spinner = document.getElementById('spinner-icon');\n    if (spinner === null) return;\n    switch (state) {\n      case 'R':\n      case 'P':\n        if (spinner) spinner.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n        const svg = spinner.querySelector('svg');\n        if (svg === null) spinner.insertAdjacentHTML('afterbegin', (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.html_spinner)('text-stone-700'));\n        break;\n      default:\n        spinner.remove();\n        break;\n    }\n  }\n\n  function display_errors(errors, jobstate) {\n    if (!errors || errors.length === 0) return;\n    if (errors.length && jobstate != 'E' && jobstate !== 'F') {\n      const divalert = responsediv.querySelector('.alert');\n      if (divalert === null) responsediv.insertAdjacentHTML('beforeend', `<div class=\"alert danger inverse\" data-dismissible=\"true\">${errors.join(`<br>`)}</div> `);\n      else divalert.insertAdjacentHTML('beforeend', errors.join(`<br>`));\n    }\n\n  }\n\n  function go_next(url, title, type = \"secondary\") {\n    return `<a href=\"${url}\" class=\"button  is-${type}\">${title}</a>`;\n  }\n\n  function set_jobstate(state) {\n    if (!divstate) return;\n    divstate.innerText = jobStates[state];\n  }\n\n  function set_joberrors(errors) {\n    if (!divstate) return;\n    divstate.innerText = jobStates[state];\n  }\n\n  function set_jobinfo(job, key) {\n    if (Object.keys(populates).indexOf(key) < 0) return;\n    const divinfo = document.getElementById(populates[key]);\n    if (!divinfo) return;\n    switch (key) {\n      case \"state\":\n        divinfo.innerText = jobStates[job.state];\n        break;\n      case \"errors\":\n        const trigger = divinfo.querySelector('[data-action=\"toggle\"]');\n        if (trigger) {\n          if (job.errors.length === 0) {\n            trigger.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n            return;\n          } else {\n            trigger.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n            trigger.click();\n          }\n        }\n        display_errors(job.errors, job.state);\n        const list = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('ul', {}, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('div', {\n          class: (divinfo.dataset.target) ? divinfo.dataset.target.replace('.', '') : \"collapseerrors\"\n        }, divinfo));\n        job.errors.forEach(error => {\n          const li = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('li', {\n            text: error\n          }, list);\n        });\n        break;\n      default:\n        divinfo.innerText = (job[key]) ? job[key] : '';\n        break;\n    }\n\n  }\n\n  function display_infos(job) {\n    spinner_icon(job.state);\n    progress_bar(job.state, job.progress_pct, job.progress_msg);\n    Object.keys(populates).forEach(info => {\n      set_jobinfo(job, info);\n    });\n  }\n  let html = [];\n\n  function check_job_status() {\n    fetch(options.url + jobid, _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings).then(response => response.json()).then(job => {\n\n      if (job) {\n        if (job.state) {\n          display_infos(job);\n        }\n\n        switch (job.state) {\n          case \"A\":\n            // question\n            stop = true;\n            //window.location.href = window.location.origin + \"/Job/Question/\" + job.id;\n            responsediv.innerHTML = `Question waiting for an answer ` + go_next(window.location.origin + \"/Job/Question/\" + job.id, 'Go', 'warning');\n            populate(\"questiondata\");\n\n            break;\n          case \"F\":\n            stop = true;\n            if (job.finalaction) html.push(job.finalaction);\n            break;\n          case \"E\":\n\n            stop = true;\n            break;\n          case \"P\":\n            // pending\n            break;\n          case \"R\":\n            // running\n            break;\n        }\n\n        if (job.state && job.state === \"E\" || job.state === 'F' || job.type === \"Prediction\") {\n          //  display_final(job.finalaction);\n          if (responsediv) {\n            responsediv.insertAdjacentHTML('afterbegin', html.join(''));\n            responsediv.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n          }\n          stop = true;\n        }\n      } else stop = true;\n\n      if (stop === false) setTimeout(check_job_status, 1000);\n      return;\n    }).catch((err) => {\n      console.log('err', err);\n    });\n  }\n  check_job_status();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9qb2ItbW9uaXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFJNkI7QUFHUzs7QUFFL0Isc0NBQXNDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsMkRBQUc7QUFDakQ7QUFDQSxtRUFBbUUsK0RBQVk7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0lBQXNJLG9CQUFvQjtBQUMxSjtBQUNBOztBQUVBOztBQUVBO0FBQ0EsdUJBQXVCLElBQUksc0JBQXNCLEtBQUssSUFBSSxNQUFNO0FBQ2hFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQywyREFBRztBQUNyQztBQUNBLFlBQVk7QUFDWixxQ0FBcUMsMkRBQUc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkRBQVUsU0FBUyxFQUFFLDZEQUFVO0FBQ3BEO0FBQ0EsU0FBUztBQUNUO0FBQ0EscUJBQXFCLDZEQUFVO0FBQy9CO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLCtCQUErQiw0REFBYTs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QywyREFBRztBQUM1QztBQUNBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvam9iLW1vbml0b3IuanM/MjA1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBmZXRjaFNldHRpbmdzLFxuICBodG1sX3NwaW5uZXIsXG4gIGNyZWF0ZV9ib3hcbn0gZnJvbSAnLi4vbW9kdWxlcy91dGlscy5qcyc7XG5pbXBvcnQge1xuICBjc3Ncbn0gZnJvbSAnLi4vbW9kdWxlcy9tb2R1bGVzLWNvbmZpZy5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBqb2JNb25pdG9yKGl0ZW0sIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBqb2JPcHRpb25zID0ge1xuICAgIHVybDogXCIvZ3VpL2pvYi9zdGF0dXMvXCJcbiAgfVxuICBvcHRpb25zID0geyAuLi5qb2JPcHRpb25zLFxuICAgIC4uLm9wdGlvbnNcbiAgfVxuICBjb25zdCBqb2JpZCA9IGl0ZW0uZGF0YXNldC5pZDtcbiAgY29uc3Qgam9iU3RhdGVzID0ge1xuICAgIEU6ICdFcnJvcicsXG4gICAgRjogJ0RvbmUnLFxuICAgIFI6ICdSdW5uaW5nJyxcbiAgICBBOiAnUXVlc3Rpb24nLFxuICAgIFA6ICdXYWl0aW5nJ1xuICB9XG4gIGlmICgham9iaWQpIHJldHVybjtcbiAgY29uc3QgcG9wdWxhdGVzID0gKGl0ZW0uZGF0YXNldC5wb3B1bGF0ZSkgPyBKU09OLnBhcnNlKGl0ZW0uZGF0YXNldC5wb3B1bGF0ZSkgOiB7fTtcbiAgaWYgKGl0ZW0uZGF0YXNldC5zdGF0ZSAmJiBbJ0UnLCAnRicsICdBJ10uaW5kZXhPZihpdGVtLmRhdGFzZXQuc3RhdGUpID49IDApIHJldHVybjtcbiAgY29uc3QgZGl2c3RhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRpdnN0YXRlXCIpO1xuICBsZXQgcmVzcG9uc2VkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc3BvbnNlZGl2XCIpO1xuICBpZiAocmVzcG9uc2VkaXYgPT09IG51bGwpIHtcbiAgICByZXNwb25zZWRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHJlc3BvbnNlZGl2LmlkID0gJ3Jlc3BvbnNlZGl2JztcbiAgICBpdGVtLnByZXBlbmQocmVzcG9uc2VkaXYpO1xuICB9XG5cblxuICBsZXQgc3RvcCA9IGZhbHNlO1xuICBsZXQgY2wgPSAnaXMtcGVuZGluZyc7XG4gIGNvbnN0IHByb2dyZXNzX2JhciA9IGZ1bmN0aW9uKHN0YXRlLCBwZXJjZW50ID0gMCwgbXNnID0gXCJcIikge1xuICAgIGlmICghcGVyY2VudCkgcGVyY2VudCA9IDA7XG4gICAgY29uc3QgcHJvZ3Jlc3NiYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3NiYXInKTtcbiAgICByZXNwb25zZWRpdi50ZXh0Q29udGVudCA9IG1zZztcbiAgICBpZiAoZGl2c3RhdGUpIGRpdnN0YXRlLnRleHRDb250ZW50ID0gbXNnO1xuICAgIGlmIChwcm9ncmVzc2JhciAhPT0gbnVsbCkge1xuICAgICAgcHJvZ3Jlc3NiYXIuZmlyc3RDaGlsZC50ZXh0Q29udGVudCA9IHBlcmNlbnQgKyAnJSc7XG4gICAgICBjb25zdCBwcm9ncmVzc2JhcnN6ID0gcHJvZ3Jlc3NiYXIucXVlcnlTZWxlY3RvcignLnBlcmNlbnQnKTtcbiAgICAgIGlmIChwcm9ncmVzc2JhcnN6KSB7XG4gICAgICAgIHByb2dyZXNzYmFyc3ouY2xhc3NMaXN0LnJlbW92ZShjbCk7XG4gICAgICAgIGNsID0gJ2lzLXJ1bm5pbmcnO1xuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgICAgICBjbCA9ICdpcy1lcnJvcic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdGJzpcbiAgICAgICAgICAgIGNsID0gJ2lzLWRvbmUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgICBjbCA9ICdpcy13YXJuaW5nJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcHJvZ3Jlc3NiYXJzei5jbGFzc0xpc3QuY29udGFpbnMoY2wpKSBwcm9ncmVzc2JhcnN6LmNsYXNzTGlzdC5hZGQoY2wpO1xuICAgICAgICBwcm9ncmVzc2JhcnN6LnN0eWxlLndpZHRoID0gcGVyY2VudCArICclJztcblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNwaW5uZXJfaWNvbihzdGF0ZSkge1xuICAgIGNvbnN0IHNwaW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3Bpbm5lci1pY29uJyk7XG4gICAgaWYgKHNwaW5uZXIgPT09IG51bGwpIHJldHVybjtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlICdSJzpcbiAgICAgIGNhc2UgJ1AnOlxuICAgICAgICBpZiAoc3Bpbm5lcikgc3Bpbm5lci5jbGFzc0xpc3QucmVtb3ZlKGNzcy5oaWRlKTtcbiAgICAgICAgY29uc3Qgc3ZnID0gc3Bpbm5lci5xdWVyeVNlbGVjdG9yKCdzdmcnKTtcbiAgICAgICAgaWYgKHN2ZyA9PT0gbnVsbCkgc3Bpbm5lci5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBodG1sX3NwaW5uZXIoJ3RleHQtc3RvbmUtNzAwJykpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHNwaW5uZXIucmVtb3ZlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc3BsYXlfZXJyb3JzKGVycm9ycywgam9ic3RhdGUpIHtcbiAgICBpZiAoIWVycm9ycyB8fCBlcnJvcnMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKGVycm9ycy5sZW5ndGggJiYgam9ic3RhdGUgIT0gJ0UnICYmIGpvYnN0YXRlICE9PSAnRicpIHtcbiAgICAgIGNvbnN0IGRpdmFsZXJ0ID0gcmVzcG9uc2VkaXYucXVlcnlTZWxlY3RvcignLmFsZXJ0Jyk7XG4gICAgICBpZiAoZGl2YWxlcnQgPT09IG51bGwpIHJlc3BvbnNlZGl2Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxkaXYgY2xhc3M9XCJhbGVydCBkYW5nZXIgaW52ZXJzZVwiIGRhdGEtZGlzbWlzc2libGU9XCJ0cnVlXCI+JHtlcnJvcnMuam9pbihgPGJyPmApfTwvZGl2PiBgKTtcbiAgICAgIGVsc2UgZGl2YWxlcnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBlcnJvcnMuam9pbihgPGJyPmApKTtcbiAgICB9XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvX25leHQodXJsLCB0aXRsZSwgdHlwZSA9IFwic2Vjb25kYXJ5XCIpIHtcbiAgICByZXR1cm4gYDxhIGhyZWY9XCIke3VybH1cIiBjbGFzcz1cImJ1dHRvbiAgaXMtJHt0eXBlfVwiPiR7dGl0bGV9PC9hPmA7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRfam9ic3RhdGUoc3RhdGUpIHtcbiAgICBpZiAoIWRpdnN0YXRlKSByZXR1cm47XG4gICAgZGl2c3RhdGUuaW5uZXJUZXh0ID0gam9iU3RhdGVzW3N0YXRlXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldF9qb2JlcnJvcnMoZXJyb3JzKSB7XG4gICAgaWYgKCFkaXZzdGF0ZSkgcmV0dXJuO1xuICAgIGRpdnN0YXRlLmlubmVyVGV4dCA9IGpvYlN0YXRlc1tzdGF0ZV07XG4gIH1cblxuICBmdW5jdGlvbiBzZXRfam9iaW5mbyhqb2IsIGtleSkge1xuICAgIGlmIChPYmplY3Qua2V5cyhwb3B1bGF0ZXMpLmluZGV4T2Yoa2V5KSA8IDApIHJldHVybjtcbiAgICBjb25zdCBkaXZpbmZvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocG9wdWxhdGVzW2tleV0pO1xuICAgIGlmICghZGl2aW5mbykgcmV0dXJuO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlIFwic3RhdGVcIjpcbiAgICAgICAgZGl2aW5mby5pbm5lclRleHQgPSBqb2JTdGF0ZXNbam9iLnN0YXRlXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZXJyb3JzXCI6XG4gICAgICAgIGNvbnN0IHRyaWdnZXIgPSBkaXZpbmZvLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWFjdGlvbj1cInRvZ2dsZVwiXScpO1xuICAgICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICAgIGlmIChqb2IuZXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdHJpZ2dlci5jbGFzc0xpc3QuYWRkKGNzcy5oaWRlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJpZ2dlci5jbGFzc0xpc3QucmVtb3ZlKGNzcy5oaWRlKTtcbiAgICAgICAgICAgIHRyaWdnZXIuY2xpY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGlzcGxheV9lcnJvcnMoam9iLmVycm9ycywgam9iLnN0YXRlKTtcbiAgICAgICAgY29uc3QgbGlzdCA9IGNyZWF0ZV9ib3goJ3VsJywge30sIGNyZWF0ZV9ib3goJ2RpdicsIHtcbiAgICAgICAgICBjbGFzczogKGRpdmluZm8uZGF0YXNldC50YXJnZXQpID8gZGl2aW5mby5kYXRhc2V0LnRhcmdldC5yZXBsYWNlKCcuJywgJycpIDogXCJjb2xsYXBzZWVycm9yc1wiXG4gICAgICAgIH0sIGRpdmluZm8pKTtcbiAgICAgICAgam9iLmVycm9ycy5mb3JFYWNoKGVycm9yID0+IHtcbiAgICAgICAgICBjb25zdCBsaSA9IGNyZWF0ZV9ib3goJ2xpJywge1xuICAgICAgICAgICAgdGV4dDogZXJyb3JcbiAgICAgICAgICB9LCBsaXN0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZGl2aW5mby5pbm5lclRleHQgPSAoam9iW2tleV0pID8gam9iW2tleV0gOiAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gIH1cblxuICBmdW5jdGlvbiBkaXNwbGF5X2luZm9zKGpvYikge1xuICAgIHNwaW5uZXJfaWNvbihqb2Iuc3RhdGUpO1xuICAgIHByb2dyZXNzX2Jhcihqb2Iuc3RhdGUsIGpvYi5wcm9ncmVzc19wY3QsIGpvYi5wcm9ncmVzc19tc2cpO1xuICAgIE9iamVjdC5rZXlzKHBvcHVsYXRlcykuZm9yRWFjaChpbmZvID0+IHtcbiAgICAgIHNldF9qb2JpbmZvKGpvYiwgaW5mbyk7XG4gICAgfSk7XG4gIH1cbiAgbGV0IGh0bWwgPSBbXTtcblxuICBmdW5jdGlvbiBjaGVja19qb2Jfc3RhdHVzKCkge1xuICAgIGZldGNoKG9wdGlvbnMudXJsICsgam9iaWQsIGZldGNoU2V0dGluZ3MpLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKS50aGVuKGpvYiA9PiB7XG5cbiAgICAgIGlmIChqb2IpIHtcbiAgICAgICAgaWYgKGpvYi5zdGF0ZSkge1xuICAgICAgICAgIGRpc3BsYXlfaW5mb3Moam9iKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoam9iLnN0YXRlKSB7XG4gICAgICAgICAgY2FzZSBcIkFcIjpcbiAgICAgICAgICAgIC8vIHF1ZXN0aW9uXG4gICAgICAgICAgICBzdG9wID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vd2luZG93LmxvY2F0aW9uLmhyZWYgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgXCIvSm9iL1F1ZXN0aW9uL1wiICsgam9iLmlkO1xuICAgICAgICAgICAgcmVzcG9uc2VkaXYuaW5uZXJIVE1MID0gYFF1ZXN0aW9uIHdhaXRpbmcgZm9yIGFuIGFuc3dlciBgICsgZ29fbmV4dCh3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgXCIvSm9iL1F1ZXN0aW9uL1wiICsgam9iLmlkLCAnR28nLCAnd2FybmluZycpO1xuICAgICAgICAgICAgcG9wdWxhdGUoXCJxdWVzdGlvbmRhdGFcIik7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJGXCI6XG4gICAgICAgICAgICBzdG9wID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChqb2IuZmluYWxhY3Rpb24pIGh0bWwucHVzaChqb2IuZmluYWxhY3Rpb24pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkVcIjpcblxuICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiUFwiOlxuICAgICAgICAgICAgLy8gcGVuZGluZ1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlJcIjpcbiAgICAgICAgICAgIC8vIHJ1bm5pbmdcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGpvYi5zdGF0ZSAmJiBqb2Iuc3RhdGUgPT09IFwiRVwiIHx8IGpvYi5zdGF0ZSA9PT0gJ0YnIHx8IGpvYi50eXBlID09PSBcIlByZWRpY3Rpb25cIikge1xuICAgICAgICAgIC8vICBkaXNwbGF5X2ZpbmFsKGpvYi5maW5hbGFjdGlvbik7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlZGl2KSB7XG4gICAgICAgICAgICByZXNwb25zZWRpdi5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBodG1sLmpvaW4oJycpKTtcbiAgICAgICAgICAgIHJlc3BvbnNlZGl2LmNsYXNzTGlzdC5yZW1vdmUoY3NzLmhpZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdG9wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHN0b3AgPSB0cnVlO1xuXG4gICAgICBpZiAoc3RvcCA9PT0gZmFsc2UpIHNldFRpbWVvdXQoY2hlY2tfam9iX3N0YXR1cywgMTAwMCk7XG4gICAgICByZXR1cm47XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2VycicsIGVycik7XG4gICAgfSk7XG4gIH1cbiAgY2hlY2tfam9iX3N0YXR1cygpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/modules/job-monitor.js\n")}}]);
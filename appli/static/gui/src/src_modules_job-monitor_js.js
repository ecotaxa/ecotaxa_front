/*! For license information please see src_modules_job-monitor_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_job-monitor_js"],{"./src/modules/job-monitor.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jobMonitor: () => (/* binding */ jobMonitor)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n\n\nfunction jobMonitor(item) {\n  const jobid = item.dataset.id;\n  const jobStates = {\n    E: 'Error',\n    F: 'Done',\n    R: 'Running',\n    A: 'Question',\n    P: 'Waiting'\n  }\n  if (!jobid) return;\n  const spinner = document.getElementById('spinner-icon');\n  const divstate = document.getElementById(\"divstate\");\n  let responsediv = document.getElementById(\"responsediv\");\n  if (responsediv === null) {\n    responsediv = document.createElement('div');\n    responsediv.id = 'responsediv';\n    item.prepend(responsediv);\n  }\n  let stop = false;\n  let cl = 'is-pending';\n  const progress_bar = (state, percent = 0, msg = \"\") => {\n    if (!percent) percent = 0;\n    const progressbar = document.getElementById('progressbar');\n    responsediv.textContent = msg;\n    if (divstate) divstate.textContent = msg;\n    if (progressbar !== null) {\n      progressbar.firstChild.textContent = percent + '%';\n      const progressbarsz = progressbar.querySelector('.percent');\n      if (progressbarsz) {\n        progressbarsz.classList.remove(cl);\n        cl = 'is-running';\n        switch (state) {\n          case 'E':\n            cl = 'is-error';\n            break;\n          case 'F':\n            cl = 'is-done';\n            break;\n          case 'A':\n            cl = 'is-warning';\n            break;\n        }\n        if (!progressbarsz.classList.contains(cl)) progressbarsz.classList.add(cl);\n        progressbarsz.style.width = percent + '%';\n\n      }\n    }\n  }\n  const display_errors = (errors, jobstate) => {\n    if (!errors || errors.length === 0) return;\n    if (errors.length && jobstate != 'E' && jobstate !== 'F') {\n      const divalert = responsediv.querySelector('.alert');\n      if (divalert === null) responsediv.insertAdjacentHTML('beforeend', `<div class=\"alert alert-danger inverse\" data-dismissible=\"true\">${errors.join(`<br>`)}</div> `);\n      else divalert.insertAdjacentHTML('beforeend', errors.join(`<br>`));\n    }\n  }\n  const display_next = async (url) => {\n    fetch(url, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings)()).then(response => response.text()).then(response => {\n      responsediv.insertAdjacentHTML('beforeend', response);\n    });\n\n  }\n  const go_next = (url, title, type = \"secondary\") => {\n    return `<a href=\"${url}\" class=\"button  is-${type}\">${title}</a>`;\n  }\n  const set_jobstate = (job) => {\n    if (!divstate) return;\n    divstate.innerText = jobStates[job.state];\n  }\n  let html = [];\n  const check_job_status = () => {\n\n    fetch(\"/gui/job/status/\" + jobid, _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings).then(response => response.json()).then(job => {\n\n      if (job) {\n        set_jobstate(job);\n        if (spinner) spinner.classList.remove('hidden');\n        progress_bar(job.state, job.progress_pct, job.progress_msg);\n        switch (job.state) {\n          case \"A\":\n            // question\n            stop = true;\n            if (spinner) spinner.remove();\n            //window.location.href = window.location.origin + \"/Job/Question/\" + job.id;\n            responsediv.innerHTML = `Question waiting for an answer ` + go_next(window.location.origin + \"/Job/Question/\" + job.id, 'Go', 'warning')\n            break;\n          case \"F\":\n            stop = true;\n            if (spinner) spinner.remove();\n            if (job.finalaction) html.push(job.finalaction);\n            break;\n          case \"E\":\n            if (job.errors.length) {\n              display_errors(job.errors, job.state);\n            }\n            stop = true;\n            if (spinner) spinner.remove();\n            break;\n          case \"P\":\n            // pending\n            break;\n          case \"R\":\n            // running\n            display_errors(job.errors, job.state);\n            break;\n        }\n\n        if (job.state && job.state == \"E\" || (job.state == 'F' && !job.out)) {\n          if (responsediv) {\n            responsediv.insertAdjacentHTML('afterbegin', html.join(''));\n            responsediv.classList.remove('hidden');\n          }\n          return;\n        }\n      }\n      if (stop === false) setTimeout(check_job_status, 1000);\n      return;\n    });\n  }\n  check_job_status();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9qb2ItbW9uaXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUU2Qjs7QUFFdEI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRJQUE0SSxvQkFBb0I7QUFDaEs7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdFQUFhO0FBQzVCO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsdUJBQXVCLElBQUksc0JBQXNCLEtBQUssSUFBSSxNQUFNO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQyw0REFBYTs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9qb2ItbW9uaXRvci5qcz8yMDUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGZldGNoU2V0dGluZ3MsXG59IGZyb20gJy4uL21vZHVsZXMvdXRpbHMuanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gam9iTW9uaXRvcihpdGVtKSB7XG4gIGNvbnN0IGpvYmlkID0gaXRlbS5kYXRhc2V0LmlkO1xuICBjb25zdCBqb2JTdGF0ZXMgPSB7XG4gICAgRTogJ0Vycm9yJyxcbiAgICBGOiAnRG9uZScsXG4gICAgUjogJ1J1bm5pbmcnLFxuICAgIEE6ICdRdWVzdGlvbicsXG4gICAgUDogJ1dhaXRpbmcnXG4gIH1cbiAgaWYgKCFqb2JpZCkgcmV0dXJuO1xuICBjb25zdCBzcGlubmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NwaW5uZXItaWNvbicpO1xuICBjb25zdCBkaXZzdGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGl2c3RhdGVcIik7XG4gIGxldCByZXNwb25zZWRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzcG9uc2VkaXZcIik7XG4gIGlmIChyZXNwb25zZWRpdiA9PT0gbnVsbCkge1xuICAgIHJlc3BvbnNlZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcmVzcG9uc2VkaXYuaWQgPSAncmVzcG9uc2VkaXYnO1xuICAgIGl0ZW0ucHJlcGVuZChyZXNwb25zZWRpdik7XG4gIH1cbiAgbGV0IHN0b3AgPSBmYWxzZTtcbiAgbGV0IGNsID0gJ2lzLXBlbmRpbmcnO1xuICBjb25zdCBwcm9ncmVzc19iYXIgPSAoc3RhdGUsIHBlcmNlbnQgPSAwLCBtc2cgPSBcIlwiKSA9PiB7XG4gICAgaWYgKCFwZXJjZW50KSBwZXJjZW50ID0gMDtcbiAgICBjb25zdCBwcm9ncmVzc2JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzc2JhcicpO1xuICAgIHJlc3BvbnNlZGl2LnRleHRDb250ZW50ID0gbXNnO1xuICAgIGlmIChkaXZzdGF0ZSkgZGl2c3RhdGUudGV4dENvbnRlbnQgPSBtc2c7XG4gICAgaWYgKHByb2dyZXNzYmFyICE9PSBudWxsKSB7XG4gICAgICBwcm9ncmVzc2Jhci5maXJzdENoaWxkLnRleHRDb250ZW50ID0gcGVyY2VudCArICclJztcbiAgICAgIGNvbnN0IHByb2dyZXNzYmFyc3ogPSBwcm9ncmVzc2Jhci5xdWVyeVNlbGVjdG9yKCcucGVyY2VudCcpO1xuICAgICAgaWYgKHByb2dyZXNzYmFyc3opIHtcbiAgICAgICAgcHJvZ3Jlc3NiYXJzei5jbGFzc0xpc3QucmVtb3ZlKGNsKTtcbiAgICAgICAgY2wgPSAnaXMtcnVubmluZyc7XG4gICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgICAgIGNsID0gJ2lzLWVycm9yJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0YnOlxuICAgICAgICAgICAgY2wgPSAnaXMtZG9uZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICAgIGNsID0gJ2lzLXdhcm5pbmcnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwcm9ncmVzc2JhcnN6LmNsYXNzTGlzdC5jb250YWlucyhjbCkpIHByb2dyZXNzYmFyc3ouY2xhc3NMaXN0LmFkZChjbCk7XG4gICAgICAgIHByb2dyZXNzYmFyc3ouc3R5bGUud2lkdGggPSBwZXJjZW50ICsgJyUnO1xuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IGRpc3BsYXlfZXJyb3JzID0gKGVycm9ycywgam9ic3RhdGUpID0+IHtcbiAgICBpZiAoIWVycm9ycyB8fCBlcnJvcnMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKGVycm9ycy5sZW5ndGggJiYgam9ic3RhdGUgIT0gJ0UnICYmIGpvYnN0YXRlICE9PSAnRicpIHtcbiAgICAgIGNvbnN0IGRpdmFsZXJ0ID0gcmVzcG9uc2VkaXYucXVlcnlTZWxlY3RvcignLmFsZXJ0Jyk7XG4gICAgICBpZiAoZGl2YWxlcnQgPT09IG51bGwpIHJlc3BvbnNlZGl2Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgaW52ZXJzZVwiIGRhdGEtZGlzbWlzc2libGU9XCJ0cnVlXCI+JHtlcnJvcnMuam9pbihgPGJyPmApfTwvZGl2PiBgKTtcbiAgICAgIGVsc2UgZGl2YWxlcnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBlcnJvcnMuam9pbihgPGJyPmApKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZGlzcGxheV9uZXh0ID0gYXN5bmMgKHVybCkgPT4ge1xuICAgIGZldGNoKHVybCwgZmV0Y2hTZXR0aW5ncygpKS50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICByZXNwb25zZWRpdi5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIHJlc3BvbnNlKTtcbiAgICB9KTtcblxuICB9XG4gIGNvbnN0IGdvX25leHQgPSAodXJsLCB0aXRsZSwgdHlwZSA9IFwic2Vjb25kYXJ5XCIpID0+IHtcbiAgICByZXR1cm4gYDxhIGhyZWY9XCIke3VybH1cIiBjbGFzcz1cImJ1dHRvbiAgaXMtJHt0eXBlfVwiPiR7dGl0bGV9PC9hPmA7XG4gIH1cbiAgY29uc3Qgc2V0X2pvYnN0YXRlID0gKGpvYikgPT4ge1xuICAgIGlmICghZGl2c3RhdGUpIHJldHVybjtcbiAgICBkaXZzdGF0ZS5pbm5lclRleHQgPSBqb2JTdGF0ZXNbam9iLnN0YXRlXTtcbiAgfVxuICBsZXQgaHRtbCA9IFtdO1xuICBjb25zdCBjaGVja19qb2Jfc3RhdHVzID0gKCkgPT4ge1xuXG4gICAgZmV0Y2goXCIvZ3VpL2pvYi9zdGF0dXMvXCIgKyBqb2JpZCwgZmV0Y2hTZXR0aW5ncykudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpLnRoZW4oam9iID0+IHtcblxuICAgICAgaWYgKGpvYikge1xuICAgICAgICBzZXRfam9ic3RhdGUoam9iKTtcbiAgICAgICAgaWYgKHNwaW5uZXIpIHNwaW5uZXIuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIHByb2dyZXNzX2Jhcihqb2Iuc3RhdGUsIGpvYi5wcm9ncmVzc19wY3QsIGpvYi5wcm9ncmVzc19tc2cpO1xuICAgICAgICBzd2l0Y2ggKGpvYi5zdGF0ZSkge1xuICAgICAgICAgIGNhc2UgXCJBXCI6XG4gICAgICAgICAgICAvLyBxdWVzdGlvblxuICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoc3Bpbm5lcikgc3Bpbm5lci5yZW1vdmUoKTtcbiAgICAgICAgICAgIC8vd2luZG93LmxvY2F0aW9uLmhyZWYgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgXCIvSm9iL1F1ZXN0aW9uL1wiICsgam9iLmlkO1xuICAgICAgICAgICAgcmVzcG9uc2VkaXYuaW5uZXJIVE1MID0gYFF1ZXN0aW9uIHdhaXRpbmcgZm9yIGFuIGFuc3dlciBgICsgZ29fbmV4dCh3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgXCIvSm9iL1F1ZXN0aW9uL1wiICsgam9iLmlkLCAnR28nLCAnd2FybmluZycpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiRlwiOlxuICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoc3Bpbm5lcikgc3Bpbm5lci5yZW1vdmUoKTtcbiAgICAgICAgICAgIGlmIChqb2IuZmluYWxhY3Rpb24pIGh0bWwucHVzaChqb2IuZmluYWxhY3Rpb24pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkVcIjpcbiAgICAgICAgICAgIGlmIChqb2IuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBkaXNwbGF5X2Vycm9ycyhqb2IuZXJyb3JzLCBqb2Iuc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoc3Bpbm5lcikgc3Bpbm5lci5yZW1vdmUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJQXCI6XG4gICAgICAgICAgICAvLyBwZW5kaW5nXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiUlwiOlxuICAgICAgICAgICAgLy8gcnVubmluZ1xuICAgICAgICAgICAgZGlzcGxheV9lcnJvcnMoam9iLmVycm9ycywgam9iLnN0YXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGpvYi5zdGF0ZSAmJiBqb2Iuc3RhdGUgPT0gXCJFXCIgfHwgKGpvYi5zdGF0ZSA9PSAnRicgJiYgIWpvYi5vdXQpKSB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlZGl2KSB7XG4gICAgICAgICAgICByZXNwb25zZWRpdi5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBodG1sLmpvaW4oJycpKTtcbiAgICAgICAgICAgIHJlc3BvbnNlZGl2LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdG9wID09PSBmYWxzZSkgc2V0VGltZW91dChjaGVja19qb2Jfc3RhdHVzLCAxMDAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9KTtcbiAgfVxuICBjaGVja19qb2Jfc3RhdHVzKCk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/modules/job-monitor.js\n")}}]);
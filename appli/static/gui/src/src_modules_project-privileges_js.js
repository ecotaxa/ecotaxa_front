/*! For license information please see src_modules_project-privileges_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_project-privileges_js"],{"./src/modules/form-submit.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FormSubmit: () => (/* binding */ FormSubmit)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n\n\nconst formcss = {\n  invalid: 'input-invalid',\n  inputvalidate: 'input-valid',\n}\n;\n\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.domselectors[\"captcha\"] = '.js-captcha';\n\nclass FormSubmit {\n  handlers = [];\n  form = null;\n  listener = null;\n  constructor(form, options = {}) {\n    if (!form) return;\n    if (!form.formsubmit) {\n      this.form = form instanceof HTMLElement ? form : document.querySelector(form);\n      const defaultOptions = {\n        fetch: null,\n      };\n      options = Object.assign(options, this.form.dataset);\n      this.options = Object.assign(defaultOptions, options);\n      if (!this.form) return;\n      this.tabs = this.form.querySelectorAll(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.domselectors.component.tabs.tab);\n      this.validateFields(true);\n      this.init();\n\n      form.formsubmit = this;\n    }\n    return form.formsubmit;\n  }\n  init() {\n    // init the form ( options like beforeunload etc...)\n\n    this.form.addEventListener('submit', async (e) => {\n      e.preventDefault();\n      const res = await this.submitForm();\n      return res;\n    });\n    this.specialFields();\n  }\n  specialFields() {\n    // check if there is a password confirm input\n    // add show text for password fields\n\n    this.form.querySelectorAll('input[data-match]').forEach(input => {\n      //\n      const match = input.dataset.match;\n      if (!match) return;\n      const target = document.getElementById(match);\n      if (!target) return;\n      const invalid = (input.dataset.matchinvalid) ? input.dataset.matchinvalid : \"no match\";\n      const check_match = (item, itemtarget) => {\n        const label = (input.previousElementSibling && input.previousElementSibling.tagName.toLowerCase() == 'label') ? input.previousElementSibling : null;\n        const labeltarget = (target.previousElementSibling && target.previousElementSibling.tagName.toLowerCase() == 'label') ? target.previousElementSibling : null;\n        const {\n          patternMismatch = false\n        } = item.validity;\n        const customvalidity = (patternMismatch) ? this.get_message(item, 'invalid') : ``;\n        if (item.checkValidity() === true) {\n          item.dataset.invalid = '';\n          item.setCustomValidity('');\n          if (item == input && label !== null) label.classList.remove(formcss.invalid);\n          else if (labeltarget !== null) labeltarget.classList.remove(formcss.invalid);\n          item.classList.remove(formcss.inputvalidate);\n          if (item.value !== itemtarget.value) {\n            input.setCustomValidity(invalid);\n            if (label) {\n              label.dataset.invalid = (label.dataset.invalid) ? label.dataset.invalid : invalid;\n              label.classList.add(formcss.invalid);\n            }\n            input.classList.add(formcss.inputvalidate);\n          } else {\n            input.setCustomValidity(\"\");\n            if (label) label.classList.remove(formcss.invalid);\n            input.classList.remove(formcss.inputvalidate);\n          }\n        } else {\n          item.setCustomValidity(customvalidity);\n          item.dataset.invalid = customvalidity;\n          if (label) label.classList.add(formcss.invalid);\n          item.classList.add(formcss.inputvalidate);\n        }\n        item.focus();\n      };\n      [input, target].forEach(item => {\n        item.addEventListener('keyup', (e) => {\n          const itemtarget = (item === input) ? target : input;\n          check_match(item, itemtarget);\n        });\n      });\n\n    });\n  }\n  get_message(field, type = 'invalid') {\n    if (field.checkValidity() == false) {\n      const {\n        valueMissing = true\n      } = field.validity;\n      if (valueMissing) return `* ` + ((field.dataset.required) ? field.dataset.required : ((this.form.dataset.required) ? this.form.dataset.required : 'required'));\n      else return (field.dataset[type]) ? field.dataset[type] : 'input invalid';\n    } else return '';\n  }\n\n  validateField(field, init = false) {\n\n\n\n    if (['textarea', 'input'].indexOf(field.tagName.toLowerCase()) >= 0) {\n\n    }\n\n    if (['select', 'input[type=\"checkbox\"]'].indexOf(field.tagName.toLowerCase()) >= 0) {\n      field.querySelectorAll('option:checked').forEach(option => {\n        option.value = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.decode_HTMLEntities)(dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(option.value));\n      });\n\n    } else field.value = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.decode_HTMLEntities)(dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(field.value));\n\n    const rep = field.checkValidity();\n    const label = this.getFieldLabel(field);\n    if (label) {\n      if (rep) {\n        label.classList.remove(formcss.invalid);\n      } else if (!rep) {\n        label.dataset.invalid = this.get_message(field);\n        label.classList.add(formcss.invalid);\n        window.scrollTo({\n          top: parseInt(label.offsetTop),\n          left: parseInt(label.offsetLeft),\n          behavior: 'smooth'\n        });\n      }\n    }\n    return rep;\n  }\n  getFieldLabel(field) {\n    return (field.closest('.form-box')) ? ((field.closest('.form-box').querySelector('.label')) ? field.closest('.form-box').querySelector('.label') : field.closest('.form-box').querySelector('label')) : null;\n  }\n  validateFields(init = false) {\n    //todo: complete validation foreach field type\n    let resp = true;\n    // .required input for tom-select component\n\n    [...this.form.elements].forEach(field => {\n      if (field.name) {\n        if (init === true) {\n          if (!field.dataset.listen) {\n            if (field.hasAttribute('required') && field.required) {\n              const label = this.getFieldLabel(field);\n              if (label) label.classList.add('required');\n            }\n\n            ['change', 'blur'].forEach(evt => {\n              field.addEventListener(evt, (e) => {\n                this.validateField(e.currentTarget, init);\n              });\n            });\n            field.dataset.listen = true;\n          }\n        } else resp = (resp && this.validateField(field, init));\n\n      }\n    });\n    // add/remove error class on tabs tab-control elements\n\n    this.tabs.forEach(tab => {\n      if (tab.querySelector(':invalid') || tab.querySelector(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.domselectors.component.alert.danger)) tab.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.error);\n      else tab.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.error);\n    });\n    return resp;\n  }\n\n  addHandler(handler) {\n    this.handlers.push(handler);\n  }\n  fieldEnable(enable = true) {\n    this.form.querySelectorAll('input[data-sub=\"enable\"]').forEach(input => {\n      if (enable === true) {\n        input.disabled = false;\n      } else input.disabled = true;\n    });\n  }\n\n  async submitHandler() {\n    if (!this.validateFields()) return false;\n\n    if (this.handlers.length === 0) return true;\n    let resp = true;\n    // series\n    /*  for (const handler of this.handlers) {\n          const rep = await handler()\n          resp = (resp && rep)\n      }*/\n    // concurrent\n    await Promise.all(this.handlers.map(async handler => {\n      const rep = await handler();\n      resp = (resp && rep);\n    }));\n    if (resp === true) this.handlers = [];\n    return resp;\n  }\n  // no redirection when using data-fetch\n  formFetch(format = null) {\n    const formdata = new FormData(this.form);\n    formdata[\"fetch\"] = true;\n    fetch(this.form.action, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_2__.fetchSettings)({\n        method: 'POST',\n        body: formdata,\n      }))\n      .then(response => {\n        switch (format) {\n          case \"text\":\n          case \"html\":\n            return response.text();\n            break;\n          default:\n            return response.json();\n        }\n      })\n      .then(response => {\n        this.displayResponse(response);\n      })\n      .catch(err => {\n        this.displayResponse(err, true)\n      }).finally(response => {\n        this.form.disabled = true;\n      });\n    return false;\n  }\n\n  async submitForm() {\n    this.fieldEnable();\n    if (this.validateFields(false)) {\n      const isbot = (this.form.querySelector(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.domselectors.captcha)) ? (this.form.dataset.isbot ? (this.form.dataset.isbot === true) : true) : false;\n      if (isbot === true) return false;\n      const yessubmit = await this.submitHandler();\n      if (yessubmit) {\n        if (this.options.fetch) this.formFetch(this.options.fetch);\n        else this.form.submit();\n        this.form.disabled = true;\n        return true;\n      } else return false;\n    } else return false;\n  }\n\n  displayResponse(response, error = false) {\n    const el = document.createElement('div');\n    el.insertAdjacentHTML('afterbegin', response);\n    if (error !== false) el.classList.add('is-error');\n    this.form.parentElement.insertBefore(el, this.form);\n    this.form.remove();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/form-submit.js\n")},"./src/modules/project-privileges.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectPrivileges: () => (/* binding */ ProjectPrivileges)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_form_submit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/form-submit.js */ \"./src/modules/form-submit.js\");\n/* harmony import */ var _modules_alert_boxes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/alert-boxes.js */ \"./src/modules/alert-boxes.js\");\n/* harmony import */ var _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/js-tom-select.js */ \"./src/modules/js-tom-select.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n// privileges of a project\n// line with member name , priviliege , is contact , and delete functionality\n\n\n\n\n\n\nconst codemessages = {\n  oneatleast: 'oneatleast',\n  nomanager: 'nomanager',\n  nocontact: 'nocontact',\n  uhasnopriv: 'uhasnopriv',\n  importpriverror: 'importpriverror',\n  emptyname: 'emptyname'\n}\nlet instance = null;\nclass ProjectPrivileges {\n  //TODO: rewrite to not depend on DOM select\n  options;\n  alertBox;\n  // current user id;\n  current_uid;\n  fieldset;\n  fieldset_alert_zone;\n  // unique users\n  constructor(options = {}) {\n    if (!instance) {\n      const defaultOptions = {\n        groupid: \"#section-privileges\",\n        separ: '.new-privilege',\n        addbtn: '[data-add=\"block\"]',\n        target: 'member',\n        ident: 'member',\n        privilege: 'privilege',\n        delet: 'delet',\n        contact: 'contact',\n        contactfieldname: 'contact_user_id',\n        domselectors: {\n          tabcontent: '.tab-content'\n        }\n      };\n      this.options = Object.assign({}, defaultOptions, options);\n      this.fieldset = document.querySelector(this.options.groupid);\n      if (!this.fieldset) return;\n      this.fieldset_alert_zone = this.fieldset.querySelector(this.options.domselectors.tabcontent) ? this.fieldset.querySelector(this.options.domselectors.tabcontent) : this.fieldset;\n      this.options.separ = this.options.separ instanceof HTMLElement ? this.options.separ : (document.querySelector(this.options.separ) ? document.querySelector(this.options.separ) : null);\n      this.options.addbtn = this.options.addbtn instanceof HTMLElement ? this.options.addbtn : document.querySelector(this.options.addbtn);\n      if (this.options.addbtn) this.addListener();\n      const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n      this.current_uid = this.fieldset.dataset.u;\n      this.alertBox = new _modules_alert_boxes_js__WEBPACK_IMPORTED_MODULE_2__.AlertBox();\n      lines.forEach((line) => {\n        this.activateEvents(line);\n      });\n\n      //remove deleted , clean && validate datas , format names before sending the form\n      const form = this.fieldset.closest('form');\n      const formSubmit = new _modules_form_submit_js__WEBPACK_IMPORTED_MODULE_1__.FormSubmit(form);\n      // handler - verify privileges before settings form submit\n      const submit_privileges = async () => {\n        const resp = await this.cleanPrivileges();\n        return resp;\n      }\n      formSubmit.addHandler(submit_privileges);\n      instance = this;\n    }\n    return instance;\n  }\n\n  newLine(ret = false, check = 0) {\n    let line;\n    if (check > 0) {\n      line = this.getLinePrivilege(check);\n      if (line) return line;\n    }\n    const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n\n    if (lines.length === 0) return;\n    const n = lines.length - 1;\n    line = lines[n];\n    if (line !== null) {\n      line = this.clearLine(line.cloneNode(true), n, (this.options.separ ? this.options.separ : line));\n\n      this.activateEvents(line);\n\n    }\n    if (ret === true) return line;\n  }\n\n  addListener() {\n    this.options.target = (this.options.addbtn.dataset.target) ? this.options.addbtn.dataset.target : this.options.target;\n    this.options.addbtn.addEventListener('click', async (e) => {\n      e.preventDefault();\n      this.newLine();\n    })\n  }\n\n  clearLine(line, n, separ = null) {\n    /*clean line element */\n\n    let has_autocomplete = null;\n    line.dataset.mod = '';\n    line.disabled = false;\n    const elems = line.querySelectorAll('[data-elem]');\n    elems.forEach((elem) => {\n      // change loop index - necessary for tailwindcss peerchecked to work otherwise not if name ends with []\n      //remove components\n      const rms = elem.querySelectorAll('[data-component]')\n      rms.forEach((rm) => {\n        switch (rm.dataset.component) {\n          case 'tom-select':\n            rm.remove();\n            break;\n        }\n      })\n      // clean and reset events\n      const els = elem.querySelectorAll('input, select, label');\n      els.forEach((el) => {\n\n        el.disabled = false;\n        if (separ) { // change names and id when adding a new row - not if clear only\n          const keys = ['id', 'for', 'aria-controls', 'name'];\n          keys.forEach((key) => {\n            let val = el.getAttribute(key);\n            if (val !== null) {\n              if (key === 'name') val = val.replace('[' + n + ']', '[' + (n + 1) + ']');\n              else val = val.replace('_' + n, '_' + (n + 1));\n              el.setAttribute(key, val);\n            }\n          });\n        }\n        switch (el.tagName.toLowerCase()) {\n          case 'input':\n            //el.indeterminate = true;\n            el.checked = false;\n            // disable contact as privilege is empty\n            if (el.name == this.options.contactfieldname) {\n              el.value = \"0\";\n              el.disabled = true;\n            }\n            break;\n          case 'select':\n            el.selectedIndex = -1;\n            break;\n          case 'label':\n            el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.peerchecked);\n            break;\n        }\n        if (el.tomselect) {\n          has_autocomplete = el;\n          el.tomselect.clear();\n          el.tomselect.destroy();\n\n        }\n        if (el.classList.contains(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.component.autocomplete.tomselected)) {\n          has_autocomplete = el;\n          el.classList.forEach(cl => {\n            if (cl.indexOf('ts-') == 0) el.classList.remove(cl);\n          })\n          el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.component.autocomplete.tomselected);\n          if (el.type == \"select-one\") delete el.type;\n\n        }\n\n      })\n\n    })\n    /* add functionnalities */\n    if (separ) {\n      line.classList.add('new');\n      separ.after(line);\n    }\n    /* clear and add tom-select functionalities - only after adding line to the dom*/\n    if (has_autocomplete !== null) {\n      const jsTomSelect = new _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_3__.JsTomSelect();\n      jsTomSelect.applyTo(has_autocomplete);\n      has_autocomplete.tomselect.clearOptions();\n      let options = this.fieldset.dataset.options;\n      options = (options) ? options : [];\n      has_autocomplete.tomselect.addOptions(options);\n    };\n\n\n    return line;\n  }\n\n  setLine(line, mb = {\n    key: '',\n    value: ''\n  }, priv, ct) {\n\n    priv = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges[priv] ? _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges[priv] : _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges.viewers;\n    if (!priv) return;\n    const {\n      member,\n      privs,\n      contact,\n      delet\n    } = this.getInputs(line, priv);\n    if (!member || !privs || !contact || !delet) return;\n\n    // sanitize\n    mb.key = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(mb.key);\n    mb.value = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(mb.value);\n    const ts = member.tomselect;\n    if (ts) {\n      ts.clear();\n      const addmb = {}\n      addmb[ts.settings.valueField] = mb.key;\n      addmb[ts.settings.labelField] = addmb[ts.settings.searchField] = mb.value;\n      ts.addOption(addmb);\n      ts.setValue([mb.key]);\n    } else {\n      const selected = member.querySelector('select option[value=\"' + mb.key + '\"]');\n      if (selected) selected.selected = true;\n      else member.insertAdjacentHTML('beforeend', '<option value=\"' + mb.key + '\" selected>' + mb.value + '</option>');\n\n    }\n    privs.checked = true;\n    contact.value = mb.key;\n    if (priv === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.rights.manage) {\n      contact.disabled = false;\n      if (ct === true) contact.checked = true;\n\n    } else {\n      contact.disabled = true;\n      contact.checked = false;\n    }\n\n  }\n  getInputs(line, priv = false) {\n    const member = line.querySelector(\"[name*='[\" + this.options.ident + \"]']\");\n    let privs;\n    if (priv) {\n      privs = line.querySelector('input[name*=\"[' + this.options.privilege + ']\"][value=\"' + priv + '\"]');\n    } else privs = line.querySelectorAll('input[name*=\"[' + this.options.privilege + ']\"]');\n    const contact = line.querySelector('input[name=\"' + this.options.contactfieldname + '\"]');\n    const delet = line.querySelector(\"input[name*='[\" + this.options.delet + \"]']\");\n\n    return {\n      member: member,\n      privs: privs,\n      contact: contact,\n      delet: delet\n    };\n  }\n  async importPrivileges(privileges, replace = false, contact = null, importedtag = null, dismiss = null) {\n    let lastline = !replace;\n\n    try {\n      Object.entries(privileges).forEach(([priv, members]) => {\n        members.forEach((member) => {\n          if (!lastline) lastline = this.clearAll(true, ((replace === true) ? member.id : null));\n          else lastline = this.newLine(true, member.id);\n          if (lastline) {\n            this.setLine(lastline, {\n              key: member.id,\n              value: member.name,\n            }, priv, (contact !== null && (parseInt(contact.id) === parseInt(member.id))));\n            if (importedtag) importedtag(lastline);\n\n          }\n\n        });\n\n      });\n      if (dismiss) dismiss();\n      this.alertBox.dismissAlert(codemessages.importpriverror);\n      return true;\n    } catch (err) {\n      await this.alertBox.build({\n        dismissible: true,\n        message: codemessages.importpriverror,\n        codeid: true,\n        parent: this.fieldset_alert_zone,\n        type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.danger,\n      });\n      console.log('err', err);\n      return false;\n    }\n  }\n  activateEvents(line) {\n    if (!line) return;\n    const {\n      member,\n      privs,\n      contact,\n      delet\n    } = this.getInputs(line);\n    if (!member || !privs || !contact || !delet) {\n      return;\n    }\n    const siblings = s => [...s.parentElement.children].filter(c => c.nodeType == 1 && c != s && c.classList.contains('row') && c.dataset.block !== null && c.dataset.block === this.options.target);\n\n    // enable/disable contact when privilege changes\n    const lineSettings = (pr, ct, dl, synchro = false) => {\n\n      if (pr && pr.value === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.rights.manage) {\n        // manager - can't delete line - can choose as contact\n        dl.disabled = true;\n        ct.disabled = false;\n        // dismiss related alert\n        this.alertBox.dismissAlert(codemessages.nomanager);\n        if (ct.checked) {\n          this.alertBox.dismissAlert(codemessages.nocontact);\n        }\n      } else {\n        // not manager - can delet line - cannot chose as contact\n        //  if (ct.checked === true) ct.dispatchEvent(new Event('click'));\n        ct.checked = false;\n        dl.disabled = false;\n        ct.disabled = true;\n      }\n\n      if (synchro === true) {\n        synchroSiblings(line);\n      }\n      // dismiss alerts\n      if (!dl.ckecked) {\n        this.alertBox.dismissAlert(codemessages.nobody);\n        this.alertBox.dismissAlert(codemessages.oneatleast);\n      }\n    }\n    const synchroSiblings = (line) => {\n      const lns = siblings(line);\n      lns.forEach((ln) => {\n        const dl = ln.querySelector(\"input[name*='[\" + this.options.delet + \"]']\");\n        const ct = ln.querySelector('input[name=\"' + this.options.contactfieldname + '\"]');\n        const pr = ln.querySelector('input[name*=\"[' + this.options.privilege + ']\"]:checked');\n        lineSettings(pr, ct, dl, false);\n\n      })\n    }\n\n    member.addEventListener('change', (e) => {\n      contact.value = member.value;\n      // dismiss alert\n      if (member.value) {\n        this.alertBox.dismissAlert(codemessages.emptyname);\n        this.alertBox.dismissAlert(codemessages.oneatleast);\n        this.alertBox.dismissAlert(codemessages.nobody);\n      }\n    })\n\n    privs.forEach((priv) => {\n      priv.addEventListener('change', (e) => {\n        if (priv.checked) lineSettings(priv, contact, delet, false);\n      });\n\n      if (priv.checked) lineSettings(priv, contact, delet, false);\n    })\n\n    contact.addEventListener('change', (e) => {\n      if (e.target.checked) delet.disabled = true;\n      else delet.disabled = false;\n      const priv = line.querySelector('input[name*=\"[' + this.options.privilege + ']\"]:checked');\n      lineSettings(priv, contact, delet, true);\n      // enable otherwise\n\n    })\n\n    // delet ok for all when new line\n    //\n    delet.addEventListener('click', (e) => {\n      // at least one priv line\n      const deletlabel = delet.closest('label');\n      const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]:not([data-mod=\"remove\"])');\n      if (lines.length <= 1 && e.target.checked) {\n        delet.disabled = true;\n        delet.checked = false;\n        this.alertBox.build({\n          dismissible: true,\n          message: codemessages.oneatleast,\n          codemessage: codemessages.oneatleast,\n          type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.warning,\n          parent: (e.currentTarget.id || null)\n        });\n        return;\n      } else if (e.target.checked) {\n        this.alertBox.dismissAlert(codemessages.oneatleast);\n        if (line.classList.contains('new')) {\n          line.remove();\n        } else {\n          if (deletlabel && deletlabel.dataset.restore) deletlabel.setAttribute('title', deletlabel.dataset.restore);\n          line.setAttribute('data-mod', 'remove');\n          privs.forEach(priv => {\n            priv.disabled = true;\n            priv.checked = false;\n          })\n          contact.checked = false;\n          contact.disabled = true;\n          member.disabled = true;\n        }\n      } else {\n        if (deletlabel && deletlabel.dataset.remove) deletlabel.setAttribute('title', deletlabel.dataset.remove);\n        line.removeAttribute('data-mod');\n        privs.forEach(priv => priv.disabled = false);\n        contact.disabled = false;\n        member.disabled = false;\n      }\n    });\n    // delet mouseover - explain why it is disabled when manage is checked\n    delet.addEventListener('mouseover', (e) => {\n      if (e.target.disabled) {\n        let pr = line.querySelector('input[name*=\"[' + this.options.privilege + ']\"]:checked');\n        if (!pr) return;\n        pr = pr.value.toLowerCase()\n        e.target.title = (e.target.dataset[pr]) ? e.target.dataset[pr] : e.target.title\n      }\n    })\n    // disable delet if user is the only manager\n    if (this.current_uid === member.value) delet.disabled = true;\n\n\n  }\n\n  // send clean data on submit\n  async cleanPrivileges() {\n    // check managers and contact_user_id on submit\n\n    const checkContact = async () => {\n      // check if one manager at least\n      const managers = this.fieldset.querySelectorAll('[name*=\"[' + this.options.privilege + ']\"][value=\"' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.rights.manage + '\"]:checked');\n      let n = managers.length;\n\n      if (n === 0) {\n        await this.alertBox.build({\n          dismissible: true,\n          message: codemessages.nomanager,\n          codeid: true,\n          type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.danger,\n          parent: this.fieldset_alert_zone,\n        });\n        this.tabError(true);\n        return false;\n      } else {\n        this.alertBox.dismissAlert(codemessages.nomanager);\n        this.tabError(false);\n      }\n      // check contact\n      const contact = this.fieldset.querySelector('[name=\"' + this.options.contactfieldname + '\"]:checked');\n\n      if (contact === null) {\n        await this.alertBox.build({\n          dismissible: true,\n          codeid: true,\n          message: codemessages.nocontact,\n          type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.danger,\n          parent: this.fieldset_alert_zone\n        });\n        this.tabError(true);\n        return false;\n      }\n      this.alertBox.dismissAlert(codemessages.nocontact);\n      this.tabError(false);\n      return true;\n    }\n    const hasMember = (line) => {\n      const member = line.querySelector('[name*=\"[' + this.options.ident + ']\"]');\n      return (member.value);\n    }\n    const hasPriv = (line) => {\n      const priv = line.querySelector('[name*=\"[' + this.options.privilege + ']\"]:checked');\n      if (priv && priv.value) return true;\n      return false;\n    }\n    const formatPrivilege = (line) => {\n\n      const els = line.querySelectorAll('[name*=\"members[\"');\n      els.forEach((el) => {\n        let name = el.name;\n        name = name.split('[');\n        name.pop();\n        el.name = name.join('[');\n        if (el.name.indexOf('[' + this.options.privilege + ']') > 0) {\n          el.type = 'checkbox';\n          el.classList.add('hidden');\n        }\n\n      })\n    }\n    const hascontact = await checkContact();\n    if (hascontact === true) {\n      const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n      let n = lines.length;\n      let verif = true;\n      for (const line of lines) {\n        if (line.dataset.mod && line.dataset.mod === 'remove') {\n          if (n > 1) {\n            line.remove();\n            n--;\n          } else return false;\n        } else if (!hasMember(line)) {\n          const lineno = line.querySelector('[name*=\"[' + this.options.ident + ']\"]');\n          lineno.focus();\n          if (lineno.tomselect) lineno.tomselect.focus();\n          await this.alertBox.build({\n            dismissible: true,\n            insertafter: true,\n            message: codemessages.emptyname,\n            codeid: true,\n            type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.warning,\n            parent: line\n          });\n          const resp = false; // no confimbox just wait for user action\n          // callback when confirmbox response is chosen if 'confirm'\n          if (resp === true) {\n            if (n > 1) {\n              line.remove();\n              n--;\n            } else return false;\n\n          } else return false;\n        } else if (!hasPriv(line)) {\n          this.alertBox.dismissAlert(codemessages.emptyname);\n          await this.alertBox.build({\n            dismissible: true,\n            insertafter: true,\n            codeid: true,\n            message: codemessages.uhasnopriv,\n            type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.warning,\n            parent: line\n          });\n          verif = false;\n        } else this.alertBox.dismissAlert(codemessages.uhasnopriv);\n      }\n      if (!verif) return verif;\n      for (const line of lines) {\n        formatPrivilege(line);\n      }\n\n      if (n === 0) {\n        await this.alertBox.build({\n          dismissible: true,\n          codeid: true,\n          message: codemessages.nobody,\n          type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.alertconfig.warning,\n          parent: this.fieldset_alert_zone\n        });\n        return false;\n      } else this.alertBox.dismissAlert(codemessages.nobody);\n      return true;\n    } else return false;\n  }\n  getLinePrivilege(id) {\n    let privilege = null;\n    const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]')\n    for (const line of lines) {\n      if (parseInt(line.querySelector('[name*=\"[' + this.options.ident + ']\"]').value) === parseInt(id)) {\n        privilege = line;\n        break;\n      }\n    }\n\n    return privilege;\n  }\n  clearAll(ret = false, replaceid = null) {\n    let lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n    let keepindex = -1;\n    lines.forEach((line, index) => {\n      const {\n        member,\n        privs,\n        contact,\n        delet\n      } = this.getInputs(line);\n      if (this.current_uid === member.value || parseInt(replaceid) === parseInt(member.value)) keepindex = index;\n      if (index > 0 || (keepindex > 0 && keepindex !== index)) line.remove();\n    });\n    //\n    const line = this.newLine(true);\n    // if (keepindex > 0) {\n    //  lines[0].remove();\n    //}\n    if (ret === true) return line;\n  }\n\n  tabError(on) {\n    const tab = (this.fieldset.classList.contains(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.tabs.tab.substr(1))) ? this.fieldset : ((this.fieldset.parentElement.classList.contains(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.tabs.tab.substr(1))) ? this.fieldset.parentElement : null);\n    if (tab === null) return;\n    if (on === true) tab.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.error);\n    else tab.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.error);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/project-privileges.js\n")}}]);
/*! For license information please see src_modules_project-privileges_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_project-privileges_js"],{"./src/modules/project-privileges.js":(module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectPrivileges: () => (/* binding */ ProjectPrivileges)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.es.mjs\");\n/* harmony import */ var _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/alert-box.js */ \"./src/modules/alert-box.js\");\n/* harmony import */ var _modules_form_submit_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/form-submit.js */ \"./src/modules/form-submit.js\");\n/* harmony import */ var _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/js-tom-select.js */ \"./src/modules/js-tom-select.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__, _modules_form_submit_js__WEBPACK_IMPORTED_MODULE_2__, _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_3__]);\n([_modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__, _modules_form_submit_js__WEBPACK_IMPORTED_MODULE_2__, _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// privileges of a project\n// line with member name , priviliege , is contact , and delete functionality\n\n\n\n\n\n\nconst dynamics = {};\n//add local selector\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.memberline = '[data-block=\"member\"]';\nclass ProjectPrivileges {\n  //TODO: rewrite to not depend on DOM select\n  options;\n  // current user id;\n  keymessages = {\n    oneatleast: 'oneatleast',\n    nomanager: 'nomanager',\n    nocontact: 'nocontact',\n    uhasnopriv: 'uhasnopriv',\n    importpriverror: 'importpriverror',\n    emptyname: 'emptyname'\n  };\n  current_uid;\n  fieldset;\n  fieldset_alert_zone;\n  linemodel;\n  currentlist = {};\n  // unique users\n  constructor(item, options = {}) {\n    if (item === null || (item instanceof HTMLElement === false)) return;\n    if (!item.jsprivileges) {\n      const defaultOptions = {\n        separ: '.new-privilege',\n        addbtn: '[data-add=\"block\"]',\n        target: 'member',\n        ident: 'member',\n        privilege: 'privilege',\n        delet: 'delet',\n        contact: 'contact',\n        contactfieldname: 'contact_user_id',\n        domselectors: {\n          tabcontent: '.tab-content'\n        }\n      };\n      this.options = Object.assign({}, defaultOptions, options);\n      // attach messages for fields and alerts system\n      this.fieldset = item;\n      if (!this.fieldset) return _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.error();\n      this.fieldset_alert_zone = item.querySelector(this.options.domselectors.tabcontent) ? item.querySelector(this.options.domselectors.tabcontent) : item;\n      this.options.separ = this.options.separ instanceof HTMLElement ? this.options.separ : (document.querySelector(this.options.separ) ? document.querySelector(this.options.separ) : null);\n      this.options.addbtn = this.options.addbtn instanceof HTMLElement ? this.options.addbtn : document.querySelector(this.options.addbtn);\n      if (this.options.addbtn) this.addListener();\n      const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n      if (lines.length === 0) return _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.error();\n      this.linemodel = lines[0];\n\n      this.linecontainer = lines[0].parentElement;\n      if (this.linecontainer === null) return _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.error();\n      this.current_uid = this.fieldset.dataset.u;\n      lines.forEach((line, i) => {\n        line.dataset.n = i;\n        this.activateEvents(line);\n      });\n      // add messaging functionalities\n      const form = this.fieldset.closest('form');\n      if (form) {\n        if (form.formsubmit) {\n          form.formsubmit.addHandler('validate', () => {\n             return this.validateFields();\n          });\n          form.formsubmit.addHandler('submit', () => {\n            return this.formatPrivileges();\n          });\n        } else form.addEventListener('submit', async (e) => {\n          const resp = this.validateFields();\n          if (resp === false) e.preventDefault();\n          else return this.formatPrivileges();\n        });\n      };\n      this.orderRows();\n      item.jsprivileges = this;\n    }\n    return item.jsprivileges;\n  }\n\n  newLine(ret = false, check = 0, replace = false) {\n    const lines = this.linecontainer.querySelectorAll(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.memberline);\n    let newline;\n    if (lines.length && check > 0) newline = this.getLinePrivilege(check);\n    if (newline) {\n      if (replace === true) return newline;\n      else return null;\n    }\n    const clone = this.linemodel.cloneNode(true);\n    if (clone.dataset.hasOwnProperty(\"model\")) delete clone.dataset.model;\n    newline = this.clearLine(clone, 0, -1);\n    newline.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n    if (newline) {\n      const nn = (this.fieldset.dataset.n) ? parseInt(this.fieldset.dataset.n) + 1 : lines.length;\n      this.linecontainer.append(newline);\n      newline = this.clearLine(newline, -1, nn, (this.options.separ ? this.options.separ : null));\n      newline.dataset.n = nn;\n      this.fieldset.dataset.n = nn;\n      this.activateEvents(newline, (check === 0));\n      if (ret === true) return newline;\n    }\n    return null;\n  }\n\n  addListener() {\n    this.options.target = (this.options.addbtn.dataset.target) ? this.options.addbtn.dataset.target : this.options.target;\n    this.options.addbtn.addEventListener('click', async (e) => {\n      e.preventDefault();\n      this.newLine();\n    })\n  }\n  indexElement(el, n, nn) {\n    // order is important\n    const keys = ['id', 'name', 'for', 'aria-controls'];\n    keys.forEach((key) => {\n      let val = el.getAttribute(key);\n      if (val !== null) {\n        if (key === 'name') val = val.replace('[' + n + ']', '[' + (nn) + ']');\n        else val = val.replace('_' + n, '_' + (nn));\n        el.setAttribute(key, val);\n      }\n    });\n    return el;\n  }\n  indexLine(line, n, nn = null) {\n    nn = (nn === null) ? n + 1 : nn;\n    const elems = line.querySelectorAll('[data-elem]');\n    elems.forEach((elem) => {\n      // change loop index - necessary for tailwindcss peerchecked to work otherwise not if name ends with []\n      // clean and reset events\n      const els = elem.querySelectorAll('input, select, label, div');\n      els.forEach((el) => {\n        if (n !== null) el = this.indexElement(el, n, nn);\n      });\n    });\n    line.dataset.n = parseInt(nn);\n    this.fieldset.dataset.n = (this.fieldset.dataset.n && this.fieldset.dataset.n >= nn) ? this.fieldset.dataset.n : nn;\n    return line;\n  }\n  clearLine(line, n = null, nn = null, separ = null) {\n    /*clean line element */\n    line.dataset.mod = '';\n    line.disabled = false;\n    const elems = line.querySelectorAll('[data-elem]');\n    elems.forEach((elem) => {\n      // change loop index - necessary for tailwindcss peerchecked to work otherwise not if name ends with []\n      // clean and reset events\n      const els = elem.querySelectorAll('input, select, label, div');\n      els.forEach((el) => {\n        if (!el.dataset.hasOwnProperty('readnly')) el.disabled = false;\n        if (n !== null) { // change names and id when adding a new row - not if clear only\n          nn = (nn === null) ? n + 1 : nn;\n          el = this.indexElement(el, n, nn);\n        }\n        switch (el.tagName.toLowerCase()) {\n          case 'input':\n            el.checked = false;\n            // disable contact as privilege is empty\n            if (el.name == this.options.contactfieldname) {\n              el.value = \"0\";\n              el.disabled = true;\n            }\n            break;\n          case 'select':\n            // remove options except the first one with select\n            Array.from(el.options).forEach(option => {\n              if (parseInt(option.value) > 0) option.remove();\n            });\n            // todo shoulkd have been removed\n            el.selectedIndex = 0;\n            if (!el.tomselect) {\n              ['tom-select', 'tomselected', 'ts-hidden-accessible'].forEach(cl => {\n                el.classList.remove(cl);\n              });\n            } else el.tomselect.destroy();\n            break;\n          case 'div':\n            if (n !== null && el.dataset.component) el.remove();\n            break;\n        }\n\n      })\n\n    })\n    /* add functionnalities */\n    if (separ) {\n      line.classList.add('new');\n      separ.after(line);\n    }\n\n    return line;\n  }\n\n  setLine(line, mb = {\n    key: '',\n    value: ''\n  }, priv, ct) {\n\n    priv = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges[priv] ? _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges[priv] : _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges.viewers;\n    if (!priv) return;\n    const {\n      member,\n      privs,\n      contact,\n      delet\n    } = this.getInputs(line, priv);\n\n    if (!member || !privs || !contact || !delet) return;\n    // sanitize\n    mb.key = dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sanitize(mb.key);\n    mb.value = dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sanitize(mb.value);\n\n    let option = member.querySelector('option[value=\"' + mb.key + '\"]');\n    if (option === null) {\n      option = document.createElement('option');\n      option.value = mb.key;\n      option.text = mb.value;\n      member.append(option);\n    }\n    option.selected = true;\n    if (!member.tomselect) {\n      _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_3__.JsTomSelect.applyTo(member);\n    }\n    privs.checked = true;\n    contact.value = mb.key;\n    if (priv === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.rights.manage) {\n      contact.disabled = false;\n      if (ct === true && !contact.checked) contact.checked = true;\n    } else {\n      contact.disabled = true;\n      contact.checked = false;\n    }\n\n  }\n  getInputs(line, priv = false) {\n    const member = line.querySelector(\"[name*='[\" + this.options.ident + \"]']\");\n    let privs;\n    if (priv) {\n      privs = line.querySelector('input[name*=\"[' + this.options.privilege + ']\"][value=\"' + priv + '\"]');\n    } else privs = line.querySelectorAll('input[name*=\"[' + this.options.privilege + ']\"]');\n    const contact = line.querySelector('input[name=\"' + this.options.contactfieldname + '\"]');\n    const delet = line.querySelector(\"input[name*='[\" + this.options.delet + \"]']\");\n    return {\n      member: member,\n      privs: privs,\n      contact: contact,\n      delet: delet\n    };\n  }\n  async importPrivileges(privileges, replace = false, contact = null, importedtag = null, dismiss = null) {\n    if (replace === true) this.clearAll();\n    try {\n      Object.entries(privileges).forEach(([priv, members]) => {\n        members.forEach((member) => {\n          const lastline = this.newLine(true, member.id);\n          if (lastline) {\n            this.setLine(lastline, {\n              key: member.id,\n              value: member.name,\n            }, priv, (contact !== null && (contact.id === member.id)));\n            if (importedtag) importedtag(lastline);\n          }\n          replace = false;\n        });\n      });\n      if (dismiss) dismiss();\n      _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.dismissAlert(this.keymessages.importpriverror);\n\n      this.orderRows();\n      return true;\n    } catch (err) {\n      _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.addAlert({\n        type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.error,\n        content: this.keymessages.importpriverror,\n        dismissible: true,\n        inverse: true\n      });\n      console.log('err', err);\n      return false;\n    }\n  }\n  activateEvents(line, ts = false) {\n    if (!line) return;\n    const {\n      member,\n      privs,\n      contact,\n      delet\n    } = this.getInputs(line);\n    if (!member || !privs || !contact || !delet) {\n      return;\n    }\n\n    const siblings = s => [...s.parentElement.children].filter(c => c.nodeType == 1 && c != s && c.classList.contains('row') && c.dataset.block !== null && c.dataset.block === this.options.target);\n    // activate tom select if needed\n    // enable/disable contact when privilege changes\n    if (!member.currentlist) member.currentlist = this.currentlist;\n    if (member.value && !this.currentlist[member.value]) this.currentlist[member.value] = true;\n    if (ts === true && !member.tomselect) {\n      _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_3__.JsTomSelect.applyTo(member);\n    }\n    const lineSettings = (pr, ct, dl, synchro = false) => {\n      if (pr && pr.checked) {\n        pr.checked = true;\n        if (_modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.hasMessage(line)) _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.removeMessage({\n          type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.danger,\n          parent: line,\n          content: this.keymessages.uhasnopriv\n        });\n      }\n      if (pr && pr.value === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.rights.manage) {\n        // manager - can't delete line - can choose as contact\n        dl.disabled = true;\n        ct.disabled = false;\n        _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.dismissAlert(this.keymessages.nomanager);\n        if (ct.checked) {\n          _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.dismissAlert(this.keymessages.nocontact);\n          ct.dispatchEvent(new Event('valid'));\n        }\n      } else {\n        // not manager - can delet line - cannot chose as contact\n        ct.checked = false;\n        dl.disabled = false;\n        ct.disabled = true;\n      }\n\n      if (synchro === true) {\n        synchroSiblings(line);\n      }\n      // dismiss alerts\n      if (!dl.ckecked) {\n        _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.dismissAlert(this.keymessages.nobody);\n        if (_modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.hasMessage(line)) _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.removeMessage({\n          type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.danger,\n          parent: line,\n          content: this.keymessages.oneatleast\n        });\n      }\n    }\n    const synchroSiblings = (line) => {\n      const lns = siblings(line);\n      lns.forEach((ln) => {\n        const dl = ln.querySelector(\"input[name*='[\" + this.options.delet + \"]']\");\n        const ct = ln.querySelector('input[name=\"' + this.options.contactfieldname + '\"]');\n        const pr = ln.querySelector('input[name*=\"[' + this.options.privilege + ']\"]:checked');\n        lineSettings(pr, ct, dl, false);\n\n      })\n    }\n\n    member.addEventListener('change', (e) => {\n      contact.value = member.value;\n      if (parseInt(member.value) > 0 && _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.hasMessage(member)) _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.removeMessage({\n        type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.danger,\n        parent: member,\n        content: this.keymessages.emptyname\n      });\n    })\n    privs.forEach((priv) => {\n      if (priv.dataset.hasOwnProperty(\"readonly\")) (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_5__.input_read_only)(priv);\n      priv.addEventListener('change', (e) => {\n        if (priv.checked) lineSettings(priv, contact, delet, false);\n      });\n\n      if (priv.checked) lineSettings(priv, contact, delet, false);\n    })\n    if (contact.dataset.hasOwnProperty(\"readonly\")) (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_5__.input_read_only)(contact);\n    contact.addEventListener('change', (e) => {\n      if (contact.checked) {\n        delet.disabled = true;\n      } else delet.disabled = false;\n      const priv = line.querySelector('input[name*=\"[' + this.options.privilege + ']\"]:checked');\n      lineSettings(priv, contact, delet, true);\n      // enable otherwise\n    })\n    // delet ok for all when new line\n    //\n\n    delet.addEventListener('click', (e) => {\n      // at least one priv line\n      const deletlabel = delet.closest('label');\n      const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]:not([data-mod=\"remove\"])');\n      if (lines.length <= 1 && e.target.checked) {\n        e.preventDefault();\n        line.removeAttribute('data-mod');\n        member.disabled = false;\n        e.target.disabled = true;\n        _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.addMessage({\n          type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.danger,\n          parent: line,\n          content: this.keymessages.oneatleast,\n          duration: 3000\n        });\n        return;\n      } else if (e.target.checked) {\n        if (_modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.hasMessage(member)) _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.removeMessage({\n          type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.danger,\n          parent: member\n        });\n        if (line.classList.contains('new')) {\n          line.remove();\n        } else {\n          if (deletlabel && deletlabel.dataset.restore) deletlabel.dataset.title = deletlabel.dataset.restore;\n          line.setAttribute('data-mod', 'remove');\n          privs.forEach(priv => {\n            priv.dataset.checked = priv.checked;\n            priv.checked = false;\n            priv.disabled = true;\n          })\n          contact.checked = false;\n          contact.disabled = true;\n          member.disabled = true;\n        }\n      } else {\n        if (deletlabel && deletlabel.dataset.remove) deletlabel.dataset.title = deletlabel.dataset.remove;\n        line.removeAttribute('data-mod');\n        privs.forEach(priv => {\n          priv.disabled = false;\n          if (priv.dataset.checked === \"true\") priv.checked = true;\n          else priv.checked = false;\n        });\n\n        member.disabled = false;\n      }\n    });\n    // delet mouseover - explain why it is disabled when manage is checked\n    delet.addEventListener('mouseover', (e) => {\n      if (e.target.disabled) {\n        let pr = line.querySelector('input[name*=\"[' + this.options.privilege + ']\"]:checked');\n        if (!pr) return;\n        pr = pr.value.toLowerCase()\n        e.target.dataset.title = (e.target.dataset[pr]) ? e.target.dataset[pr] : e.target.dataset.title\n      }\n    })\n    // disable delet if user is the only manager\n    if (this.current_uid === member.value) delet.disabled = true;\n  }\n\n  validateFields(add = false) { // check managers and contact_user_id on submit\n    const check_contact = () => {\n      // check if one manager at least\n      const managers = this.fieldset.querySelectorAll('[name*=\"[' + this.options.privilege + ']\"][value=\"' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.rights.manage + '\"]:checked');\n      if (managers.length === 0) {\n        _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.addAlert({\n          type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.danger,\n          content: this.keymessages.nomanager,\n          dismissible: true,\n          inverse: true\n        });\n        this.tabError(true);\n        return false;\n      } else {\n        _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.dismissAlert(this.keymessages.nomanager);\n        this.tabError(false);\n      }\n      // check contact\n\n      const contact = this.fieldset.querySelector('[name=\"' + this.options.contactfieldname + '\"]:checked');\n      if (contact === null) {\n        _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.addAlert({\n          type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.danger,\n          content: this.keymessages.nocontact,\n          dismissible: true,\n          inverse: true\n        });\n        this.tabError(true);\n        return false;\n      }\n      _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.dismissAlert(this.keymessages.nocontact);\n      this.tabError(false);\n      return true;\n    }\n    const has_member = (member) => {\n        return (member.value && parseInt(member.value)>0);\n    }\n    const has_priv = (line) => {\n      const priv = line.querySelector('[name*=\"[' + this.options.privilege + ']\"]:checked');\n      if (priv && priv.value) return true;\n      return false;\n    }\n    const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n    let n = lines.length;\n    let verif = true;\n    for (const line of lines) {\n      const member = line.querySelector('[name*=\"[' + this.options.ident + ']\"]');\n      if (line.dataset.hasOwnProperty(\"model\") || line.dataset.mod && line.dataset.mod === 'remove') {\n        if (n > 1) {\n          line.remove();\n          n--;\n        } else return false;\n      } else {\n      if (!has_member(member)) {\n        _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.addMessage({\n          type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.danger,\n          parent: member,\n          content: this.keymessages.emptyname\n        });\n        member.focus();\n        const resp = false; // no confimbox just wait for user action\n        // callback if confirmbox response is chosen if 'confirm'\n        if (resp === true) {\n          if (n > 1) {\n            line.remove();\n            n--;\n          } else return false;\n        } else return false;\n      }\n\n      if (!has_priv(line)) {\n        _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.addMessage({\n          type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.danger,\n          parent: line,\n          content: this.keymessages.uhasnopriv\n        });\n        verif = false;\n      }  else if (_modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.hasMessage(line)) {\n        _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.removeMessage({\n          type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.danger,\n          parent: line,\n          content: this.keymessages.uhasnopriv\n        });\n      }\n      }\n    }\n    if (n === 0) {\n      _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.addAlert({\n        type: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.alertconfig.types.danger,\n        content: this.keymessages.nobody,\n        dismissible: true,\n        inverse: true\n      });\n      return false;\n    } else _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_1__.AlertBox.dismissAlert(this.keymessages.nobody);\n    const hascontact = this.fieldset.dataset.hasOwnProperty(\"readonly\") || check_contact();\n    return (hascontact && verif);\n  }\n\n  formatPrivileges() {\n    const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n    const format_privilege = (line) => {\n      const els = line.querySelectorAll('[name*=\"members[\"');\n      els.forEach((el) => {\n        let name = el.name;\n        name = name.split('[');\n        name.pop();\n        el.name = name.join('[');\n        if (el.name.indexOf('[' + this.options.privilege + ']') > 0) {\n          el.type = 'checkbox';\n          el.classList.add('hidden');\n        }\n\n      });\n    }\n    lines.forEach(line => {\n      format_privilege(line);\n    });\n    return true;\n  }\n\n\n  getLinePrivilege(id) {\n    let privilege = null;\n    const lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]')\n    for (const line of lines) {\n      if (parseInt(line.querySelector('[name*=\"[' + this.options.ident + ']\"]').value) === parseInt(id)) {\n        privilege = line;\n        break;\n      }\n    }\n\n    return privilege;\n  }\n  clearAll() {\n    let lines = this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]');\n    lines.forEach((line, index) => {\n      line.remove();\n    });\n\n  }\n  orderRows() {\n    const lines = Array.from(this.fieldset.querySelectorAll('[data-block=\"' + this.options.target + '\"]'));\n    if (lines.length > 2) {\n      try {\n        const rightssorted = Object.values(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.rights);\n        lines.sort((linea, lineb) => {\n          const a = this.getInputs(linea);\n          const b = this.getInputs(lineb);\n          const nameb = new String(b.member.options[b.member.selectedIndex].text).toLowerCase().split(' ')\n          const namea = new String(a.member.options[a.member.selectedIndex].text).toLowerCase().split(' ');\n          const priva = Array.from(a.privs).filter(priv => (priv.checked));\n          const privb = Array.from(b.privs).filter(priv => (priv.checked));\n          const compa = (+!a.contact.checked) + ` ` + rightssorted.indexOf(((priva.length) ? priva[0].value : null)) + ` ` + ((namea.length > 1) ? namea.pop() + ` ` + namea[0] : namea[0]);\n          const compb = (+!b.contact.checked) + ` ` + rightssorted.indexOf(((privb.length) ? privb[0].value : null)) + ` ` + ((nameb.length > 1) ? nameb.pop() + ` ` + nameb[0] : nameb[0]);\n          if (compb > compa) return -1;\n          else if (compa > compb) return 1;\n          else return 0;\n        })\n        const clone = this.linecontainer;\n        lines.forEach((line, i) => {\n          clone.appendChild(line);\n        });\n      } catch (err) {\n        console.log('err not sorted', err);\n      }\n    }\n  }\n\n  tabError(on) {\n    const tab = (this.fieldset.classList.contains(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.tabs.tab.substr(1))) ? this.fieldset : ((this.fieldset.parentElement.classList.contains(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.tabs.tab.substr(1))) ? this.fieldset.parentElement : null);\n    if (tab === null) return;\n    if (on === true) tab.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.error);\n    else tab.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.error);\n  }\n}\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/project-privileges.js\n")}}]);
/*! For license information please see src_modules_files_js-dirtozip_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_files_js-dirtozip_js"],{"./src/modules/files/js-dirtozip.js":(module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsDirToZip: () => (/* binding */ JsDirToZip)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var fflate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fflate */ \"./node_modules/fflate/esm/browser.js\");\n/* harmony import */ var _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/module-event-emitter.js */ \"./src/modules/module-event-emitter.js\");\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! detect-browser */ \"./node_modules/detect-browser/es/index.js\");\n/* harmony import */ var _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../modules/alert-box.js */ \"./src/modules/alert-box.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__, _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_2__]);\n([_modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__, _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\nconst already_compressed = new Set([\n  'zip', 'gz', 'png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx', 'ppt', 'pptx',\n  'xls', 'xlsx', 'heic', 'heif', '7z', 'bz2', 'rar', 'gif', 'webp', 'webm',\n  'mp4', 'mov', 'mp3', 'aifc'\n]);\nconst can_be_compressed = new Set(['tsv','txt','log','csv']);\nconst accept = '.tsv,.png,.jpg, .jpeg,.zip,.gz,.7z,.bz2';\n\nfunction JsDirToZip(options = {}) {\n  const MAXSIZE = (document.querySelector('[data-max_upload_size]'))?parseInt(document.querySelector('[data-max_upload_size]').dataset['max_upload_size']):1073741824;//681574400;//681574400; // 650M //1073741824; //4294967296; //// 3221225472; // 2147483648;\n  const UPLOADINPARTS = (document.querySelector('[data-uploadinparts]'))?true:false;\n  const eventnames = {\n    ready: 'ready',\n    follow: 'follow',\n    complete: 'complete',\n    endreaddir: 'endreaddir',\n    gzip: 'gzip',\n    endzip: 'endzip',\n    sendfile: 'sendfile',\n    bigfile: 'bigfile',\n    terminate: 'terminate',\n    pending: 'pending',\n    errorfile: 'errorfile',\n    counter: 'counter',\n    reject: 'reject',\n    message: 'message',\n    error: 'error',\n    init: 'init',\n    setuploadpath:'setuploadpath'\n  };\n  let jsScanDir, properties,uploadpath;\n  let trydelete=0;\n  const defaultOptions = {\n    uploadurl: '/gui/files/upload',\n    largefile: MAXSIZE,\n    accept: accept.split(',')\n  }\n  // uses https://developer.mozilla.org/en-US/docs/Web/API/File_System_API/Origin_private_file_system\n  //# alternative (not supported in Safari) for .createWritable\n  options = { ...defaultOptions,\n    ...options\n  };\n  // other module receiving events\n  const _listener = (options.listener) ? options.listener : uuid;\n  Object.freeze(options);\n  const uuid = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.generate_uuid)();\n  initStorage();\n  init();\n\nfunction browserRequired() {\nconst browser = (0,detect_browser__WEBPACK_IMPORTED_MODULE_3__.detect)();\n     const accepted={android:{chrome:109,opera:74,firefox:111,samsungbrowser:21,webview:109}, ios:false,other:{chrome:86,edge:86,opera:72,firefox:111}};\n        let os =browser.os.toLowerCase();\n        os=(os in ['android','ios'])?os:'other';\n     const name=browser.name.toLowerCase();\n     const version = parseInt(browser.version.split('.')[0]);\n     if (Object.keys(accepted).indexOf(os)<0 || Object.keys(accepted[os]).indexOf(name)<0 || parseInt(accepted[os][name])>parseInt(version))  {\n     _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.message, {\n          id: \"browser\",\n          name: \"browser\",\n          message: \"your browser does not have a required functionnality. Please upgrade or use a valid browser and version :\"+  JSON.stringify(accepted).replaceAll('\"',''),\n        }, _listener);\n     }\n     }\n  function init() {\n    properties = initProps();\n     _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.setuploadpath, async(e) => {\n    uploadpath=e.path;},uuid);\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.init, async (e) => {\n      if (!isActive()) {\n        await reset();\n        _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, {\n          name: eventnames.ready\n        }, _listener);\n          _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.message, {\n          name: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_2__.AlertBox.alertconfig.types.success,\n          message: \"Upload of \"+ e.path +\" is done\",\n        }, _listener);\n        properties.endreaddir = false;\n      } else console.log('partly finished '+properties.hashandlers+ 'follow='+properties.follow, e);\n    }, uuid);\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.endzip, async(e) => {\n      if (!e.bigfile && properties.zip) properties.zip.end();\n      const evtsend=async function() {\n      const zipclosed = await listStorage(null,properties.zipname);\n      if (zipclosed === true) {\n      const message = buildMessage(e, {\n        name: eventnames.sendfile,      });\n\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, message, _listener);}\n      else setTimeout(async function() {await evtsend();},2000);}\n      evtsend();\n    }, uuid);\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.sendfile, async (e) => {\n      if (properties.hashandlers) {\n        const message = buildMessage(e, {\n            name: eventnames.follow,\n        });\n        _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.follow, message, _listener);\n        await execHandler();\n      } else { const message = buildMessage(e, {\n        name: eventnames.pending,\n      });\n\n        _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, message, _listener);\n      }\n\n      const file = await getFile();\n      sendZipFile(file, (e.path ? e.path : uploadpath), null);\n    }, uuid);\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.endreaddir, (e) => {\n      properties.endreaddir = true;\n      checkProcessed(e);\n    }, uuid);\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.counter, async (e) => {\n      properties.endcounter = false;\n      properties.counter[e.name] += 1;\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.counter, e, _listener);\n      if (e.name === 'zip' && properties.counter.scan === properties.counter.zip) {\n        properties.endcounter = true;\n        checkProcessed(e);\n      }\n      if (e.name === 'zip' && properties.callback) await properties.callback();\n    }, uuid);\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.error,  (e) => {});\n  }\n\n  function initProps() {\n    return {\n      zip: null,\n      zipname: null,\n      filestream: null,\n      streamhandle: null,\n      gzipped: null,\n      sizetozip: 0,\n      part: 0,\n      follow: null,\n      endcounter: false,\n      endreaddir: false,\n      callback: null,\n      pos: 0,\n      counter: {\n        scan: 0,\n        zip: 0,\n        reject: 0,\n        error:0,\n      },\n      handlers: [],\n      hashandlers:false,\n     }\n  }\n  async function reset() {\n    properties = initProps();\n    await initStorage();\n  }\n\n  function isActive() {\n    return (properties.zip !== null || properties.follow !== null || properties.hashandlers || properties.endreaddir !== true);\n  }\n\n  async function initZip() {\n    properties.pos = 0;\n    properties.sizetozip = 0;\n    properties.zip = new fflate__WEBPACK_IMPORTED_MODULE_4__.Zip((error, chunk, final) => {\n      if (error) {\n        onError(eventnames.errorfile, {\n                message: error}, _listener);\n        return false;\n      } else {\n        properties.streamhandle.write(chunk, {\n          at: self.pos\n        });\n        properties.pos += chunk.length;\n        if (final) {\n          properties.streamhandle.close();\n        }\n      }\n    });\n    // hack for memory usage\n    zipOnData();\n    if (properties.follow) await properties.follow();\n  }\n\n  function checkProcessed(e) {\n    if (properties.endreaddir === true) {\n    if(properties.endcounter === true) {\n      const message = buildMessage(e, {\n       name: eventnames.endzip\n      });\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, message, _listener);\n    }  else if (properties.counter.error>0) endProcess();}\n  }\n\n  function zipOnData(zip = null) {\n    zip = (zip === null) ? properties.zip : zip;\n    const ondata = zip.ondata;\n    zip.ondata = (error, data, final) => {\n      ondata(error, data, final);\n      if (final) {\n        zip.d = null;\n        if (zip.u && zip.u.at(-1)) zip.u.at(-1).d = null; // Object created in `zip.add()`\n      }\n    }\n  }\n\n  function buildMessage(e, message = {}) {\n    if (e.hasOwnProperty(\"part\")) {\n      message.part = e.part;\n    } else properties.part = 0;\n    if (e.hasOwnProperty(\"bigfile\")) message.bigfile = e.bigfile;\n    if (e.hasOwnProperty(\"path\")) message.path = e.path;\n    return message;\n  }\n\n  async function quotaEstimate() {\n    if (navigator && navigator.storage && navigator.storage.estimate) {\n      navigator.storage.estimate().then((quota) => {\n        const percentageUsed = ((quota.usage / quota.quota) * 100).toFixed(2);\n        const remaining = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.format_bytes)(quota.quota - quota.usage);\n        _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.message, {\n          id: \"quota\",\n          name: \"console\",\n          message: \"you've used \" + percentageUsed + \"% of the available browser storage necessary to locally compress files (\" + remaining + \").\",\n        }, _listener);\n      });\n    }\n  }\n\n  async function initStorage() {\n    if (navigator && navigator.storage && navigator.storage.estimate) {\n      await cleanStorage();\n      quotaEstimate();\n    } else _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.message, {\n      name: \"error\",\n      message: \"no navigator storage\"\n    }, uuid);\n  }\n\n  async function createLocalStream(name, accept = {\n    'application/zip': ['.zip'],\n  }) {\n    const root = await navigator.storage.getDirectory();\n    const opts = {\n      types: [{\n        description: 'Temp file',\n        accept: accept,\n      }, ],\n      create: true\n    };\n    const filestream = await root.getFileHandle(name, opts);\n    const streamhandle = await filestream.createWritable({mode:\"exclusive\"});\n    return {\n      filestream,\n      streamhandle\n    };\n  }\n  async function scanCommon(zipname, options = {}) {\n    properties.endreaddir = false;\n    if (properties.zip === null) {\n      zipname = zipname.split(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator)[0];\n      zipname = (zipname.trim() === ``) ? 'temp' : zipname;\n      const type = (options && options.type) ? options.type : '.zip';\n      properties.zipname = ((options.zipname) ? options.zipname : zipname) + type; //\n      const zipinstorage = await searchStorage(properties.zipname);\n      if (zipinstorage) properties.zipname = '1_' + properties.zipname;\n      const {\n        filestream,\n        streamhandle\n      } = await createLocalStream(properties.zipname);\n      properties.filestream = filestream;\n      properties.streamhandle = streamhandle;\n      let size = 0;\n      properties.part = 0;\n      await initZip();\n      if (!jsScanDir) {\n        const {\n          JsScanDir\n        } = await __webpack_require__.e(/*! import() */ \"src_modules_files_js-scandir_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../files/js-scandir.js */ \"./src/modules/files/js-scandir.js\"));\n        const process_file = async (entry, callback) => {\n          if (acceptFile(entry)) {\n            properties.callback = callback;\n            await processFile(entry);\n          } else rejectFile(entry, callback);\n        }\n        jsScanDir = JsScanDir(process_file);\n      }\n    }\n  }\n\n  async function scanBrowse(pick, options = {}) {\n    const entries = (pick instanceof FileList) ? Array.from(pick) : (pick.kind === \"directory\") ? await Array.fromAsync(pick.values()): (Array.isArray(pick)) ? pick : [pick];\n    const name = entries[0].name;\n    let relpath = (pick instanceof FileList) ? entries[0].webkitRelativePath : null;\n    relpath = (relpath) ? relpath.split(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) : [``];\n    if (relpath.length) relpath.pop();\n    relpath = relpath.join(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator);\n    const path = (pick instanceof FileList) ? relpath : (pick.kind === \"directory\") ? pick.name : ``;\n    await scanCommon(path, options);\n    await jsScanDir.processEntries(entries, path, () => {\n      dirComplete();\n    });\n  }\n\n  async function scanHandle(dropped, options = {}) {\n    await scanCommon(dropped.name, options);\n    if (dropped.isDirectory === true) {\n      await jsScanDir.readDirectory(dropped, () => {\n        dirComplete();\n      });\n    } else if (dropped.isFile === true) {\n      await jsScanDir.processFile(dropped, () => {\n        dirComplete();\n      });\n    }\n  }\n\n  function dirComplete() {\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.endreaddir, {\n      name: eventnames.endreaddir\n    }, uuid);\n  }\n\n  function addHandler(handler) {\n    properties.handlers.push(handler);\n    properties.hashandlers= (properties.handlers.length>0)\n  }\n\n  async function execHandler() {\n    // serie\n    if (properties.hashandlers) {\n      const handler = properties.handlers.shift();\n      await handler();\n     properties.hashandlers = (properties.handlers.length>0)\n    }\n    return;\n  }\n    async function gzipBigFile(file, filepath) {\n    let dt = Date.now();\n    filepath = (filepath.indexOf(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) === 0) ? filepath.substr(1) : filepath;\n    const parts = filepath.split(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator);\n    parts.pop();\n    const sendpath = uploadpath + _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator +parts.join(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator);\n    const ext = file.name.slice(file.name.lastIndexOf('.') + 1);\n    if (already_compressed.has(ext)) {\n       _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.counter, {\n        name: 'zip',\n        path: filepath,\n        bigfile:file.name,\n        size: file.size\n      }, uuid);\n      addHandler(async () => {\n        await sendChunk(sendpath,file);\n      });\n    } else {\n      let zipname = file.name + '.gz';\n      const {\n        filestream,\n        streamhandle\n      } = await createLocalStream(zipname, {\n        'application/gzip': ['.gz'],\n      });\n      let pos = 0;\n\n      const gzipped = new fflate__WEBPACK_IMPORTED_MODULE_4__.AsyncGzip({\n        level: 6,\n        filename: filepath\n      });\n      gzipped.ondata = (err, data, final) => {\n       if(pos > MAXSIZE)  {\n                properties.counter.error+=1;\n              onError(_modules_alert_box_js__WEBPACK_IMPORTED_MODULE_2__.AlertBox.alertconfig.types.error, {\n\n                name:_modules_alert_box_js__WEBPACK_IMPORTED_MODULE_2__.AlertBox.alertconfig.types.error,\n                bigfile:file.name,\n                path:filepath,\n                message:'File '+file.name+' size exceeds maxsize. Cannot be sent in chunks for the moment.'}, _listener);\n          streamhandle.close();gzipped.ondata= (err, data, final) => {}; return endProcess();\n          }\n        if (err) {\n            properties.counter.error+=1;\n          onError(_modules_alert_box_js__WEBPACK_IMPORTED_MODULE_2__.AlertBox.alertconfig.types.error, {\n            name:_modules_alert_box_js__WEBPACK_IMPORTED_MODULE_2__.AlertBox.alertconfig.types.error,\n            bigfile: file.name,\n            path: filepath,\n            size: file.size,\n            message: 'Error compressing file '+ file.name +' '+err\n          });\n        } else {\n          streamhandle.write(data, {\n            at: pos\n          });\n          pos += data.length;\n          if (final) {\n            streamhandle.close();\n                 filepath+='.gz';\n                _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.counter, {\n              name: 'zip',\n              path: filepath,\n              size: file.size,\n              bigfile:file.name\n            }, uuid);\n\n         addHandler(async () => {\n         await sendChunk(sendpath,filestream);\n            });\n          }\n        }\n      };\n      const count = false;\n      await readFile(file, filepath, gzipped, count);\n    }\n  }\n  async function partZip() {\n    properties.part += 1;\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, {\n     name: eventnames.endzip,\n      part: properties.part\n    }, _listener);\n  }\n  async function readFile(file, filepath, zippedstream, count = true) {\n    const reader = file.stream().getReader();\n    let pause = false;\n    /*  onBackpressure(zippedstream, this.streamhandle, should_apply_backpressure => {\n        if (should_apply_backpressure) pause = true;\n        else if (pause) pause = false;\n      });*/\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) {\n        zippedstream.push(new Uint8Array(0), true);\n        if (count === true) _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.counter, {\n          name: 'zip',\n          path: filepath,\n          size: (zippedstream.size) ? zippedstream.size : file.size\n        }, uuid);\n        break;\n      }\n      zippedstream.push(value);\n    }\n  }\n\n  async function zipStream(file, filepath) {\n    const ext = filepath.slice(filepath.lastIndexOf('.') + 1);\n    const iscompressed = already_compressed.has(ext);\n    const zippedstream = (iscompressed) ? new fflate__WEBPACK_IMPORTED_MODULE_4__.ZipPassThrough(filepath) : file.size > options.largefile ?\n      new fflate__WEBPACK_IMPORTED_MODULE_4__.AsyncZipDeflate(filepath, {\n        level: 6,\n      }) : new fflate__WEBPACK_IMPORTED_MODULE_4__.ZipDeflate(filepath, {\n        level: 6\n      });\n      properties.zip.add(zippedstream);\n    await readFile(file, filepath, zippedstream);\n  }\n  function compressed_estimate(file) {\n    const ext = file.name.slice(file.name.lastIndexOf('.') + 1);\n    if (can_be_compressed.has(ext)) return Math.floor(file.size/2);\n    return file.size;\n  }\n  async function addFileToZipStream(file, filepath, count = true) {\n    if (count === true) _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.counter, {\n      name: 'scan',\n      path: filepath,\n      size: file.size\n    }, uuid);\n    properties.follow = null;\n\n    // check file size > max post size\n    const compressed_size = compressed_estimate(file);\n    if (compressed_size >= MAXSIZE ) {\n    // to prevent errors and uncomplete zip send error\n      properties.counter.error+=1;\n      if(UPLOADINPARTS) gzipBigFile(file, filepath);\n      else endProcess();\n    } else {\n      // check zip file size > total zip size\n      properties.sizetozip += compressed_size;\n      if (properties.sizetozip > MAXSIZE) {\n      if(UPLOADINPARTS) {\n      properties.follow = async () => {\n          await zipStream(file, filepath);\n        }\n        partZip();\n        } else endProcess();\n      } else {\n        await zipStream(file, filepath);\n      }\n    }\n  }\n\n  function acceptFile(entry) {\n    const filepath = entry.name;\n    const ext = filepath.slice(filepath.lastIndexOf('.') + 1);\n    return accept.includes(ext);\n  }\n\n  function rejectFile(file, callback = null) {\n    const path = (file.fullPath) ? file.fullPath : file.webkitRelativePath;\n    properties.counter.reject += 1;\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.reject, {\n      name: eventnames.reject,\n      path: path,\n    }, _listener);\n    if (callback !== null) callback();\n  }\n  async function processFile(entry) {\n    const entrypath = (entry.fullPath) ? entry.fullPath : entry.webkitRelativePath;\n    entry.file(async file => {\n      await addFileToZipStream(file, entrypath);\n    });\n  }\n\n  function onError(action, message = null) {\n    message = (message) ? message : {};\n    switch (action) {\n      case eventnames.init:\n      case eventnames.errorfile:\n        message.name=action;\n        break;\n      default:\n        //message.name = eventnames.error;\n        break;\n    }\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.message, message, _listener);\n  }\n  async function searchStorage(search) {\n    const entry = await navigator.storage.getDirectory();\n    for await (const [key, value] of entry.entries()) {\n      if (search === key) {\n        return true;\n        break;\n      }\n    }\n    return false;\n  }\n  async function cleanStorage(entry = null) {\n    entry = (entry) ? entry : await navigator.storage.getDirectory();\n     for await (const [key, value] of entry.entries()) {\n      try {\n        await entry.removeEntry(key);\n        console.log(' Success remove storage ', key);\n      } catch (error) {\n        console.log(' error remove storage ' + key, error);\n        }\n      }\n    }\nasync function listStorage(entry = null,name=null) {\n    entry = (entry) ? entry : await navigator.storage.getDirectory();\n    let rep=true;\n     for await (const [key, value] of entry.entries()) {\n        if (name!==null) {\n            const parts = key.split('.');\n            if (parts.pop()==='crswap' && parts.join('.') ===name) {\n            rep=false;\n            break;\n            }\n        }\n        }\n      return rep;\n    }\n  async function endFetch(message, clean = false) {\n    if (properties.follow) {\n      properties.streamhandle = await properties.filestream.createWritable({mode:\"exclusive\"});\n      message.name = eventnames.follow;\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.follow, message, _listener);\n      await initZip();\n      return;\n    } else properties.zip = null;\n    if (!properties.hashandlers) {message.name = eventnames.terminate;_modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, message, _listener);}\n  }\n\n  async function sendChunk(path,gzipped, start = 0, chunknum = 0, chunksize = MAXSIZE) {\n    const ext = gzipped.name.slice(gzipped.name.lastIndexOf('.') + 1);\n    const file = (already_compressed.has(ext))?gzipped:await gzipped.getFile();\n    const end = Math.min(start + chunksize, file.size);\n    if (end === file.size) {\n    path=path.replace(file.name,'');\n     sendZipFile(file, path, null, true);\n    } else {\n        properties.counter.error+=1;\n    onError(eventnames.errorfile, {\n          name: eventnames.error,\n          message:'File '+path+_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator+file.name+' size exceeds capacity. Chunk functionality not supported for the moment.'\n        }, _listener);\n    return endProcess() ;\n    // for the moment ecotaxaback does not support chunks\n      const partfile = file.slice(start, end);\n      partfile.name = chunknum + '_' + file.name;\n      await sendZipFile(partfile, path, async () => {\n        start += end;\n        chunknum++;\n        if (start <= file.size) await sendChunk(path, gzipped,start, chunknum, chunksize);\n      }, true)\n    }\n    return chunknum;\n  }\n  async function getFile(filestream = null) {\n    filestream = (filestream === null) ? properties.filestream : filestream;\n    const file = await filestream.getFile();\n    return file;\n  }\n  async function sendZipFile(file, path, callbackchunk = null, bigfile = false) {\n  if(properties.counter.error>0) return endProcess();\n    const message = {\n      name: eventnames.pending,\n      bigfile:bigfile,\n      path: path\n    }\n    const formdata = new FormData();\n    path = path + ((path.slice(-1) === _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) ? `` : _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) + file.name;\n    formdata.append('path', path);\n    formdata.append('file', file, file.name);\n    if (properties.part) formdata.append('part', properties.part);\n    else if (callbackchunk !== null) formdata.append('ischunk', true);\n    message.path = path;\n    const response = await fetch(options.uploadurl, {\n      //  mode: 'cors',\n      method: \"POST\",\n      credentials: \"include\",\n      body: formdata,\n    });\n    const body=await response.text();\n      if (response.ok) {\n      if (callbackchunk) {\n        await callbackchunk();\n      } else { if(!bigfile || !properties.hashandlers)  await endFetch(message);\n       if (bigfile) {message.name=eventnames.follow;\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.follow, message, _listener);\n      } }\n      } else {\n        properties.follow=null;\n        await endFetch(message);\n         properties.counter.error+=1;\n        onError(eventnames.errorfile, message); if(bigfile || properties.hashandlers) endProcess();    }\n  }\n  function endProcess() {\n    properties.follow=null;\n    onError(eventnames.errorfile,{\n            name: _modules_alert_box_js__WEBPACK_IMPORTED_MODULE_2__.AlertBox.alertconfig.types.error,\n            message: \"Upload not done. one or more files exceeds max upload size\",\n            path:uploadpath,\n            });\n    reset().then(() => {\n        _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, {\n          name: eventnames.ready\n        }, _listener);\n        properties.endreaddir = false;  });\n    return false;\n    }\n  return {\n    uuid,\n    eventnames,\n    scanBrowse,\n    scanHandle,\n    quotaEstimate,\n    browserRequired\n  }\n}\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/files/js-dirtozip.js\n")}}]);
/*! For license information please see src_modules_files_js-dirtozip_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_files_js-dirtozip_js"],{"./src/modules/files/js-dirtozip.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsDirToZip: () => (/* binding */ JsDirToZip)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var fflate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fflate */ \"./node_modules/fflate/esm/browser.js\");\n\n\n\n\nconst already_compressed = new Set([\n  'zip', 'gz', 'png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx', 'ppt', 'pptx',\n  'xls', 'xlsx', 'heic', 'heif', '7z', 'bz2', 'rar', 'gif', 'webp', 'webm',\n  'mp4', 'mov', 'mp3', 'aifc'\n]);\nconst accept = '.tsv,.png,.jpg, .jpeg,.zip,.gz,.7z,.bz2';\nlet instance = null;\nconst MAXSIZE = 1073741824; //4294967296; //// 3221225472; // 2147483648; // 1073741824;   // ////1073741824; ////maxfilesize: 1073741824,\nclass JsDirToZip {\n  _events = {};\n  eventnames = {\n    ready: 'ready',\n    follow: 'follow',\n    endzip: 'endzip',\n    complete: 'complete',\n    endreaddir: 'endreaddir',\n    gzip: 'gzip',\n    sendfile: 'sendfile',\n    bigfile: 'bigfile',\n    terminate: 'terminate',\n    pending: 'pending',\n    errorfile: 'errorfile',\n    counter: 'counter',\n    clientcounter: 'clientcounter',\n    reject: 'reject',\n    message: 'message',\n    error: 'error',\n    init: 'init'\n  }\n\n  // uses https://developer.mozilla.org/en-US/docs/Web/API/File_System_API/Origin_private_file_system\n  //# alternative (not supported in Safari) for .createWritable\n  constructor(options = {}) {\n    if (instance) return instance;\n    const defaultOptions = {\n      uploadurl: '/gui/files/upload',\n      largefile: MAXSIZE, // 1073741824, // 2147483648, // //4294967296, // 4194304,\n      accept: accept.split(',')\n    }\n    this.options = { ...defaultOptions,\n      ...options\n    };\n    this.init();\n    instance = this;\n    return instance;\n  }\n  init() {\n    (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.add_custom_events)(this);\n    this.initProps();\n    this.on(this.eventnames.init, async (e) => {\n      //  if (!e.bigfile && !e.part) {\n      if (this.isActive() === false) {\n        console.log('reset terminate event end')\n        await this.reset();\n        this.emit(this.eventnames.complete, {\n          name: this.eventnames.ready\n        });\n        this.endreaddir = false;\n      } else console.log(' partly finshed ', e);\n    });\n    this.on(this.eventnames.endzip, (e) => {\n\n      if (!e.bigfile && this.zip) {\n        this.zip.end();\n      } else if (e.bigfile && this.gzipped) {\n        console.log(' -------------------------gzipped end ', this.gzipped);\n      }\n      const message = this.buildMessage(e, {\n        name: this.eventnames.sendfile,\n      });\n      console.log('endzip%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', message)\n      this.emit(this.eventnames.complete, message);\n    });\n\n    this.on(this.eventnames.sendfile, async (e) => {\n      const file = (e.bigfile) ? await this.gzipped.getFile(): await this.getFile();\n      if (e.bigfile) {\n        const path = (e.path ? e.path : '').replace(e.bigfile, '');\n        this.sendChunk(path);\n      } else this.sendZipFile(file, (e.path ? e.path : ''), null);\n    });\n    this.on(this.eventnames.bigfile, (e) => {\n      console.log('onsendchunk', e)\n      const path = (e.path ? e.path : '').replace(e.bigfile, '');\n      this.sendChunk(path);\n    });\n    this.on(this.eventnames.endreaddir, (e) => {\n      this.endreaddir = true;\n      this.checkProcessed(e);\n    });\n    this.on(this.eventnames.counter, async (e) => {\n      this.endcounter = false;\n      this.counter[e.name] += 1;\n      this.emit(this.eventnames.clientcounter, e);\n      if (e.name === 'zip' && this.counter.scan === this.counter.zip) {\n        this.endcounter = true;\n        this.checkProcessed(e);\n      }\n      if (e.name === 'zip' && this.callback) await this.callback();\n    });\n\n  }\n\n  initProps() {\n    this.zip = null;\n    this.zipname = null;\n    this.filestream = null;\n    this.streamhandle = null;\n    this.gzipped = null;\n    this.sizetozip = 0;\n    this.part = 0;\n    this.continue = null;\n    this.endcounter = false;\n    this.counter = {\n      scan: 0,\n      zip: 0,\n      reject: 0\n    }\n    this.handlers = [];\n  }\n\n  async reset() {\n    this.initProps();\n    await this.initStorage();\n  }\n  isActive() {\n    return (this.zip !== null || this.continue !== null || this.gzipped !== null || this.endreaddir !== true);\n  }\n  async initZip() {\n    const self = this;\n    this.pos = 0;\n    this.sizetozip = 0;\n    console.log('==================newzip');\n    this.zip = new fflate__WEBPACK_IMPORTED_MODULE_1__.Zip((error, chunk, final) => {\n      if (error) {\n        console.log('error', error);\n        return false;\n      } else {\n        self.streamhandle.write(chunk, {\n          at: self.pos\n        });\n        self.pos += chunk.length;\n        if (final) {\n          self.streamhandle.close();\n          console.log('final-----------------------------*******************************-', self.pos);\n\n        }\n\n      }\n    });\n    // hack for memory usage\n    this.zipOnData();\n\n    if (this.continue) await this.continue();\n  }\n  checkProcessed(e) {\n    if (this.endreaddir === true && this.endcounter === true) {\n      const message = this.buildMessage(e, {\n        name: this.eventnames.endzip\n      });\n      this.emit(this.eventnames.complete, message);\n    }\n  }\n  zipOnData(zip = null) {\n    zip = (zip === null) ? this.zip : zip;\n    const ondata = zip.ondata;\n    zip.ondata = (error, data, final) => {\n      ondata(error, data, final);\n      if (final) {\n        zip.d = null;\n        zip.u.at(-1).d = null; // Object created in `zip.add()`\n      }\n    }\n  }\n\n  buildMessage(e, message = {}) {\n    if (e.hasOwnProperty(\"part\")) {\n      message.part = e.part;\n    } else this.part = 0;\n    if (e.hasOwnProperty(\"bigfile\")) message.bigfile = e.bigfile;\n    if (e.hasOwnProperty(\"path\")) message.path = e.path;\n    return message;\n  }\n  async quotaEstimate() {\n    if (navigator && navigator.storage && navigator.storage.estimate) {\n      navigator.storage.estimate().then((quota) => {\n        const percentageUsed = ((quota.usage / quota.quota) * 100).toFixed(2);\n        const remaining = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.format_bytes)(quota.quota - quota.usage);\n        this.emit(this.eventnames.message, {\n          id: \"quota\",\n          name: \"console\",\n          message: \"you've used \" + percentageUsed + \"% of the available storage (\" + remaining + \").\",\n        });\n      });\n    }\n  }\n\n  async initStorage() {\n    if (navigator && navigator.storage && navigator.storage.estimate) {\n      await this.cleanStorage();\n      this.quotaEstimate();\n    } else this.emit(this.eventnames.message, {\n      name: \"error\",\n      message: \"no navigator storage\"\n    });\n  }\n  async createLocalStream(name, accept = {\n    'application/zip': ['.zip'],\n  }) {\n    const root = await navigator.storage.getDirectory();\n    const opts = {\n      types: [{\n        description: 'Temp file',\n        accept: accept,\n      }, ],\n      create: true\n    };\n    const filestream = await root.getFileHandle(name, opts);\n    const streamhandle = await filestream.createWritable();\n    return {\n      filestream,\n      streamhandle\n    };\n  }\n  async scanCommon(zipname, options = {}) {\n    this.endreaddir = false;\n    if (this.zip === null) {\n      console.log('scancommmon zipname', zipname)\n      zipname = zipname.split(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator)[0];\n      zipname = (zipname.trim() === ``) ? 'temp' : zipname;\n      const type = (options && options.type) ? options.type : '.zip';\n      this.zipname = ((options.zipname) ? options.zipname : zipname) + type; //\n      const zipinstorage = await this.searchStorage(this.zipname);\n      if (zipinstorage) this.zipname = '1_' + this.zipname;\n      const {\n        filestream,\n        streamhandle\n      } = await this.createLocalStream(this.zipname);\n      this.filestream = filestream;\n      this.streamhandle = streamhandle;\n      let size = 0;\n      this.part = 0;\n      await this.initZip();\n      if (!this.jsScanDir) {\n        const {\n          JsScanDir\n        } = await __webpack_require__.e(/*! import() */ \"src_modules_files_js-scandir_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../files/js-scandir.js */ \"./src/modules/files/js-scandir.js\"));\n        this.jsScanDir = new JsScanDir();\n      }\n      this.jsScanDir.processFile = async (entry, callback) => {\n        if (this.acceptFile(entry)) {\n          this.callback = callback;\n          await this.processFile(entry);\n        } else this.rejectFile(entry, callback);\n      }\n    }\n  }\n\n  async scanBrowse(pick, options = {}) {\n    const entries = (pick instanceof FileList) ? Array.from(pick) : (pick.kind === \"directory\") ? await Array.fromAsync(pick.values()): (Array.isArray(pick)) ? pick : [pick];\n    const name = entries[0].name;\n    let relpath = (pick instanceof FileList) ? entries[0].webkitRelativePath : null;\n    relpath = (relpath) ? relpath.split(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) : [``];\n    if (relpath.length) relpath.pop();\n    relpath = relpath.join(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator)\n    const path = (pick instanceof FileList) ? relpath : (pick.kind === \"directory\") ? pick.name : ``;\n    await this.scanCommon(path, options);\n    await this.jsScanDir.processEntries(entries, path, () => {\n      this.dirComplete();\n    });\n  }\n\n  async scanHandle(dropped, options = {}) {\n    await this.scanCommon(dropped.name, options);\n    if (dropped.isDirectory === true) {\n      await this.jsScanDir.readDirectory(dropped, () => {\n        this.dirComplete();\n      });\n    } else if (dropped.isFile === true) {\n      await this.jsScanDir.processFile(dropped, () => {\n        this.dirComplete();\n      });\n    }\n  }\n\n  dirComplete() {\n    this.emit(this.eventnames.endreaddir, {\n      name: this.eventnames.endreaddir\n    });\n  }\n  addHandler(handler) {\n    this.handlers.push(handler);\n  }\n\n  async execHandler() {\n    // serie\n    if (this.handlers.length > 0) {\n      const handler = this.handlers.shift();\n      console.log('handler', handler)\n      await handler();\n    }\n    return;\n  }\n  async gzipBigFile(file, filepath) {\n    console.log('gzipbigfilepath', filepath)\n    if (this.gzipped !== null) {\n      await this.addHandler(async () => {\n        await this.gzipBigFile(file, filepath);\n      });\n      return;\n    }\n    this.dt = Date.now();\n    filepath = (filepath.indexOf(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) === 0) ? filepath.substr(1) : filepath;\n    /*filepath = filepath.split(dirseparator);\n    filepath.pop();\n    filepath = filepath.join(dirseparator);*/\n    const ext = file.name.slice(file.name.lastIndexOf('.') + 1);\n\n    if (already_compressed.has(ext)) {\n      this.gzipped = file;\n      this.emit(this.eventnames.counter, {\n        name: 'zip',\n        path: filepath,\n        size: file.size\n      });\n      this.emit(this.eventnames.complete, {\n        name: this.eventnames.bigfile,\n        bigfile: file.name,\n        path: filepath,\n      });\n    } else {\n      let zipname = file.name + '.gz';\n      this.emit(this.eventnames.complete, {\n        name: this.eventnames.gzip,\n        bigfile: file.name,\n        path: filepath,\n        size: file.size\n      });\n      console.log(' gzipp ///////////////////////////////////////////////////', filepath);\n      const {\n        filestream,\n        streamhandle\n      } = await this.createLocalStream(zipname, {\n        'application/gzip': ['.gz'],\n      });\n      let pos = 0;\n      const self = this;\n\n      const gzipped = new fflate__WEBPACK_IMPORTED_MODULE_1__.AsyncGzip({\n        level: 6,\n        filename: filepath\n      });\n      gzipped.ondata = (err, data, final) => {\n        if (err) {\n          console.log('gzip err', err);\n          this.onError(this.eventnames.errorfile, {\n            bigfile: file.name,\n            path: filepath,\n            size: file.size\n          });\n        } else {\n          streamhandle.write(data, {\n            at: pos\n          });\n          pos += data.length;\n\n          if (final) {\n            console.log('final BIGFILE%%%%%%%%%%%%%%%%%%%%' + self.eventnames.bigfile, filepath)\n\n            console.log('timetogzzip', (Date.now() - self.dt) / 1000);\n\n            streamhandle.close();\n            self.gzipped = filestream;\n            self.emit(self.eventnames.counter, {\n              name: 'zip',\n              path: filepath,\n              size: file.size\n            });\n            self.emit(self.eventnames.complete, {\n              name: self.eventnames.bigfile,\n              bigfile: file.name,\n              path: filepath\n            });\n          }\n        }\n      };\n      const count = false;\n      await this.readFile(file, filepath, gzipped, count);\n    }\n\n\n  }\n  async partZip() {\n    this.part += 1;\n    this.emit(this.eventnames.complete, {\n      name: this.eventnames.endzip,\n      part: this.part\n    });\n  }\n  async readFile(file, filepath, zippedstream, count = true) {\n    const self = this;\n    const reader = file.stream().getReader();\n    let pause = false;\n    /*  onBackpressure(zippedstream, this.streamhandle, should_apply_backpressure => {\n        if (should_apply_backpressure) pause = true;\n        else if (pause) pause = false;\n      });*/\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) {\n        zippedstream.push(new Uint8Array(0), true);\n        if (count === true) self.emit(self.eventnames.counter, {\n          name: 'zip',\n          path: filepath,\n          size: (zippedstream.size) ? zippedstream.size : file.size\n        });\n        break;\n      }\n      zippedstream.push(value);\n    }\n  }\n\n  async zipStream(file, filepath) {\n    const ext = filepath.slice(filepath.lastIndexOf('.') + 1);\n    const iscompressed = already_compressed.has(ext);\n    const zippedstream = (iscompressed) ? new fflate__WEBPACK_IMPORTED_MODULE_1__.ZipPassThrough(filepath) : file.size > this.options.largefile ?\n      new fflate__WEBPACK_IMPORTED_MODULE_1__.AsyncZipDeflate(filepath, {\n        level: 6,\n      }) : new fflate__WEBPACK_IMPORTED_MODULE_1__.ZipDeflate(filepath, {\n        level: 6\n      });\n    this.zip.add(zippedstream);\n    await this.readFile(file, filepath, zippedstream);\n  }\n\n  async addFileToZipStream(file, filepath, count = true) {\n    if (count === true) this.emit(this.eventnames.counter, {\n      name: 'scan',\n      path: filepath,\n      size: file.size\n    });\n    this.continue = null;\n    // check file size > max post size\n    if (file.size >= MAXSIZE) {\n      this.gzipBigFile(file, filepath);\n    } else {\n      // check zip file size > total zip size\n      this.sizetozip += file.size;\n      if (this.sizetozip >= MAXSIZE) {\n        this.continue = async () => {\n          await this.zipStream(file, filepath);\n        }\n        this.partZip();\n      } else {\n        await this.zipStream(file, filepath);\n      }\n    }\n  }\n\n  acceptFile(entry) {\n    const filepath = entry.name;\n    const ext = filepath.slice(filepath.lastIndexOf('.') + 1);\n    return accept.includes(ext);\n  }\n\n  rejectFile(file, callback = null) {\n    const path = (file.fullPath) ? file.fullPath : file.webkitRelativePath;\n    this.counter.reject += 1;\n    this.emit(this.eventnames.reject, {\n      name: this.eventnames.reject,\n      path: path,\n    });\n    if (callback !== null) callback();\n  }\n  async processFile(entry) {\n    const path = (entry.fullPath) ? entry.fullPath : entry.webkitRelativePath;\n    entry.file(async file => {\n      await this.addFileToZipStream(file, path);\n    });\n  }\n\n  onError(action, message = null) {\n\n    message = (message) ? message : {};\n    switch (action) {\n      case this.eventnames.init:\n        message.name = this.eventnames.init;\n        break;\n      case this.eventnames.errorfile:\n        console.log('errorfile', message);\n      default:\n        message.name = this.eventnames.follow;\n        break;\n    }\n    this.emit(this.eventnames.error, message);\n  }\n  async searchStorage(search) {\n    const entry = await navigator.storage.getDirectory();\n    for await (const [key, value] of entry.entries()) {\n      if (search === key) {\n        return true;\n        break;\n      }\n    }\n    return false;\n  }\n  async cleanStorage(entry = null) {\n    entry = (entry) ? entry : await navigator.storage.getDirectory();\n    for await (const [key, value] of entry.entries()) {\n      try {\n        await entry.removeEntry(key);\n        console.log(' Success remove storage ', key);\n      } catch (error) {\n        console.log(' error remove storage ' + key, error);\n      }\n    }\n\n  }\n\n  async endFetch(message, clean = false) {\n    message.name = this.eventnames.terminate;\n    if (this.continue) {\n      this.streamhandle = await this.filestream.createWritable();\n      message.name = this.eventnames.follow;\n      this.emit(this.eventnames.follow, message);\n      await this.initZip();\n      return;\n    } else if (message.hasOwnProperty(\"bigfile\") && message.bigfile !== false) {\n      this.gzipped = null;\n\n      if (this.handlers.length > 0) {\n        message.name = this.eventnames.follow;\n        this.emit(this.eventnames.follow, message);\n        console.log(' handlers to do', message);\n        if (this.handlers.length > 0) await this.execHandler();\n        return;\n      }\n    } else this.zip = null;\n    this.emit(this.eventnames.complete, message);\n  }\n\n  async sendChunk(path, start = 0, chunknum = 0, chunksize = MAXSIZE) {\n    console.log('send chunk ', this.gzipped)\n    const file = await this.gzipped.getFile();\n    const end = Math.min(start + chunksize, file.size);\n    if (end === file.size) {\n      this.sendZipFile(file, path, null, true);\n    } else {\n      const partfile = file.slice(start, end);\n      partfile.name = chunknum + '_' + file.name;\n      this.sendZipfile(partfile, path, () => {\n        start += end;\n        chunknum++;\n\n        if (start <= file.size) this.sendChunk(path, start, chunknum, chunksize);\n      }, true)\n    }\n    return chunknum;\n  }\n  async getFile(filestream = null) {\n    filestream = (filestream === null) ? this.filestream : filestream;\n    const file = await filestream.getFile();\n    return file;\n  }\n  async sendZipFile(file, path, callbackchunk = null, bigfile = false) {\n    const message = {\n      name: this.eventnames.pending,\n      path: path\n    }\n    if (bigfile) message.bigfile = file.name;\n    this.emit(this.eventnames.complete, message);\n    const formdata = new FormData();\n    path = path + ((path.slice(-1) === _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) ? `` : _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) + file.name;\n    formdata.append('path', path);\n    formdata.append('file', file, file.name);\n    if (this.part) formdata.append('part', this.part);\n    else if (callbackchunk !== null) formdata.append('ischunk', true);\n    fetch(this.options.uploadurl, {\n      //  mode: 'cors',\n      method: \"POST\",\n      credentials: \"include\",\n      body: formdata,\n    }).then(async (response) => {\n      console.log('response----------------------', response);\n      console.log('callbackchunk-------------------------------', callbackchunk)\n      message.path = path;\n      if (response.status !== 200) {\n        this.onError(this.eventnames.error, message);\n        return;\n      }\n      if (callbackchunk !== null) {\n        await callbackchunk();\n      } else await this.endFetch(message);\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/files/js-dirtozip.js\n")}}]);
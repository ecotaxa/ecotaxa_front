/*! For license information please see src_modules_files_js-dirtozip_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_files_js-dirtozip_js"],{"./src/modules/files/js-dirtozip.js":(module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsDirToZip: () => (/* binding */ JsDirToZip)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var fflate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fflate */ \"./node_modules/fflate/esm/browser.js\");\n/* harmony import */ var _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/module-event-emitter.js */ \"./src/modules/module-event-emitter.js\");\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! detect-browser */ \"./node_modules/detect-browser/es/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__]);\n_modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\nconst already_compressed = new Set([\n  'zip', 'gz', 'png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx', 'ppt', 'pptx',\n  'xls', 'xlsx', 'heic', 'heif', '7z', 'bz2', 'rar', 'gif', 'webp', 'webm',\n  'mp4', 'mov', 'mp3', 'aifc'\n]);\nconst accept = '.tsv,.png,.jpg, .jpeg,.zip,.gz,.7z,.bz2';\nconst MAXSIZE = 1073741824; //4294967296; //// 3221225472; // 2147483648;\nfunction JsDirToZip(options = {}) {\n  const eventnames = {\n    ready: 'ready',\n    follow: 'follow',\n    complete: 'complete',\n    endreaddir: 'endreaddir',\n    gzip: 'gzip',\n    endzip: 'endzip',\n    sendfile: 'sendfile',\n    bigfile: 'bigfile',\n    terminate: 'terminate',\n    pending: 'pending',\n    errorfile: 'errorfile',\n    counter: 'counter',\n    reject: 'reject',\n    message: 'message',\n    error: 'error',\n    init: 'init'\n  };\n  let jsScanDir, properties;\n  const defaultOptions = {\n    uploadurl: '/gui/files/upload',\n    largefile: MAXSIZE,\n    accept: accept.split(',')\n  }\n  // uses https://developer.mozilla.org/en-US/docs/Web/API/File_System_API/Origin_private_file_system\n  //# alternative (not supported in Safari) for .createWritable\n  options = { ...defaultOptions,\n    ...options\n  };\n  // other module receiving events\n  const _listener = (options.listener) ? options.listener : uuid;\n  Object.freeze(options);\n  const uuid = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.generate_uuid)();\n  init();\n\nfunction browserRequired() {\nconst browser = (0,detect_browser__WEBPACK_IMPORTED_MODULE_2__.detect)();\n     const accepted={android:{chrome:109,opera:74,firefox:111,samsungbrowser:21,webview:109}, ios:false,other:{chrome:86,edge:86,opera:72,firefox:111}};\n        let os =browser.os.toLowerCase();\n        os=(os in ['android','ios'])?os:'other';\n     const name=browser.name.toLowerCase();\n     const version = parseInt(browser.version.split('.')[0]);\n if ((accepted[os] && accepted[os][name] && accepted[os][name]<= version))  {\n     _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.message, {\n          id: \"browser\",\n          name: \"browser\",\n          message: \"your browser does not have a required functionnality. Please upgrade or use a valid browser and version :\"+  JSON.stringify(accepted).replaceAll('\"',''),\n        }, _listener);\n     }\n     }\n  function init() {\n    properties = initProps();\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.init, async (e) => {\n      //  if (!e.bigfile && !e.part) {\n      if (isActive() === false) {\n        await reset();\n        _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, {\n          name: eventnames.ready\n        }, _listener);\n        properties.endreaddir = false;\n      } else console.log('partly finshed ', e);\n    }, uuid);\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.endzip, (e) => {\n      if (!e.bigfile && properties.zip) properties.zip.end();\n      else if (e.bigfile && properties.gzipped) console.log('--gzipped end', properties.gzipped);\n      console.log('endzip%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');\n      const message = buildMessage(e, {\n        name: eventnames.sendfile,\n      });\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, message, _listener);\n    }, uuid);\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.sendfile, async (e) => {\n      const file = (e.bigfile) ? await properties.gzipped.getFile(): await getFile();\n      if (e.bigfile) {\n        const path = (e.path ? e.path : '').replace(e.bigfile, '');\n        sendChunk(path);\n      } else sendZipFile(file, (e.path ? e.path : ''), null);\n    }, uuid);\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.endreaddir, (e) => {\n      properties.endreaddir = true;\n      checkProcessed(e);\n    }, uuid);\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.on(eventnames.counter, async (e) => {\n      properties.endcounter = false;\n      properties.counter[e.name] += 1;\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.counter, e, _listener);\n      if (e.name === 'zip' && properties.counter.scan === properties.counter.zip) {\n        properties.endcounter = true;\n        checkProcessed(e);\n      }\n      if (e.name === 'zip' && properties.callback) await properties.callback();\n    }, uuid);\n  }\n\n  function initProps() {\n    return {\n      zip: null,\n      zipname: null,\n      filestream: null,\n      streamhandle: null,\n      gzipped: null,\n      sizetozip: 0,\n      part: 0,\n      follow: null,\n      endcounter: false,\n      endreaddir: false,\n      callback: null,\n      pos: 0,\n      counter: {\n        scan: 0,\n        zip: 0,\n        reject: 0\n      },\n      handlers: []\n    }\n  }\n  async function reset() {\n    properties = initProps();\n    await initStorage();\n  }\n\n  function isActive() {\n    return (properties.zip !== null || properties.follow !== null || properties.gzipped !== null || properties.endreaddir !== true);\n  }\n  async function initZip() {\n    properties.pos = 0;\n    properties.sizetozip = 0;\n    console.log('==================newzip');\n    properties.zip = new fflate__WEBPACK_IMPORTED_MODULE_3__.Zip((error, chunk, final) => {\n      if (error) {\n        console.log('error', error);\n        return false;\n      } else {\n        properties.streamhandle.write(chunk, {\n          at: self.pos\n        });\n        properties.pos += chunk.length;\n        if (final) {\n          properties.streamhandle.close();\n          console.log('final-----------------------------*******************************-', properties.pos);\n\n        }\n\n      }\n    });\n    // hack for memory usage\n    zipOnData();\n\n    if (properties.follow) await properties.follow();\n  }\n\n  function checkProcessed(e) {\n    if (properties.endreaddir === true && properties.endcounter === true) {\n      const message = buildMessage(e, {\n       name: eventnames.endzip\n      });\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, message, _listener);\n    }\n  }\n\n  function zipOnData(zip = null) {\n    zip = (zip === null) ? properties.zip : zip;\n    const ondata = zip.ondata;\n    zip.ondata = (error, data, final) => {\n      ondata(error, data, final);\n      if (final) {\n        zip.d = null;\n        zip.u.at(-1).d = null; // Object created in `zip.add()`\n      }\n    }\n  }\n\n  function buildMessage(e, message = {}) {\n    if (e.hasOwnProperty(\"part\")) {\n      message.part = e.part;\n    } else properties.part = 0;\n    if (e.hasOwnProperty(\"bigfile\")) message.bigfile = e.bigfile;\n    if (e.hasOwnProperty(\"path\")) message.path = e.path;\n    return message;\n  }\n\n  async function quotaEstimate() {\n    if (navigator && navigator.storage && navigator.storage.estimate) {\n      navigator.storage.estimate().then((quota) => {\n        const percentageUsed = ((quota.usage / quota.quota) * 100).toFixed(2);\n        const remaining = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.format_bytes)(quota.quota - quota.usage);\n        _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.message, {\n          id: \"quota\",\n          name: \"console\",\n          message: \"you've used \" + percentageUsed + \"% of the available storage (\" + remaining + \").\",\n        }, _listener);\n      });\n    }\n  }\n\n  async function initStorage() {\n    if (navigator && navigator.storage && navigator.storage.estimate) {\n      await cleanStorage();\n      quotaEstimate();\n    } else _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.message, {\n      name: \"error\",\n      message: \"no navigator storage\"\n    }, uuid);\n  }\n\n  async function createLocalStream(name, accept = {\n    'application/zip': ['.zip'],\n  }) {\n    const root = await navigator.storage.getDirectory();\n    const opts = {\n      types: [{\n        description: 'Temp file',\n        accept: accept,\n      }, ],\n      create: true\n    };\n    const filestream = await root.getFileHandle(name, opts);\n    const streamhandle = await filestream.createWritable();\n    return {\n      filestream,\n      streamhandle\n    };\n  }\n  async function scanCommon(zipname, options = {}) {\n    properties.endreaddir = false;\n    if (properties.zip === null) {\n      zipname = zipname.split(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator)[0];\n      zipname = (zipname.trim() === ``) ? 'temp' : zipname;\n      const type = (options && options.type) ? options.type : '.zip';\n      properties.zipname = ((options.zipname) ? options.zipname : zipname) + type; //\n      const zipinstorage = await searchStorage(properties.zipname);\n      if (zipinstorage) properties.zipname = '1_' + properties.zipname;\n      const {\n        filestream,\n        streamhandle\n      } = await createLocalStream(properties.zipname);\n      properties.filestream = filestream;\n      properties.streamhandle = streamhandle;\n      let size = 0;\n      properties.part = 0;\n      await initZip();\n      if (!jsScanDir) {\n        const {\n          JsScanDir\n        } = await __webpack_require__.e(/*! import() */ \"src_modules_files_js-scandir_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../files/js-scandir.js */ \"./src/modules/files/js-scandir.js\"));\n        const process_file = async (entry, callback) => {\n          if (acceptFile(entry)) {\n            properties.callback = callback;\n            await processFile(entry);\n          } else rejectFile(entry, callback);\n        }\n        jsScanDir = JsScanDir(process_file);\n      }\n    }\n  }\n\n  async function scanBrowse(pick, options = {}) {\n    const entries = (pick instanceof FileList) ? Array.from(pick) : (pick.kind === \"directory\") ? await Array.fromAsync(pick.values()): (Array.isArray(pick)) ? pick : [pick];\n    const name = entries[0].name;\n    let relpath = (pick instanceof FileList) ? entries[0].webkitRelativePath : null;\n    relpath = (relpath) ? relpath.split(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) : [``];\n    if (relpath.length) relpath.pop();\n    relpath = relpath.join(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator)\n    const path = (pick instanceof FileList) ? relpath : (pick.kind === \"directory\") ? pick.name : ``;\n    await scanCommon(path, options);\n    await jsScanDir.processEntries(entries, path, () => {\n      dirComplete();\n    });\n  }\n\n  async function scanHandle(dropped, options = {}) {\n    await scanCommon(dropped.name, options);\n    if (dropped.isDirectory === true) {\n      await jsScanDir.readDirectory(dropped, () => {\n        dirComplete();\n      });\n    } else if (dropped.isFile === true) {\n      await jsScanDir.processFile(dropped, () => {\n        dirComplete();\n      });\n    }\n  }\n\n  function dirComplete() {\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.endreaddir, {\n      name: eventnames.endreaddir\n    }, uuid);\n  }\n\n  function addHandler(handler) {\n    properties.handlers.push(handler);\n  }\n\n  async function execHandler() {\n    // serie\n    if (properties.handlers.length > 0) {\n      const handler = properties.handlers.shift();\n      await handler();\n    }\n    return;\n  }\n  async function gzipBigFile(file, filepath) {\n    if (properties.gzipped !== null) {\n      await addHandler(async () => {\n        await gzipBigFile(file, filepath);\n      });\n      return;\n    }\n    let dt = Date.now();\n    filepath = (filepath.indexOf(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) === 0) ? filepath.substr(1) : filepath;\n    /*filepath = filepath.split(dirseparator);\n    filepath.pop();\n    filepath = filepath.join(dirseparator);*/\n    const ext = file.name.slice(file.name.lastIndexOf('.') + 1);\n    if (already_compressed.has(ext)) {\n      properties.gzipped = file;\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.counter, {\n        name: 'zip',\n        path: filepath,\n        size: file.size\n      }, uuid);\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, {\n        name: eventnames.bigfile,\n        bigfile: file.name,\n        path: filepath,\n      }, _listener);\n    } else {\n      let zipname = file.name + '.gz';\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, {\n        name: eventnames.gzip,\n        bigfile: file.name,\n        path: filepath,\n        size: file.size\n      }, _listener);\n      const {\n        filestream,\n        streamhandle\n      } = await createLocalStream(zipname, {\n        'application/gzip': ['.gz'],\n      });\n      let pos = 0;\n\n      const gzipped = new fflate__WEBPACK_IMPORTED_MODULE_3__.AsyncGzip({\n        level: 6,\n        filename: filepath\n      });\n      gzipped.ondata = (err, data, final) => {\n        if (err) {\n          console.log('gzip err', err);\n          onError(eventnames.errorfile, {\n            bigfile: file.name,\n            path: filepath,\n            size: file.size\n          });\n        } else {\n          streamhandle.write(data, {\n            at: pos\n          });\n          pos += data.length;\n\n          if (final) {\n            console.log('final BIGFILE%%%%%%%%%%%%%%%%%%%%' + eventnames.bigfile, filepath)\n\n            console.log('timetogzzip', (Date.now() - dt) / 1000);\n\n            streamhandle.close();\n            properties.gzipped = filestream;\n            _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.counter, {\n              name: 'zip',\n              path: filepath,\n              size: file.size\n            }, uuid);\n            _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, {\n              name: eventnames.bigfile,\n              bigfile: file.name,\n              path: filepath\n            }, _listener);\n          }\n        }\n      };\n      const count = false;\n      await readFile(file, filepath, gzipped, count);\n    }\n\n\n  }\n  async function partZip() {\n    properties.part += 1;\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, {\n     name: eventnames.endzip,\n      part: properties.part\n    }, _listener);\n  }\n  async function readFile(file, filepath, zippedstream, count = true) {\n    const reader = file.stream().getReader();\n    let pause = false;\n    /*  onBackpressure(zippedstream, this.streamhandle, should_apply_backpressure => {\n        if (should_apply_backpressure) pause = true;\n        else if (pause) pause = false;\n      });*/\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) {\n        zippedstream.push(new Uint8Array(0), true);\n        if (count === true) _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.counter, {\n          name: 'zip',\n          path: filepath,\n          size: (zippedstream.size) ? zippedstream.size : file.size\n        }, uuid);\n        break;\n      }\n      zippedstream.push(value);\n    }\n  }\n\n  async function zipStream(file, filepath) {\n    const ext = filepath.slice(filepath.lastIndexOf('.') + 1);\n    const iscompressed = already_compressed.has(ext);\n    const zippedstream = (iscompressed) ? new fflate__WEBPACK_IMPORTED_MODULE_3__.ZipPassThrough(filepath) : file.size > options.largefile ?\n      new fflate__WEBPACK_IMPORTED_MODULE_3__.AsyncZipDeflate(filepath, {\n        level: 6,\n      }) : new fflate__WEBPACK_IMPORTED_MODULE_3__.ZipDeflate(filepath, {\n        level: 6\n      });\n    properties.zip.add(zippedstream);\n    await readFile(file, filepath, zippedstream);\n  }\n\n  async function addFileToZipStream(file, filepath, count = true) {\n    if (count === true) _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.counter, {\n      name: 'scan',\n      path: filepath,\n      size: file.size\n    }, uuid);\n    properties.follow = null;\n    // check file size > max post size\n    if (file.size >= MAXSIZE) {\n      gzipBigFile(file, filepath);\n    } else {\n      // check zip file size > total zip size\n      properties.sizetozip += file.size;\n      if (properties.sizetozip >= MAXSIZE) {\n        properties.follow = async () => {\n          await zipStream(file, filepath);\n        }\n        partZip();\n      } else {\n        await zipStream(file, filepath);\n      }\n    }\n  }\n\n  function acceptFile(entry) {\n    const filepath = entry.name;\n    const ext = filepath.slice(filepath.lastIndexOf('.') + 1);\n    return accept.includes(ext);\n  }\n\n  function rejectFile(file, callback = null) {\n    const path = (file.fullPath) ? file.fullPath : file.webkitRelativePath;\n    properties.counter.reject += 1;\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.reject, {\n      name: eventnames.reject,\n      path: path,\n    }, _listener);\n    if (callback !== null) callback();\n  }\n  async function processFile(entry) {\n    const path = (entry.fullPath) ? entry.fullPath : entry.webkitRelativePath;\n    entry.file(async file => {\n      await addFileToZipStream(file, path);\n    });\n  }\n\n  function onError(action, message = null) {\n    message = (message) ? message : {};\n    switch (action) {\n      case eventnames.init:\n        message.name = eventnames.init;\n        break;\n      case eventnames.errorfile:\n        console.log('errorfile', message);\n      default:\n        message.name = eventnames.follow;\n        break;\n    }\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.error, message, _listener);\n  }\n  async function searchStorage(search) {\n    const entry = await navigator.storage.getDirectory();\n    for await (const [key, value] of entry.entries()) {\n      if (search === key) {\n        return true;\n        break;\n      }\n    }\n    return false;\n  }\n  async function cleanStorage(entry = null) {\n    entry = (entry) ? entry : await navigator.storage.getDirectory();\n    for await (const [key, value] of entry.entries()) {\n      try {\n        await entry.removeEntry(key);\n        console.log(' Success remove storage ', key);\n      } catch (error) {\n        console.log(' error remove storage ' + key, error);\n      }\n    }\n\n  }\n\n  async function endFetch(message, clean = false) {\n    message.name = eventnames.terminate;\n    if (properties.follow) {\n      properties.streamhandle = await properties.filestream.createWritable();\n      message.name = eventnames.follow;\n      _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.follow, message, _listener)\n      await initZip();\n      return;\n    } else if (message.hasOwnProperty(\"bigfile\") && message.bigfile !== false) {\n      properties.gzipped = null;\n\n      if (properties.handlers.length > 0) {\n        message.name = eventnames.follow;\n        _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.follow, message, _listener);\n        console.log(' handlers to do', message);\n        if (properties.handlers.length > 0) await execHandler();\n        return;\n      }\n    } else properties.zip = null;\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, message, _listener);\n  }\n\n  async function sendChunk(path, start = 0, chunknum = 0, chunksize = MAXSIZE) {\n    console.log('send chunk ', properties.gzipped)\n    const file = await properties.gzipped.getFile();\n    const end = Math.min(start + chunksize, file.size);\n    if (end === file.size) {\n     await sendZipFile(file, path, null, true);\n    } else {\n      const partfile = file.slice(start, end);\n      partfile.name = chunknum + '_' + file.name;\n      await sendZipfile(partfile, path, async () => {\n        start += end;\n        chunknum++;\n\n        if (start <= file.size) await sendChunk(path, start, chunknum, chunksize);\n      }, true)\n    }\n    return chunknum;\n  }\n  async function getFile(filestream = null) {\n    filestream = (filestream === null) ? properties.filestream : filestream;\n    const file = await filestream.getFile();\n    return file;\n  }\n  async function sendZipFile(file, path, callbackchunk = null, bigfile = false) {\n    const message = {\n      name: eventnames.pending,\n      path: path\n    }\n    if (bigfile) message.bigfile = file.name;\n    _modules_module_event_emitter_js__WEBPACK_IMPORTED_MODULE_1__.ModuleEventEmitter.emit(eventnames.complete, message, _listener);\n    const formdata = new FormData();\n    path = path + ((path.slice(-1) === _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) ? `` : _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) + file.name;\n    formdata.append('path', path);\n    formdata.append('file', file, file.name);\n    if (properties.part) formdata.append('part', properties.part);\n    else if (callbackchunk !== null) formdata.append('ischunk', true);\n    fetch(options.uploadurl, {\n      //  mode: 'cors',\n      method: \"POST\",\n      credentials: \"include\",\n      body: formdata,\n    }).then(async (response) => {\n      console.log('response----------------------', response);\n      console.log('callbackchunk-------------------------------', callbackchunk)\n      message.path = path;\n      if (response.status !== 200) {\n        onError(eventnames.error, message);\n        return;\n      }\n      if (callbackchunk !== null) { console.log('callbackchunk not null')\n        await callbackchunk();\n      } else await endFetch(message);\n    });\n  }\n  return {\n    uuid,\n    eventnames,\n    scanBrowse,\n    scanHandle,\n    quotaEstimate,\n    browserRequired\n  }\n}\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9maWxlcy9qcy1kaXJ0b3ppcC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFhO0FBTW1COztBQVFoQjtBQUcrQjtBQUNQOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsY0FBYyxpQkFBaUI7QUFDcEQsZ0NBQWdDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0VBQWE7QUFDNUI7O0FBRUE7QUFDQSxnQkFBZ0Isc0RBQU07QUFDdEIscUJBQXFCLFNBQVMsOERBQThELG1CQUFtQjtBQUMvRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxnRkFBa0I7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnRkFBa0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsUUFBUSxnRkFBa0I7QUFDMUI7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1IsS0FBSztBQUNMLElBQUksZ0ZBQWtCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTSxnRkFBa0I7QUFDeEIsS0FBSztBQUNMLElBQUksZ0ZBQWtCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLEtBQUs7QUFDTCxJQUFJLGdGQUFrQjtBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUksZ0ZBQWtCO0FBQ3RCO0FBQ0E7QUFDQSxNQUFNLGdGQUFrQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1Q0FBRztBQUM1QjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTSxnRkFBa0I7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7O0FBRUEsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0RBQVk7QUFDdEMsUUFBUSxnRkFBa0I7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxLQUFLLGdGQUFrQjtBQUM3QjtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBLDhCQUE4QiwyREFBWTtBQUMxQztBQUNBO0FBQ0EsbUZBQW1GO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsUUFBUSwrTEFBZ0M7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLDJEQUFZO0FBQ3BEO0FBQ0EsMkJBQTJCLDJEQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsSUFBSSxnRkFBa0I7QUFDdEI7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsMkRBQVk7QUFDN0M7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQSxNQUFNLGdGQUFrQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTSxnRkFBa0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBLE1BQU0sZ0ZBQWtCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLE9BQU87QUFDUDs7QUFFQSwwQkFBMEIsNkNBQVM7QUFDbkM7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLGdGQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWSxnRkFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnRkFBa0I7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sRUFBRTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSw0QkFBNEIsZ0ZBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxrREFBYztBQUM1RCxVQUFVLG1EQUFlO0FBQ3pCO0FBQ0EsT0FBTyxRQUFRLDhDQUFVO0FBQ3pCO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QixnRkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnRkFBa0I7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnRkFBa0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sZ0ZBQWtCO0FBQ3hCO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBLFFBQVEsZ0ZBQWtCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUksZ0ZBQWtCO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdGQUFrQjtBQUN0QjtBQUNBLHVDQUF1QywyREFBWSxTQUFTLDJEQUFZO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBLFFBQVE7QUFDUixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2ZpbGVzL2pzLWRpcnRvemlwLmpzPzg1MzgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHtcbiAgZmV0Y2hTZXR0aW5ncyxcbiAgZm9ybWF0X2J5dGVzLFxuICBkaXJzZXBhcmF0b3IsXG4gIGdlbmVyYXRlX3V1aWRcbn0gZnJvbSAnLi4vLi4vbW9kdWxlcy91dGlscy5qcyc7XG5cbmltcG9ydCB7XG4gIEFzeW5jR3ppcCxcbiAgWmlwLFxuICBBc3luY1ppcERlZmxhdGUsXG4gIFppcFBhc3NUaHJvdWdoLFxuICBaaXBEZWZsYXRlLFxufSBmcm9tICdmZmxhdGUnO1xuaW1wb3J0IHtcbiAgTW9kdWxlRXZlbnRFbWl0dGVyXG59IGZyb20gJy4uLy4uL21vZHVsZXMvbW9kdWxlLWV2ZW50LWVtaXR0ZXIuanMnO1xuaW1wb3J0IHsgZGV0ZWN0IH0gZnJvbSAnZGV0ZWN0LWJyb3dzZXInO1xuXG5jb25zdCBhbHJlYWR5X2NvbXByZXNzZWQgPSBuZXcgU2V0KFtcbiAgJ3ppcCcsICdneicsICdwbmcnLCAnanBnJywgJ2pwZWcnLCAncGRmJywgJ2RvYycsICdkb2N4JywgJ3BwdCcsICdwcHR4JyxcbiAgJ3hscycsICd4bHN4JywgJ2hlaWMnLCAnaGVpZicsICc3eicsICdiejInLCAncmFyJywgJ2dpZicsICd3ZWJwJywgJ3dlYm0nLFxuICAnbXA0JywgJ21vdicsICdtcDMnLCAnYWlmYydcbl0pO1xuY29uc3QgYWNjZXB0ID0gJy50c3YsLnBuZywuanBnLCAuanBlZywuemlwLC5neiwuN3osLmJ6Mic7XG5jb25zdCBNQVhTSVpFID0gMTA3Mzc0MTgyNDsgLy80Mjk0OTY3Mjk2OyAvLy8vIDMyMjEyMjU0NzI7IC8vIDIxNDc0ODM2NDg7XG5leHBvcnQgZnVuY3Rpb24gSnNEaXJUb1ppcChvcHRpb25zID0ge30pIHtcbiAgY29uc3QgZXZlbnRuYW1lcyA9IHtcbiAgICByZWFkeTogJ3JlYWR5JyxcbiAgICBmb2xsb3c6ICdmb2xsb3cnLFxuICAgIGNvbXBsZXRlOiAnY29tcGxldGUnLFxuICAgIGVuZHJlYWRkaXI6ICdlbmRyZWFkZGlyJyxcbiAgICBnemlwOiAnZ3ppcCcsXG4gICAgZW5kemlwOiAnZW5kemlwJyxcbiAgICBzZW5kZmlsZTogJ3NlbmRmaWxlJyxcbiAgICBiaWdmaWxlOiAnYmlnZmlsZScsXG4gICAgdGVybWluYXRlOiAndGVybWluYXRlJyxcbiAgICBwZW5kaW5nOiAncGVuZGluZycsXG4gICAgZXJyb3JmaWxlOiAnZXJyb3JmaWxlJyxcbiAgICBjb3VudGVyOiAnY291bnRlcicsXG4gICAgcmVqZWN0OiAncmVqZWN0JyxcbiAgICBtZXNzYWdlOiAnbWVzc2FnZScsXG4gICAgZXJyb3I6ICdlcnJvcicsXG4gICAgaW5pdDogJ2luaXQnXG4gIH07XG4gIGxldCBqc1NjYW5EaXIsIHByb3BlcnRpZXM7XG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHVwbG9hZHVybDogJy9ndWkvZmlsZXMvdXBsb2FkJyxcbiAgICBsYXJnZWZpbGU6IE1BWFNJWkUsXG4gICAgYWNjZXB0OiBhY2NlcHQuc3BsaXQoJywnKVxuICB9XG4gIC8vIHVzZXMgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZpbGVfU3lzdGVtX0FQSS9PcmlnaW5fcHJpdmF0ZV9maWxlX3N5c3RlbVxuICAvLyMgYWx0ZXJuYXRpdmUgKG5vdCBzdXBwb3J0ZWQgaW4gU2FmYXJpKSBmb3IgLmNyZWF0ZVdyaXRhYmxlXG4gIG9wdGlvbnMgPSB7IC4uLmRlZmF1bHRPcHRpb25zLFxuICAgIC4uLm9wdGlvbnNcbiAgfTtcbiAgLy8gb3RoZXIgbW9kdWxlIHJlY2VpdmluZyBldmVudHNcbiAgY29uc3QgX2xpc3RlbmVyID0gKG9wdGlvbnMubGlzdGVuZXIpID8gb3B0aW9ucy5saXN0ZW5lciA6IHV1aWQ7XG4gIE9iamVjdC5mcmVlemUob3B0aW9ucyk7XG4gIGNvbnN0IHV1aWQgPSBnZW5lcmF0ZV91dWlkKCk7XG4gIGluaXQoKTtcblxuZnVuY3Rpb24gYnJvd3NlclJlcXVpcmVkKCkge1xuY29uc3QgYnJvd3NlciA9IGRldGVjdCgpO1xuICAgICBjb25zdCBhY2NlcHRlZD17YW5kcm9pZDp7Y2hyb21lOjEwOSxvcGVyYTo3NCxmaXJlZm94OjExMSxzYW1zdW5nYnJvd3NlcjoyMSx3ZWJ2aWV3OjEwOX0sIGlvczpmYWxzZSxvdGhlcjp7Y2hyb21lOjg2LGVkZ2U6ODYsb3BlcmE6NzIsZmlyZWZveDoxMTF9fTtcbiAgICAgICAgbGV0IG9zID1icm93c2VyLm9zLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIG9zPShvcyBpbiBbJ2FuZHJvaWQnLCdpb3MnXSk/b3M6J290aGVyJztcbiAgICAgY29uc3QgbmFtZT1icm93c2VyLm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgY29uc3QgdmVyc2lvbiA9IHBhcnNlSW50KGJyb3dzZXIudmVyc2lvbi5zcGxpdCgnLicpWzBdKTtcbiBpZiAoKGFjY2VwdGVkW29zXSAmJiBhY2NlcHRlZFtvc11bbmFtZV0gJiYgYWNjZXB0ZWRbb3NdW25hbWVdPD0gdmVyc2lvbikpICB7XG4gICAgIE1vZHVsZUV2ZW50RW1pdHRlci5lbWl0KGV2ZW50bmFtZXMubWVzc2FnZSwge1xuICAgICAgICAgIGlkOiBcImJyb3dzZXJcIixcbiAgICAgICAgICBuYW1lOiBcImJyb3dzZXJcIixcbiAgICAgICAgICBtZXNzYWdlOiBcInlvdXIgYnJvd3NlciBkb2VzIG5vdCBoYXZlIGEgcmVxdWlyZWQgZnVuY3Rpb25uYWxpdHkuIFBsZWFzZSB1cGdyYWRlIG9yIHVzZSBhIHZhbGlkIGJyb3dzZXIgYW5kIHZlcnNpb24gOlwiKyAgSlNPTi5zdHJpbmdpZnkoYWNjZXB0ZWQpLnJlcGxhY2VBbGwoJ1wiJywnJyksXG4gICAgICAgIH0sIF9saXN0ZW5lcik7XG4gICAgIH1cbiAgICAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHByb3BlcnRpZXMgPSBpbml0UHJvcHMoKTtcbiAgICBNb2R1bGVFdmVudEVtaXR0ZXIub24oZXZlbnRuYW1lcy5pbml0LCBhc3luYyAoZSkgPT4ge1xuICAgICAgLy8gIGlmICghZS5iaWdmaWxlICYmICFlLnBhcnQpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSgpID09PSBmYWxzZSkge1xuICAgICAgICBhd2FpdCByZXNldCgpO1xuICAgICAgICBNb2R1bGVFdmVudEVtaXR0ZXIuZW1pdChldmVudG5hbWVzLmNvbXBsZXRlLCB7XG4gICAgICAgICAgbmFtZTogZXZlbnRuYW1lcy5yZWFkeVxuICAgICAgICB9LCBfbGlzdGVuZXIpO1xuICAgICAgICBwcm9wZXJ0aWVzLmVuZHJlYWRkaXIgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBjb25zb2xlLmxvZygncGFydGx5IGZpbnNoZWQgJywgZSk7XG4gICAgfSwgdXVpZCk7XG4gICAgTW9kdWxlRXZlbnRFbWl0dGVyLm9uKGV2ZW50bmFtZXMuZW5kemlwLCAoZSkgPT4ge1xuICAgICAgaWYgKCFlLmJpZ2ZpbGUgJiYgcHJvcGVydGllcy56aXApIHByb3BlcnRpZXMuemlwLmVuZCgpO1xuICAgICAgZWxzZSBpZiAoZS5iaWdmaWxlICYmIHByb3BlcnRpZXMuZ3ppcHBlZCkgY29uc29sZS5sb2coJy0tZ3ppcHBlZCBlbmQnLCBwcm9wZXJ0aWVzLmd6aXBwZWQpO1xuICAgICAgY29uc29sZS5sb2coJ2VuZHppcCUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUnKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBidWlsZE1lc3NhZ2UoZSwge1xuICAgICAgICBuYW1lOiBldmVudG5hbWVzLnNlbmRmaWxlLFxuICAgICAgfSk7XG4gICAgICBNb2R1bGVFdmVudEVtaXR0ZXIuZW1pdChldmVudG5hbWVzLmNvbXBsZXRlLCBtZXNzYWdlLCBfbGlzdGVuZXIpO1xuICAgIH0sIHV1aWQpO1xuICAgIE1vZHVsZUV2ZW50RW1pdHRlci5vbihldmVudG5hbWVzLnNlbmRmaWxlLCBhc3luYyAoZSkgPT4ge1xuICAgICAgY29uc3QgZmlsZSA9IChlLmJpZ2ZpbGUpID8gYXdhaXQgcHJvcGVydGllcy5nemlwcGVkLmdldEZpbGUoKTogYXdhaXQgZ2V0RmlsZSgpO1xuICAgICAgaWYgKGUuYmlnZmlsZSkge1xuICAgICAgICBjb25zdCBwYXRoID0gKGUucGF0aCA/IGUucGF0aCA6ICcnKS5yZXBsYWNlKGUuYmlnZmlsZSwgJycpO1xuICAgICAgICBzZW5kQ2h1bmsocGF0aCk7XG4gICAgICB9IGVsc2Ugc2VuZFppcEZpbGUoZmlsZSwgKGUucGF0aCA/IGUucGF0aCA6ICcnKSwgbnVsbCk7XG4gICAgfSwgdXVpZCk7XG4gICAgTW9kdWxlRXZlbnRFbWl0dGVyLm9uKGV2ZW50bmFtZXMuZW5kcmVhZGRpciwgKGUpID0+IHtcbiAgICAgIHByb3BlcnRpZXMuZW5kcmVhZGRpciA9IHRydWU7XG4gICAgICBjaGVja1Byb2Nlc3NlZChlKTtcbiAgICB9LCB1dWlkKTtcbiAgICBNb2R1bGVFdmVudEVtaXR0ZXIub24oZXZlbnRuYW1lcy5jb3VudGVyLCBhc3luYyAoZSkgPT4ge1xuICAgICAgcHJvcGVydGllcy5lbmRjb3VudGVyID0gZmFsc2U7XG4gICAgICBwcm9wZXJ0aWVzLmNvdW50ZXJbZS5uYW1lXSArPSAxO1xuICAgICAgTW9kdWxlRXZlbnRFbWl0dGVyLmVtaXQoZXZlbnRuYW1lcy5jb3VudGVyLCBlLCBfbGlzdGVuZXIpO1xuICAgICAgaWYgKGUubmFtZSA9PT0gJ3ppcCcgJiYgcHJvcGVydGllcy5jb3VudGVyLnNjYW4gPT09IHByb3BlcnRpZXMuY291bnRlci56aXApIHtcbiAgICAgICAgcHJvcGVydGllcy5lbmRjb3VudGVyID0gdHJ1ZTtcbiAgICAgICAgY2hlY2tQcm9jZXNzZWQoZSk7XG4gICAgICB9XG4gICAgICBpZiAoZS5uYW1lID09PSAnemlwJyAmJiBwcm9wZXJ0aWVzLmNhbGxiYWNrKSBhd2FpdCBwcm9wZXJ0aWVzLmNhbGxiYWNrKCk7XG4gICAgfSwgdXVpZCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHppcDogbnVsbCxcbiAgICAgIHppcG5hbWU6IG51bGwsXG4gICAgICBmaWxlc3RyZWFtOiBudWxsLFxuICAgICAgc3RyZWFtaGFuZGxlOiBudWxsLFxuICAgICAgZ3ppcHBlZDogbnVsbCxcbiAgICAgIHNpemV0b3ppcDogMCxcbiAgICAgIHBhcnQ6IDAsXG4gICAgICBmb2xsb3c6IG51bGwsXG4gICAgICBlbmRjb3VudGVyOiBmYWxzZSxcbiAgICAgIGVuZHJlYWRkaXI6IGZhbHNlLFxuICAgICAgY2FsbGJhY2s6IG51bGwsXG4gICAgICBwb3M6IDAsXG4gICAgICBjb3VudGVyOiB7XG4gICAgICAgIHNjYW46IDAsXG4gICAgICAgIHppcDogMCxcbiAgICAgICAgcmVqZWN0OiAwXG4gICAgICB9LFxuICAgICAgaGFuZGxlcnM6IFtdXG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHByb3BlcnRpZXMgPSBpbml0UHJvcHMoKTtcbiAgICBhd2FpdCBpbml0U3RvcmFnZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgcmV0dXJuIChwcm9wZXJ0aWVzLnppcCAhPT0gbnVsbCB8fCBwcm9wZXJ0aWVzLmZvbGxvdyAhPT0gbnVsbCB8fCBwcm9wZXJ0aWVzLmd6aXBwZWQgIT09IG51bGwgfHwgcHJvcGVydGllcy5lbmRyZWFkZGlyICE9PSB0cnVlKTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBpbml0WmlwKCkge1xuICAgIHByb3BlcnRpZXMucG9zID0gMDtcbiAgICBwcm9wZXJ0aWVzLnNpemV0b3ppcCA9IDA7XG4gICAgY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT09PW5ld3ppcCcpO1xuICAgIHByb3BlcnRpZXMuemlwID0gbmV3IFppcCgoZXJyb3IsIGNodW5rLCBmaW5hbCkgPT4ge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvcGVydGllcy5zdHJlYW1oYW5kbGUud3JpdGUoY2h1bmssIHtcbiAgICAgICAgICBhdDogc2VsZi5wb3NcbiAgICAgICAgfSk7XG4gICAgICAgIHByb3BlcnRpZXMucG9zICs9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgaWYgKGZpbmFsKSB7XG4gICAgICAgICAgcHJvcGVydGllcy5zdHJlYW1oYW5kbGUuY2xvc2UoKTtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZmluYWwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiotJywgcHJvcGVydGllcy5wb3MpO1xuXG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGhhY2sgZm9yIG1lbW9yeSB1c2FnZVxuICAgIHppcE9uRGF0YSgpO1xuXG4gICAgaWYgKHByb3BlcnRpZXMuZm9sbG93KSBhd2FpdCBwcm9wZXJ0aWVzLmZvbGxvdygpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tQcm9jZXNzZWQoZSkge1xuICAgIGlmIChwcm9wZXJ0aWVzLmVuZHJlYWRkaXIgPT09IHRydWUgJiYgcHJvcGVydGllcy5lbmRjb3VudGVyID09PSB0cnVlKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gYnVpbGRNZXNzYWdlKGUsIHtcbiAgICAgICBuYW1lOiBldmVudG5hbWVzLmVuZHppcFxuICAgICAgfSk7XG4gICAgICBNb2R1bGVFdmVudEVtaXR0ZXIuZW1pdChldmVudG5hbWVzLmNvbXBsZXRlLCBtZXNzYWdlLCBfbGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHppcE9uRGF0YSh6aXAgPSBudWxsKSB7XG4gICAgemlwID0gKHppcCA9PT0gbnVsbCkgPyBwcm9wZXJ0aWVzLnppcCA6IHppcDtcbiAgICBjb25zdCBvbmRhdGEgPSB6aXAub25kYXRhO1xuICAgIHppcC5vbmRhdGEgPSAoZXJyb3IsIGRhdGEsIGZpbmFsKSA9PiB7XG4gICAgICBvbmRhdGEoZXJyb3IsIGRhdGEsIGZpbmFsKTtcbiAgICAgIGlmIChmaW5hbCkge1xuICAgICAgICB6aXAuZCA9IG51bGw7XG4gICAgICAgIHppcC51LmF0KC0xKS5kID0gbnVsbDsgLy8gT2JqZWN0IGNyZWF0ZWQgaW4gYHppcC5hZGQoKWBcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZE1lc3NhZ2UoZSwgbWVzc2FnZSA9IHt9KSB7XG4gICAgaWYgKGUuaGFzT3duUHJvcGVydHkoXCJwYXJ0XCIpKSB7XG4gICAgICBtZXNzYWdlLnBhcnQgPSBlLnBhcnQ7XG4gICAgfSBlbHNlIHByb3BlcnRpZXMucGFydCA9IDA7XG4gICAgaWYgKGUuaGFzT3duUHJvcGVydHkoXCJiaWdmaWxlXCIpKSBtZXNzYWdlLmJpZ2ZpbGUgPSBlLmJpZ2ZpbGU7XG4gICAgaWYgKGUuaGFzT3duUHJvcGVydHkoXCJwYXRoXCIpKSBtZXNzYWdlLnBhdGggPSBlLnBhdGg7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBxdW90YUVzdGltYXRlKCkge1xuICAgIGlmIChuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnN0b3JhZ2UgJiYgbmF2aWdhdG9yLnN0b3JhZ2UuZXN0aW1hdGUpIHtcbiAgICAgIG5hdmlnYXRvci5zdG9yYWdlLmVzdGltYXRlKCkudGhlbigocXVvdGEpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZVVzZWQgPSAoKHF1b3RhLnVzYWdlIC8gcXVvdGEucXVvdGEpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICBjb25zdCByZW1haW5pbmcgPSBmb3JtYXRfYnl0ZXMocXVvdGEucXVvdGEgLSBxdW90YS51c2FnZSk7XG4gICAgICAgIE1vZHVsZUV2ZW50RW1pdHRlci5lbWl0KGV2ZW50bmFtZXMubWVzc2FnZSwge1xuICAgICAgICAgIGlkOiBcInF1b3RhXCIsXG4gICAgICAgICAgbmFtZTogXCJjb25zb2xlXCIsXG4gICAgICAgICAgbWVzc2FnZTogXCJ5b3UndmUgdXNlZCBcIiArIHBlcmNlbnRhZ2VVc2VkICsgXCIlIG9mIHRoZSBhdmFpbGFibGUgc3RvcmFnZSAoXCIgKyByZW1haW5pbmcgKyBcIikuXCIsXG4gICAgICAgIH0sIF9saXN0ZW5lcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBpbml0U3RvcmFnZSgpIHtcbiAgICBpZiAobmF2aWdhdG9yICYmIG5hdmlnYXRvci5zdG9yYWdlICYmIG5hdmlnYXRvci5zdG9yYWdlLmVzdGltYXRlKSB7XG4gICAgICBhd2FpdCBjbGVhblN0b3JhZ2UoKTtcbiAgICAgIHF1b3RhRXN0aW1hdGUoKTtcbiAgICB9IGVsc2UgTW9kdWxlRXZlbnRFbWl0dGVyLmVtaXQoZXZlbnRuYW1lcy5tZXNzYWdlLCB7XG4gICAgICBuYW1lOiBcImVycm9yXCIsXG4gICAgICBtZXNzYWdlOiBcIm5vIG5hdmlnYXRvciBzdG9yYWdlXCJcbiAgICB9LCB1dWlkKTtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsU3RyZWFtKG5hbWUsIGFjY2VwdCA9IHtcbiAgICAnYXBwbGljYXRpb24vemlwJzogWycuemlwJ10sXG4gIH0pIHtcbiAgICBjb25zdCByb290ID0gYXdhaXQgbmF2aWdhdG9yLnN0b3JhZ2UuZ2V0RGlyZWN0b3J5KCk7XG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgIHR5cGVzOiBbe1xuICAgICAgICBkZXNjcmlwdGlvbjogJ1RlbXAgZmlsZScsXG4gICAgICAgIGFjY2VwdDogYWNjZXB0LFxuICAgICAgfSwgXSxcbiAgICAgIGNyZWF0ZTogdHJ1ZVxuICAgIH07XG4gICAgY29uc3QgZmlsZXN0cmVhbSA9IGF3YWl0IHJvb3QuZ2V0RmlsZUhhbmRsZShuYW1lLCBvcHRzKTtcbiAgICBjb25zdCBzdHJlYW1oYW5kbGUgPSBhd2FpdCBmaWxlc3RyZWFtLmNyZWF0ZVdyaXRhYmxlKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbGVzdHJlYW0sXG4gICAgICBzdHJlYW1oYW5kbGVcbiAgICB9O1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHNjYW5Db21tb24oemlwbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcHJvcGVydGllcy5lbmRyZWFkZGlyID0gZmFsc2U7XG4gICAgaWYgKHByb3BlcnRpZXMuemlwID09PSBudWxsKSB7XG4gICAgICB6aXBuYW1lID0gemlwbmFtZS5zcGxpdChkaXJzZXBhcmF0b3IpWzBdO1xuICAgICAgemlwbmFtZSA9ICh6aXBuYW1lLnRyaW0oKSA9PT0gYGApID8gJ3RlbXAnIDogemlwbmFtZTtcbiAgICAgIGNvbnN0IHR5cGUgPSAob3B0aW9ucyAmJiBvcHRpb25zLnR5cGUpID8gb3B0aW9ucy50eXBlIDogJy56aXAnO1xuICAgICAgcHJvcGVydGllcy56aXBuYW1lID0gKChvcHRpb25zLnppcG5hbWUpID8gb3B0aW9ucy56aXBuYW1lIDogemlwbmFtZSkgKyB0eXBlOyAvL1xuICAgICAgY29uc3QgemlwaW5zdG9yYWdlID0gYXdhaXQgc2VhcmNoU3RvcmFnZShwcm9wZXJ0aWVzLnppcG5hbWUpO1xuICAgICAgaWYgKHppcGluc3RvcmFnZSkgcHJvcGVydGllcy56aXBuYW1lID0gJzFfJyArIHByb3BlcnRpZXMuemlwbmFtZTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZmlsZXN0cmVhbSxcbiAgICAgICAgc3RyZWFtaGFuZGxlXG4gICAgICB9ID0gYXdhaXQgY3JlYXRlTG9jYWxTdHJlYW0ocHJvcGVydGllcy56aXBuYW1lKTtcbiAgICAgIHByb3BlcnRpZXMuZmlsZXN0cmVhbSA9IGZpbGVzdHJlYW07XG4gICAgICBwcm9wZXJ0aWVzLnN0cmVhbWhhbmRsZSA9IHN0cmVhbWhhbmRsZTtcbiAgICAgIGxldCBzaXplID0gMDtcbiAgICAgIHByb3BlcnRpZXMucGFydCA9IDA7XG4gICAgICBhd2FpdCBpbml0WmlwKCk7XG4gICAgICBpZiAoIWpzU2NhbkRpcikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgSnNTY2FuRGlyXG4gICAgICAgIH0gPSBhd2FpdCBpbXBvcnQoJy4uL2ZpbGVzL2pzLXNjYW5kaXIuanMnKTtcbiAgICAgICAgY29uc3QgcHJvY2Vzc19maWxlID0gYXN5bmMgKGVudHJ5LCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgIGlmIChhY2NlcHRGaWxlKGVudHJ5KSkge1xuICAgICAgICAgICAgcHJvcGVydGllcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc0ZpbGUoZW50cnkpO1xuICAgICAgICAgIH0gZWxzZSByZWplY3RGaWxlKGVudHJ5LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAganNTY2FuRGlyID0gSnNTY2FuRGlyKHByb2Nlc3NfZmlsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gc2NhbkJyb3dzZShwaWNrLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBlbnRyaWVzID0gKHBpY2sgaW5zdGFuY2VvZiBGaWxlTGlzdCkgPyBBcnJheS5mcm9tKHBpY2spIDogKHBpY2sua2luZCA9PT0gXCJkaXJlY3RvcnlcIikgPyBhd2FpdCBBcnJheS5mcm9tQXN5bmMocGljay52YWx1ZXMoKSk6IChBcnJheS5pc0FycmF5KHBpY2spKSA/IHBpY2sgOiBbcGlja107XG4gICAgY29uc3QgbmFtZSA9IGVudHJpZXNbMF0ubmFtZTtcbiAgICBsZXQgcmVscGF0aCA9IChwaWNrIGluc3RhbmNlb2YgRmlsZUxpc3QpID8gZW50cmllc1swXS53ZWJraXRSZWxhdGl2ZVBhdGggOiBudWxsO1xuICAgIHJlbHBhdGggPSAocmVscGF0aCkgPyByZWxwYXRoLnNwbGl0KGRpcnNlcGFyYXRvcikgOiBbYGBdO1xuICAgIGlmIChyZWxwYXRoLmxlbmd0aCkgcmVscGF0aC5wb3AoKTtcbiAgICByZWxwYXRoID0gcmVscGF0aC5qb2luKGRpcnNlcGFyYXRvcilcbiAgICBjb25zdCBwYXRoID0gKHBpY2sgaW5zdGFuY2VvZiBGaWxlTGlzdCkgPyByZWxwYXRoIDogKHBpY2sua2luZCA9PT0gXCJkaXJlY3RvcnlcIikgPyBwaWNrLm5hbWUgOiBgYDtcbiAgICBhd2FpdCBzY2FuQ29tbW9uKHBhdGgsIG9wdGlvbnMpO1xuICAgIGF3YWl0IGpzU2NhbkRpci5wcm9jZXNzRW50cmllcyhlbnRyaWVzLCBwYXRoLCAoKSA9PiB7XG4gICAgICBkaXJDb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gc2NhbkhhbmRsZShkcm9wcGVkLCBvcHRpb25zID0ge30pIHtcbiAgICBhd2FpdCBzY2FuQ29tbW9uKGRyb3BwZWQubmFtZSwgb3B0aW9ucyk7XG4gICAgaWYgKGRyb3BwZWQuaXNEaXJlY3RvcnkgPT09IHRydWUpIHtcbiAgICAgIGF3YWl0IGpzU2NhbkRpci5yZWFkRGlyZWN0b3J5KGRyb3BwZWQsICgpID0+IHtcbiAgICAgICAgZGlyQ29tcGxldGUoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoZHJvcHBlZC5pc0ZpbGUgPT09IHRydWUpIHtcbiAgICAgIGF3YWl0IGpzU2NhbkRpci5wcm9jZXNzRmlsZShkcm9wcGVkLCAoKSA9PiB7XG4gICAgICAgIGRpckNvbXBsZXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkaXJDb21wbGV0ZSgpIHtcbiAgICBNb2R1bGVFdmVudEVtaXR0ZXIuZW1pdChldmVudG5hbWVzLmVuZHJlYWRkaXIsIHtcbiAgICAgIG5hbWU6IGV2ZW50bmFtZXMuZW5kcmVhZGRpclxuICAgIH0sIHV1aWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkSGFuZGxlcihoYW5kbGVyKSB7XG4gICAgcHJvcGVydGllcy5oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gZXhlY0hhbmRsZXIoKSB7XG4gICAgLy8gc2VyaWVcbiAgICBpZiAocHJvcGVydGllcy5oYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBoYW5kbGVyID0gcHJvcGVydGllcy5oYW5kbGVycy5zaGlmdCgpO1xuICAgICAgYXdhaXQgaGFuZGxlcigpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gZ3ppcEJpZ0ZpbGUoZmlsZSwgZmlsZXBhdGgpIHtcbiAgICBpZiAocHJvcGVydGllcy5nemlwcGVkICE9PSBudWxsKSB7XG4gICAgICBhd2FpdCBhZGRIYW5kbGVyKGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgZ3ppcEJpZ0ZpbGUoZmlsZSwgZmlsZXBhdGgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBkdCA9IERhdGUubm93KCk7XG4gICAgZmlsZXBhdGggPSAoZmlsZXBhdGguaW5kZXhPZihkaXJzZXBhcmF0b3IpID09PSAwKSA/IGZpbGVwYXRoLnN1YnN0cigxKSA6IGZpbGVwYXRoO1xuICAgIC8qZmlsZXBhdGggPSBmaWxlcGF0aC5zcGxpdChkaXJzZXBhcmF0b3IpO1xuICAgIGZpbGVwYXRoLnBvcCgpO1xuICAgIGZpbGVwYXRoID0gZmlsZXBhdGguam9pbihkaXJzZXBhcmF0b3IpOyovXG4gICAgY29uc3QgZXh0ID0gZmlsZS5uYW1lLnNsaWNlKGZpbGUubmFtZS5sYXN0SW5kZXhPZignLicpICsgMSk7XG4gICAgaWYgKGFscmVhZHlfY29tcHJlc3NlZC5oYXMoZXh0KSkge1xuICAgICAgcHJvcGVydGllcy5nemlwcGVkID0gZmlsZTtcbiAgICAgIE1vZHVsZUV2ZW50RW1pdHRlci5lbWl0KGV2ZW50bmFtZXMuY291bnRlciwge1xuICAgICAgICBuYW1lOiAnemlwJyxcbiAgICAgICAgcGF0aDogZmlsZXBhdGgsXG4gICAgICAgIHNpemU6IGZpbGUuc2l6ZVxuICAgICAgfSwgdXVpZCk7XG4gICAgICBNb2R1bGVFdmVudEVtaXR0ZXIuZW1pdChldmVudG5hbWVzLmNvbXBsZXRlLCB7XG4gICAgICAgIG5hbWU6IGV2ZW50bmFtZXMuYmlnZmlsZSxcbiAgICAgICAgYmlnZmlsZTogZmlsZS5uYW1lLFxuICAgICAgICBwYXRoOiBmaWxlcGF0aCxcbiAgICAgIH0sIF9saXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB6aXBuYW1lID0gZmlsZS5uYW1lICsgJy5neic7XG4gICAgICBNb2R1bGVFdmVudEVtaXR0ZXIuZW1pdChldmVudG5hbWVzLmNvbXBsZXRlLCB7XG4gICAgICAgIG5hbWU6IGV2ZW50bmFtZXMuZ3ppcCxcbiAgICAgICAgYmlnZmlsZTogZmlsZS5uYW1lLFxuICAgICAgICBwYXRoOiBmaWxlcGF0aCxcbiAgICAgICAgc2l6ZTogZmlsZS5zaXplXG4gICAgICB9LCBfbGlzdGVuZXIpO1xuICAgICAgY29uc3Qge1xuICAgICAgICBmaWxlc3RyZWFtLFxuICAgICAgICBzdHJlYW1oYW5kbGVcbiAgICAgIH0gPSBhd2FpdCBjcmVhdGVMb2NhbFN0cmVhbSh6aXBuYW1lLCB7XG4gICAgICAgICdhcHBsaWNhdGlvbi9nemlwJzogWycuZ3onXSxcbiAgICAgIH0pO1xuICAgICAgbGV0IHBvcyA9IDA7XG5cbiAgICAgIGNvbnN0IGd6aXBwZWQgPSBuZXcgQXN5bmNHemlwKHtcbiAgICAgICAgbGV2ZWw6IDYsXG4gICAgICAgIGZpbGVuYW1lOiBmaWxlcGF0aFxuICAgICAgfSk7XG4gICAgICBnemlwcGVkLm9uZGF0YSA9IChlcnIsIGRhdGEsIGZpbmFsKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZ3ppcCBlcnInLCBlcnIpO1xuICAgICAgICAgIG9uRXJyb3IoZXZlbnRuYW1lcy5lcnJvcmZpbGUsIHtcbiAgICAgICAgICAgIGJpZ2ZpbGU6IGZpbGUubmFtZSxcbiAgICAgICAgICAgIHBhdGg6IGZpbGVwYXRoLFxuICAgICAgICAgICAgc2l6ZTogZmlsZS5zaXplXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyZWFtaGFuZGxlLndyaXRlKGRhdGEsIHtcbiAgICAgICAgICAgIGF0OiBwb3NcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwb3MgKz0gZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgICBpZiAoZmluYWwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmaW5hbCBCSUdGSUxFJSUlJSUlJSUlJSUlJSUlJSUlJSUnICsgZXZlbnRuYW1lcy5iaWdmaWxlLCBmaWxlcGF0aClcblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3RpbWV0b2d6emlwJywgKERhdGUubm93KCkgLSBkdCkgLyAxMDAwKTtcblxuICAgICAgICAgICAgc3RyZWFtaGFuZGxlLmNsb3NlKCk7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLmd6aXBwZWQgPSBmaWxlc3RyZWFtO1xuICAgICAgICAgICAgTW9kdWxlRXZlbnRFbWl0dGVyLmVtaXQoZXZlbnRuYW1lcy5jb3VudGVyLCB7XG4gICAgICAgICAgICAgIG5hbWU6ICd6aXAnLFxuICAgICAgICAgICAgICBwYXRoOiBmaWxlcGF0aCxcbiAgICAgICAgICAgICAgc2l6ZTogZmlsZS5zaXplXG4gICAgICAgICAgICB9LCB1dWlkKTtcbiAgICAgICAgICAgIE1vZHVsZUV2ZW50RW1pdHRlci5lbWl0KGV2ZW50bmFtZXMuY29tcGxldGUsIHtcbiAgICAgICAgICAgICAgbmFtZTogZXZlbnRuYW1lcy5iaWdmaWxlLFxuICAgICAgICAgICAgICBiaWdmaWxlOiBmaWxlLm5hbWUsXG4gICAgICAgICAgICAgIHBhdGg6IGZpbGVwYXRoXG4gICAgICAgICAgICB9LCBfbGlzdGVuZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGNvdW50ID0gZmFsc2U7XG4gICAgICBhd2FpdCByZWFkRmlsZShmaWxlLCBmaWxlcGF0aCwgZ3ppcHBlZCwgY291bnQpO1xuICAgIH1cblxuXG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gcGFydFppcCgpIHtcbiAgICBwcm9wZXJ0aWVzLnBhcnQgKz0gMTtcbiAgICBNb2R1bGVFdmVudEVtaXR0ZXIuZW1pdChldmVudG5hbWVzLmNvbXBsZXRlLCB7XG4gICAgIG5hbWU6IGV2ZW50bmFtZXMuZW5kemlwLFxuICAgICAgcGFydDogcHJvcGVydGllcy5wYXJ0XG4gICAgfSwgX2xpc3RlbmVyKTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiByZWFkRmlsZShmaWxlLCBmaWxlcGF0aCwgemlwcGVkc3RyZWFtLCBjb3VudCA9IHRydWUpIHtcbiAgICBjb25zdCByZWFkZXIgPSBmaWxlLnN0cmVhbSgpLmdldFJlYWRlcigpO1xuICAgIGxldCBwYXVzZSA9IGZhbHNlO1xuICAgIC8qICBvbkJhY2twcmVzc3VyZSh6aXBwZWRzdHJlYW0sIHRoaXMuc3RyZWFtaGFuZGxlLCBzaG91bGRfYXBwbHlfYmFja3ByZXNzdXJlID0+IHtcbiAgICAgICAgaWYgKHNob3VsZF9hcHBseV9iYWNrcHJlc3N1cmUpIHBhdXNlID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAocGF1c2UpIHBhdXNlID0gZmFsc2U7XG4gICAgICB9KTsqL1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGRvbmUsXG4gICAgICAgIHZhbHVlXG4gICAgICB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIHppcHBlZHN0cmVhbS5wdXNoKG5ldyBVaW50OEFycmF5KDApLCB0cnVlKTtcbiAgICAgICAgaWYgKGNvdW50ID09PSB0cnVlKSBNb2R1bGVFdmVudEVtaXR0ZXIuZW1pdChldmVudG5hbWVzLmNvdW50ZXIsIHtcbiAgICAgICAgICBuYW1lOiAnemlwJyxcbiAgICAgICAgICBwYXRoOiBmaWxlcGF0aCxcbiAgICAgICAgICBzaXplOiAoemlwcGVkc3RyZWFtLnNpemUpID8gemlwcGVkc3RyZWFtLnNpemUgOiBmaWxlLnNpemVcbiAgICAgICAgfSwgdXVpZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgemlwcGVkc3RyZWFtLnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHppcFN0cmVhbShmaWxlLCBmaWxlcGF0aCkge1xuICAgIGNvbnN0IGV4dCA9IGZpbGVwYXRoLnNsaWNlKGZpbGVwYXRoLmxhc3RJbmRleE9mKCcuJykgKyAxKTtcbiAgICBjb25zdCBpc2NvbXByZXNzZWQgPSBhbHJlYWR5X2NvbXByZXNzZWQuaGFzKGV4dCk7XG4gICAgY29uc3QgemlwcGVkc3RyZWFtID0gKGlzY29tcHJlc3NlZCkgPyBuZXcgWmlwUGFzc1Rocm91Z2goZmlsZXBhdGgpIDogZmlsZS5zaXplID4gb3B0aW9ucy5sYXJnZWZpbGUgP1xuICAgICAgbmV3IEFzeW5jWmlwRGVmbGF0ZShmaWxlcGF0aCwge1xuICAgICAgICBsZXZlbDogNixcbiAgICAgIH0pIDogbmV3IFppcERlZmxhdGUoZmlsZXBhdGgsIHtcbiAgICAgICAgbGV2ZWw6IDZcbiAgICAgIH0pO1xuICAgIHByb3BlcnRpZXMuemlwLmFkZCh6aXBwZWRzdHJlYW0pO1xuICAgIGF3YWl0IHJlYWRGaWxlKGZpbGUsIGZpbGVwYXRoLCB6aXBwZWRzdHJlYW0pO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gYWRkRmlsZVRvWmlwU3RyZWFtKGZpbGUsIGZpbGVwYXRoLCBjb3VudCA9IHRydWUpIHtcbiAgICBpZiAoY291bnQgPT09IHRydWUpIE1vZHVsZUV2ZW50RW1pdHRlci5lbWl0KGV2ZW50bmFtZXMuY291bnRlciwge1xuICAgICAgbmFtZTogJ3NjYW4nLFxuICAgICAgcGF0aDogZmlsZXBhdGgsXG4gICAgICBzaXplOiBmaWxlLnNpemVcbiAgICB9LCB1dWlkKTtcbiAgICBwcm9wZXJ0aWVzLmZvbGxvdyA9IG51bGw7XG4gICAgLy8gY2hlY2sgZmlsZSBzaXplID4gbWF4IHBvc3Qgc2l6ZVxuICAgIGlmIChmaWxlLnNpemUgPj0gTUFYU0laRSkge1xuICAgICAgZ3ppcEJpZ0ZpbGUoZmlsZSwgZmlsZXBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjaGVjayB6aXAgZmlsZSBzaXplID4gdG90YWwgemlwIHNpemVcbiAgICAgIHByb3BlcnRpZXMuc2l6ZXRvemlwICs9IGZpbGUuc2l6ZTtcbiAgICAgIGlmIChwcm9wZXJ0aWVzLnNpemV0b3ppcCA+PSBNQVhTSVpFKSB7XG4gICAgICAgIHByb3BlcnRpZXMuZm9sbG93ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGF3YWl0IHppcFN0cmVhbShmaWxlLCBmaWxlcGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcGFydFppcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgemlwU3RyZWFtKGZpbGUsIGZpbGVwYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhY2NlcHRGaWxlKGVudHJ5KSB7XG4gICAgY29uc3QgZmlsZXBhdGggPSBlbnRyeS5uYW1lO1xuICAgIGNvbnN0IGV4dCA9IGZpbGVwYXRoLnNsaWNlKGZpbGVwYXRoLmxhc3RJbmRleE9mKCcuJykgKyAxKTtcbiAgICByZXR1cm4gYWNjZXB0LmluY2x1ZGVzKGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiByZWplY3RGaWxlKGZpbGUsIGNhbGxiYWNrID0gbnVsbCkge1xuICAgIGNvbnN0IHBhdGggPSAoZmlsZS5mdWxsUGF0aCkgPyBmaWxlLmZ1bGxQYXRoIDogZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGg7XG4gICAgcHJvcGVydGllcy5jb3VudGVyLnJlamVjdCArPSAxO1xuICAgIE1vZHVsZUV2ZW50RW1pdHRlci5lbWl0KGV2ZW50bmFtZXMucmVqZWN0LCB7XG4gICAgICBuYW1lOiBldmVudG5hbWVzLnJlamVjdCxcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgfSwgX2xpc3RlbmVyKTtcbiAgICBpZiAoY2FsbGJhY2sgIT09IG51bGwpIGNhbGxiYWNrKCk7XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0ZpbGUoZW50cnkpIHtcbiAgICBjb25zdCBwYXRoID0gKGVudHJ5LmZ1bGxQYXRoKSA/IGVudHJ5LmZ1bGxQYXRoIDogZW50cnkud2Via2l0UmVsYXRpdmVQYXRoO1xuICAgIGVudHJ5LmZpbGUoYXN5bmMgZmlsZSA9PiB7XG4gICAgICBhd2FpdCBhZGRGaWxlVG9aaXBTdHJlYW0oZmlsZSwgcGF0aCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkVycm9yKGFjdGlvbiwgbWVzc2FnZSA9IG51bGwpIHtcbiAgICBtZXNzYWdlID0gKG1lc3NhZ2UpID8gbWVzc2FnZSA6IHt9O1xuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICBjYXNlIGV2ZW50bmFtZXMuaW5pdDpcbiAgICAgICAgbWVzc2FnZS5uYW1lID0gZXZlbnRuYW1lcy5pbml0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZXZlbnRuYW1lcy5lcnJvcmZpbGU6XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcmZpbGUnLCBtZXNzYWdlKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG1lc3NhZ2UubmFtZSA9IGV2ZW50bmFtZXMuZm9sbG93O1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgTW9kdWxlRXZlbnRFbWl0dGVyLmVtaXQoZXZlbnRuYW1lcy5lcnJvciwgbWVzc2FnZSwgX2xpc3RlbmVyKTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBzZWFyY2hTdG9yYWdlKHNlYXJjaCkge1xuICAgIGNvbnN0IGVudHJ5ID0gYXdhaXQgbmF2aWdhdG9yLnN0b3JhZ2UuZ2V0RGlyZWN0b3J5KCk7XG4gICAgZm9yIGF3YWl0IChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cnkuZW50cmllcygpKSB7XG4gICAgICBpZiAoc2VhcmNoID09PSBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gY2xlYW5TdG9yYWdlKGVudHJ5ID0gbnVsbCkge1xuICAgIGVudHJ5ID0gKGVudHJ5KSA/IGVudHJ5IDogYXdhaXQgbmF2aWdhdG9yLnN0b3JhZ2UuZ2V0RGlyZWN0b3J5KCk7XG4gICAgZm9yIGF3YWl0IChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cnkuZW50cmllcygpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBlbnRyeS5yZW1vdmVFbnRyeShrZXkpO1xuICAgICAgICBjb25zb2xlLmxvZygnIFN1Y2Nlc3MgcmVtb3ZlIHN0b3JhZ2UgJywga2V5KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCcgZXJyb3IgcmVtb3ZlIHN0b3JhZ2UgJyArIGtleSwgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gZW5kRmV0Y2gobWVzc2FnZSwgY2xlYW4gPSBmYWxzZSkge1xuICAgIG1lc3NhZ2UubmFtZSA9IGV2ZW50bmFtZXMudGVybWluYXRlO1xuICAgIGlmIChwcm9wZXJ0aWVzLmZvbGxvdykge1xuICAgICAgcHJvcGVydGllcy5zdHJlYW1oYW5kbGUgPSBhd2FpdCBwcm9wZXJ0aWVzLmZpbGVzdHJlYW0uY3JlYXRlV3JpdGFibGUoKTtcbiAgICAgIG1lc3NhZ2UubmFtZSA9IGV2ZW50bmFtZXMuZm9sbG93O1xuICAgICAgTW9kdWxlRXZlbnRFbWl0dGVyLmVtaXQoZXZlbnRuYW1lcy5mb2xsb3csIG1lc3NhZ2UsIF9saXN0ZW5lcilcbiAgICAgIGF3YWl0IGluaXRaaXAoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJiaWdmaWxlXCIpICYmIG1lc3NhZ2UuYmlnZmlsZSAhPT0gZmFsc2UpIHtcbiAgICAgIHByb3BlcnRpZXMuZ3ppcHBlZCA9IG51bGw7XG5cbiAgICAgIGlmIChwcm9wZXJ0aWVzLmhhbmRsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbWVzc2FnZS5uYW1lID0gZXZlbnRuYW1lcy5mb2xsb3c7XG4gICAgICAgIE1vZHVsZUV2ZW50RW1pdHRlci5lbWl0KGV2ZW50bmFtZXMuZm9sbG93LCBtZXNzYWdlLCBfbGlzdGVuZXIpO1xuICAgICAgICBjb25zb2xlLmxvZygnIGhhbmRsZXJzIHRvIGRvJywgbWVzc2FnZSk7XG4gICAgICAgIGlmIChwcm9wZXJ0aWVzLmhhbmRsZXJzLmxlbmd0aCA+IDApIGF3YWl0IGV4ZWNIYW5kbGVyKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgcHJvcGVydGllcy56aXAgPSBudWxsO1xuICAgIE1vZHVsZUV2ZW50RW1pdHRlci5lbWl0KGV2ZW50bmFtZXMuY29tcGxldGUsIG1lc3NhZ2UsIF9saXN0ZW5lcik7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBzZW5kQ2h1bmsocGF0aCwgc3RhcnQgPSAwLCBjaHVua251bSA9IDAsIGNodW5rc2l6ZSA9IE1BWFNJWkUpIHtcbiAgICBjb25zb2xlLmxvZygnc2VuZCBjaHVuayAnLCBwcm9wZXJ0aWVzLmd6aXBwZWQpXG4gICAgY29uc3QgZmlsZSA9IGF3YWl0IHByb3BlcnRpZXMuZ3ppcHBlZC5nZXRGaWxlKCk7XG4gICAgY29uc3QgZW5kID0gTWF0aC5taW4oc3RhcnQgKyBjaHVua3NpemUsIGZpbGUuc2l6ZSk7XG4gICAgaWYgKGVuZCA9PT0gZmlsZS5zaXplKSB7XG4gICAgIGF3YWl0IHNlbmRaaXBGaWxlKGZpbGUsIHBhdGgsIG51bGwsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYXJ0ZmlsZSA9IGZpbGUuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICBwYXJ0ZmlsZS5uYW1lID0gY2h1bmtudW0gKyAnXycgKyBmaWxlLm5hbWU7XG4gICAgICBhd2FpdCBzZW5kWmlwZmlsZShwYXJ0ZmlsZSwgcGF0aCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBzdGFydCArPSBlbmQ7XG4gICAgICAgIGNodW5rbnVtKys7XG5cbiAgICAgICAgaWYgKHN0YXJ0IDw9IGZpbGUuc2l6ZSkgYXdhaXQgc2VuZENodW5rKHBhdGgsIHN0YXJ0LCBjaHVua251bSwgY2h1bmtzaXplKTtcbiAgICAgIH0sIHRydWUpXG4gICAgfVxuICAgIHJldHVybiBjaHVua251bTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBnZXRGaWxlKGZpbGVzdHJlYW0gPSBudWxsKSB7XG4gICAgZmlsZXN0cmVhbSA9IChmaWxlc3RyZWFtID09PSBudWxsKSA/IHByb3BlcnRpZXMuZmlsZXN0cmVhbSA6IGZpbGVzdHJlYW07XG4gICAgY29uc3QgZmlsZSA9IGF3YWl0IGZpbGVzdHJlYW0uZ2V0RmlsZSgpO1xuICAgIHJldHVybiBmaWxlO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHNlbmRaaXBGaWxlKGZpbGUsIHBhdGgsIGNhbGxiYWNrY2h1bmsgPSBudWxsLCBiaWdmaWxlID0gZmFsc2UpIHtcbiAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgbmFtZTogZXZlbnRuYW1lcy5wZW5kaW5nLFxuICAgICAgcGF0aDogcGF0aFxuICAgIH1cbiAgICBpZiAoYmlnZmlsZSkgbWVzc2FnZS5iaWdmaWxlID0gZmlsZS5uYW1lO1xuICAgIE1vZHVsZUV2ZW50RW1pdHRlci5lbWl0KGV2ZW50bmFtZXMuY29tcGxldGUsIG1lc3NhZ2UsIF9saXN0ZW5lcik7XG4gICAgY29uc3QgZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBwYXRoID0gcGF0aCArICgocGF0aC5zbGljZSgtMSkgPT09IGRpcnNlcGFyYXRvcikgPyBgYCA6IGRpcnNlcGFyYXRvcikgKyBmaWxlLm5hbWU7XG4gICAgZm9ybWRhdGEuYXBwZW5kKCdwYXRoJywgcGF0aCk7XG4gICAgZm9ybWRhdGEuYXBwZW5kKCdmaWxlJywgZmlsZSwgZmlsZS5uYW1lKTtcbiAgICBpZiAocHJvcGVydGllcy5wYXJ0KSBmb3JtZGF0YS5hcHBlbmQoJ3BhcnQnLCBwcm9wZXJ0aWVzLnBhcnQpO1xuICAgIGVsc2UgaWYgKGNhbGxiYWNrY2h1bmsgIT09IG51bGwpIGZvcm1kYXRhLmFwcGVuZCgnaXNjaHVuaycsIHRydWUpO1xuICAgIGZldGNoKG9wdGlvbnMudXBsb2FkdXJsLCB7XG4gICAgICAvLyAgbW9kZTogJ2NvcnMnLFxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIixcbiAgICAgIGJvZHk6IGZvcm1kYXRhLFxuICAgIH0pLnRoZW4oYXN5bmMgKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncmVzcG9uc2UtLS0tLS0tLS0tLS0tLS0tLS0tLS0tJywgcmVzcG9uc2UpO1xuICAgICAgY29uc29sZS5sb2coJ2NhbGxiYWNrY2h1bmstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJywgY2FsbGJhY2tjaHVuaylcbiAgICAgIG1lc3NhZ2UucGF0aCA9IHBhdGg7XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgb25FcnJvcihldmVudG5hbWVzLmVycm9yLCBtZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxiYWNrY2h1bmsgIT09IG51bGwpIHsgY29uc29sZS5sb2coJ2NhbGxiYWNrY2h1bmsgbm90IG51bGwnKVxuICAgICAgICBhd2FpdCBjYWxsYmFja2NodW5rKCk7XG4gICAgICB9IGVsc2UgYXdhaXQgZW5kRmV0Y2gobWVzc2FnZSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB1dWlkLFxuICAgIGV2ZW50bmFtZXMsXG4gICAgc2NhbkJyb3dzZSxcbiAgICBzY2FuSGFuZGxlLFxuICAgIHF1b3RhRXN0aW1hdGUsXG4gICAgYnJvd3NlclJlcXVpcmVkXG4gIH1cbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/modules/files/js-dirtozip.js\n")}}]);
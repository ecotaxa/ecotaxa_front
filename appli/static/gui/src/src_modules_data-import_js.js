/*! For license information please see src_modules_data-import_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_data-import_js"],{"./src/modules/data-import.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataImport: () => (/* binding */ DataImport)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_module_tom_select_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/module-tom-select.js */ \"./src/modules/module-tom-select.js\");\n/* harmony import */ var _modules_project_privileges_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/project-privileges.js */ \"./src/modules/project-privileges.js\");\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\n\n\n\n\nconst key_privileges = Object.keys(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges).reduce(function(result, key) {\n  result[key] = key;\n  return result;\n}, {});\nlet instance;\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported = 'imported';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.tomselected = 'tomselected';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hiddenaccessible = 'ts-hidden-accessible';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.arrowout = 'icon-arrow-pointing-out';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.arrowin = 'icon-arrow-pointing-in';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton = '.import-list-reset';\nclass DataImport {\n  content_selector = '.modal-content';\n  imports = [];\n  taxos = [\"preset\", \"extra\"];\n  importcontainer;\n  importzoneid;\n  importid = 'importzone';\n  selectors;\n  button;\n  clearbutton;\n  replacebutton;\n  tabbutton;\n  tbl = null;\n  constructor(tbl, what = null, selector = null) {\n    if (!tbl) return;\n    // tbl is a TableComponent  ?\n    this.tbl = (typeof(tbl) === 'object') ? tbl : null;\n    selector = (selector === null) ? ((this.tbl.cellidname) ? \"data-\" + this.tbl.cellidname : \"data-id\") : selector;\n    // get the table from table component or html table element id\n    this.dom = (this.tbl) ? this.tbl.dom : document.getElementById(tbl);\n    if (!this.dom) return;\n    what = (what) ? dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(what) : (tbl && tbl.params && tbl.params.import) ? tbl.params.import : (this.dom.dataset.import) ? dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(this.dom.dataset.import) : null;\n    if (!instance || instance.doc !== this.dom) {\n      // defaultoptions - keep like that\n\n      const options = {\n        importcontainer: '#data-import-' + what,\n        btns: '.btns-imports',\n        button: '#add-import-' + what,\n        replacebutton: '#replace-import-' + what,\n        tabbutton: '#tab-import-' + what,\n      };\n      this.selector = selector;\n\n      this.importcontainer = options.importcontainer instanceof HTMLElement ? options.importcontainer : document.querySelector(options.importcontainer);\n      this.form = (options.form) ? ((options.form) instanceof HTMLElement ? options.form : document.querySelector(options.form)) : this.dom.closest('form');\n      this.button = options.button instanceof HTMLElement ? options.button : document.querySelector(options.button);\n      this.replacebutton = options.replacebutton instanceof HTMLElement ? options.replacebutton : document.querySelector(options.replacebutton);\n      this.tabbutton = options.tabbutton instanceof HTMLElement ? options.tabbutton : document.querySelector(options.tabbutton);\n      this.importid = this.importid + '_' + what;\n      this.init(options);\n      instance = this;\n\n    }\n    return instance;\n  }\n\n  init(options) {\n    // hide importzone\n    this.showImport(false);\n    // remove line of target proj\n    let projid = this.form.querySelector('#' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.projid);\n    if (projid && projid.value) {\n      projid = this.dom.querySelector('[' + this.selector + '=\"' + projid.value + '\"]');\n      if (projid) projid.hidden = true;\n    }\n    const indextocheck = this.indexToCheck();\n    this.selectors = this.dom.querySelectorAll('[' + this.selector + '] button, [' + this.selector + '] input');\n    this.selectors.forEach(selector => {\n      // checkbox possible\n      const index = Array.from(selector.parentElement.children).indexOf((selector));\n      if (indextocheck && selector.closest('tr').children[indextocheck[index]].innerHTML === '') selector.disabled = true;\n      else {\n        const evt = (selector.tagName.toLowerCase() === 'input') ? 'change' : 'click';\n        const apply_selection = (e) => {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          const target = e.currentTarget;\n          target.disabled = true;\n          this.toImport(target.parentElement, index);\n        };\n        selector.removeEventListener(evt, apply_selection, false);\n        selector.addEventListener(evt, apply_selection, false);\n      };\n    });\n    if (this.tabbutton) {\n      this.tabbutton.addEventListener('click', (e) => {\n        e.stopImmediatePropagation();\n        e.preventDefault();\n        this.resizeZone(e);\n      });\n    }\n  }\n  columnProperty(name, index, th) {\n    if (this.tbl) return (this.tbl.grid.columns[index].hasOwnProperty(name)) ? this.tbl.grid.columns[index][name] : null;\n    else return (th.dataset[name]) ? th.dataset.name : null;\n  }\n  columnIndex(prop, value) {\n    return Array.from(this.dom.querySelectorAll('thead th')).findIndex(th => (th.dataset[prop] && th.dataset[prop] === value));\n  }\n  gridColumnIndex(prop, value) {\n    if (this.tbl) return this.tbl.grid.columns.findIndex(column => (column.hasOwnProperty(prop) && column[prop] === value));\n    else return this.columnIndex(prop, value);\n  }\n  rowIndex(td, trs) {\n    const ref = (td.parentElement) ? td.parentElement : null;\n    if (!ref) return null;\n    return trs.findIndex(tr => (tr === ref));\n  }\n  toImport(td, whatpart = 0) {\n    const grid = (this.tbl) ? this.tbl.grid : null;\n    const thcells = Array.from(this.dom.querySelectorAll('thead th'));\n    const trs = Array.from(this.dom.querySelectorAll('tbody tr'));\n    const datas = (grid) ? grid.data : trs.map(tr => {\n      return Array.from(tr.childNodes).forEach(cell => {\n        return cell.innerText;\n      });\n    }); // cell values in json  - no parse\n    if (td.tagName.toLowerCase() !== 'td') td = td.closest('td');\n    const rowindex = this.rowIndex(td, trs);\n    if (rowindex === null) return;\n    let showbtns = true;\n    const cellindex = td.cellIndex;\n    const th = thcells[cellindex];\n    const tds = trs[rowindex];\n    const what = this.columnProperty('what', cellindex, th);\n    if (!what) return;\n    const parts = this.columnProperty('parts', cellindex, th);\n    let contact = null;\n    let selectcells = this.columnProperty('selectcells', cellindex, th);\n    selectcells = (selectcells) ? ((parts) ? [parts[whatpart]] : selectcells) : null;\n    if (!selectcells) return;\n    if (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.settings || what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact] = this.findContact(datas[rowindex]);\n    const importzone = (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo || what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) ? this.createImportzone(what) : null;\n\n    this.addResetButton();\n    let ts = null;\n    selectcells.forEach((name, index) => {\n      index = this.gridColumnIndex('name', name);\n      if (index >= 0) {\n        const tdindex = this.columnIndex('name', name);\n        // show import buttons if importzone\n        const cell = (tdindex >= 0) ? trs[rowindex].cells[tdindex] : null;\n        if (cell) cell.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n        const celldata = datas[rowindex][index];\n        const thcell = (tdindex >= 0) ? thcells[tdindex] : null;\n        switch (what) {\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo:\n            if (!importzone) return;\n            // accumulate and show in import win - move the form field in modal win to view the changes and benefit of tom-select component functs...\n            ts = importzone.tomselect;\n            let taxons = celldata;\n            if (taxons) {\n              if (ts) {\n                // merge taxons and options - unique\n                Object.values(ts.options).forEach((opt) => {\n                  let obj = {};\n                  obj[opt[ts.settings.valueField]] = opt[ts.settings.labelField];\n                  if (!taxons[opt[ts.settings.valueField]]) taxons = Object.assign(taxons, obj);\n                });\n                taxons = Object.entries(taxons);\n                // sort taxons\n                taxons.sort((a, b) => {\n                  let x = a[1];\n                  let y = b[1];\n                  return +(x > y) || -(y > x);\n                });\n                ts.clear();\n                ts.clearOptions();\n                // add taxons items\n                taxons.forEach(([key, text]) => {\n                  if (!ts.getItem(key)) {\n                    if (!ts.getOption(key)) {\n                      let obj = {};\n                      obj[ts.settings.valueField] = key;\n                      obj[ts.settings.labelField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(text.trim());\n                      ts.addOption(obj);\n                    }\n                    ts.addItem(key);\n                  }\n                });\n              } else {\n                Object.values(importzone.options).forEach(opt => {\n                  let obj = {};\n                  obj[opt.value] = opt.text;\n                  if (!taxons[opt.value]) taxons = Object.assign(taxons, obj);\n                });\n                taxons = Object.entries(taxons);\n                taxons.sort((a, b) => {\n                  let x = a[1];\n                  let y = b[1];\n                  return +(x > y) || -(y > x);\n                });\n                importzone.innerHTML = ``;\n                taxons.forEach(([key, text]) => {\n                  if (!importzone.querySelector('option[value=\"' + key + '\"]')) {\n                    const o = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.create_box)('option', {\n                      value: key,\n                      selected: 'selected',\n                      text: text\n                    }, importzone);\n                  }\n                });\n              }\n              showbtns = (taxons.length > 0);\n              taxons = null;\n            }\n\n            break;\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges:\n            const privs = celldata;\n            // set everybody to 'view' if more than one project imported\n            const resetpriv = ((ts && ts.items.length > 0) || (importzone.selectedIndex > 0));\n            if (!importzone.tomselect) {\n              importzone.currentlist = {};\n              const jsTomSelect = (0,_modules_module_tom_select_js__WEBPACK_IMPORTED_MODULE_1__.JsTomSelect)();\n              jsTomSelect.applyTo(importzone);\n            }\n            ts = importzone.tomselect;\n            Object.entries(privs).forEach(([priv, members]) => {\n              members.sort((a, b) => {\n                return (b.name > a.name);\n              });\n              members.forEach(member => {\n                const newpriv = (resetpriv) ? key_privileges.viewers : priv; // viewer if more than one project imported\n                let opt;\n                if (!importzone.currentlist || !importzone.currentlist[member.id]) {\n                  if (ts) {\n                    opt = ts.items.indexOf(member.id);\n                    //TODO - test - opt should always be 0\n                    if (opt >= 0) {\n                      ts.removeItem(member.id);\n                      ts.removeOption(member.id);\n                    }\n                    // addoption && addItem\n                    opt = {\n                      optgroup: newpriv\n                    }\n                    opt[ts.settings.valueField] = member.id;\n                    opt[ts.settings.searchField] = member.name;\n                    opt[ts.settings.labelField] = member.name;\n                    ts.addOption(opt);\n                    ts.addItem(member.id);\n                  } else {\n                    opt = importzone.querySelector('option[value=\"' + member.id + '\"]');\n                    if (opt === null) {\n                      opt = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.create_box)('option', {\n                        value: member.id,\n                        dataset: {\n                          optgroup: newpriv\n                        },\n                        selected: true,\n                        defaultSelected: true,\n                        text: member.name\n                      })\n                      /*  opt = document.createElement('option');\n                        opt.value = member.id;\n                        opt.dataset.optgroup = newpriv;\n                        opt.selected = opt.defaultSelected = true;\n                        opt.text = member.name;*/\n                      importzone.add(opt);\n                    } else opt.dataset.optgroup = newpriv;\n                  }\n                }\n              });\n              if (ts) ts.refreshOptions(true);\n            });\n\n            showbtns = (((ts) ? ts.items.length : importzone.selectedIndex + 1) > 0);\n\n\n            break;\n          default:\n            this.imports[name] = celldata;\n            if (cell !== null) {\n              if (cell.dataset.autocomplete) {\n                // select elements where key / value in different columns\n                this.imports[name] = {\n                  value: celldata,\n                  key: null\n                };\n                let el = null;\n                thcells.every((t, idx) => {\n                  if (t.dataset.name == thcell.dataset.autocomplete) {\n                    el = idx;\n                    return false;\n                  }\n                  return true;\n                });\n                if (el !== null) {\n                  el = datas[rowindex][el];\n\n                  this.imports[name].key = el;\n                }\n              } else if (cell.dataset.value) this.imports[name] = cell.dataset.value;\n\n            }\n\n            break;\n        }\n      };\n    });\n\n    if (thcells.length) {\n      if (this.button) {\n        const activate = (!this.button.dataset.activated && (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo || what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges));\n        this.showImport(showbtns);\n        if (activate) this.activateButtons(what, selectcells);\n      } else this.makeImport(null, selectcells, what, true);\n    }\n    //\n\n  }\n  messageZone(item) {\n    console.log('itemmessage', item);\n  }\n  activateButtons(what, selectcells) {\n\n    this.button.addEventListener('click', (e) => {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      this.makeImport(e.currentTarget, selectcells, what, true);\n\n    });\n    this.replacebutton.addEventListener('click', (e) => {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      this.makeImport(e.currentTarget, selectcells, what, true);\n\n    });\n\n    this.button.dataset.activated = true;\n    this.replacebutton.dataset.activated = true;\n  }\n\n  findContact(tds, name = 'contact') {\n    const index = this.gridColumnIndex('name', name);\n    if (index >= 0) return tds[index] ? tds[index] : null;\n\n    return null;\n  }\n\n  renderPrivileges(importzone, replace = false) {\n    let privileges = {};\n    const tzone = importzone.tomselect;\n\n    const pushpriv = (member, priv) => {\n      const obj = {\n        id: member.id,\n        name: member.name,\n        priv: priv\n      }\n      if (privileges[priv]) privileges[priv].push(obj);\n      else privileges[priv] = [obj];\n    }\n\n    if (tzone) {\n      const members = [...tzone.items];\n      const options = Object.assign({}, tzone.options);\n      members.forEach(member => {\n        member = options[member];\n        if (member) pushpriv(member, member.optgroup);\n\n      })\n    } else {\n      importzone.options.forEach(member => {\n        if (member.selected) pushpriv(member, member.dataset.optgroup);\n      })\n    }\n\n    if (this.importPrivileges(privileges, replace)) {\n      if (tzone) {\n        tzone.clear();\n        tzone.clearOptions();\n      } else importzone.innerHTML = ``;\n\n    }\n\n  }\n\n  importPrivileges(privileges, clear = false) {\n    const projectPrivileges = this.form.querySelector('.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.privileges.ident);\n\n    if (projectPrivileges === null || !projectPrivileges.jsprivileges) return;\n    const importedtag = (input) => {\n      this.setImportedTag(input, null);\n    }\n    const dismiss = () => {\n      this.dismiss();\n    }\n    const contact = (clear === true && this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact]) ? this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact] : null;\n    return (projectPrivileges.jsprivileges.importPrivileges(privileges, clear, contact, importedtag, dismiss));\n  }\n\n  resetSelectors() {\n    this.selectors.forEach((selector, i) => {\n      if (selector.disabled) selector.disabled = false;\n    });\n    this.dom.querySelectorAll('td.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected).forEach(td => {\n      td.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n    });\n  }\n\n  activateClear() {\n    const clearbutton = document.getElementById('clear-' + this.importid);\n    if (!clearbutton) return;\n    clearbutton.addEventListener('click', (e) => {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      if (!this.importcontainer) return;\n      this.resetSelectors();\n      this.button.disabled = false;\n      this.replacebutton.disabled = false;\n      this.showImport(false);\n    });\n  }\n  createImportzone(name) {\n    let importzone = this.showImport(true),\n      ts = false;\n    if (!importzone) {\n      if (name === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) {\n        importzone = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.create_box)('select', {\n          id: this.importid,\n          dataset: {\n            type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.user,\n            priv: true,\n          },\n          multiple: true\n        }, this.importcontainer);\n        importzone = document.getElementById(this.importid);\n        ts = true;\n      } else {\n        const import_target = (this.form.querySelector('[name=\"' + name + '\"]')) ? this.form.querySelector('[name=\"' + name + '\"]') : this.form.querySelector('[data-importfield=\"' + name + '\"]');\n        if (!import_target) return;\n        ts = import_target.tomselect;\n        this.importzoneid = import_target.id;\n        // tomselect ?\n        importzone = import_target.cloneNode();\n        importzone.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.tomselected);\n        importzone.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hiddenaccessible);\n        // keep original id to replace data on apply import\n        importzone.dataset.origin = importzone.id;\n        importzone.id = this.importid;\n        importzone.name = this.importid + '_' + importzone.name;\n        this.importcontainer.prepend(importzone);\n        if (ts) {\n          const jsTomSelect = (0,_modules_module_tom_select_js__WEBPACK_IMPORTED_MODULE_1__.JsTomSelect)();\n          jsTomSelect.applyTo(importzone);\n        }\n        this.activateClear();\n      }\n\n    }\n    return importzone;\n\n  }\n\n  makeImport(btn, selectcells, what, close = false) {\n    let done = true,\n      ts = null;\n    const importzone = (this.importcontainer) ? this.importcontainer.querySelector('#' + this.importid) : null;\n\n    switch (what) {\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo:\n\n        if (!importzone) return false;\n        const import_target = this.form.querySelector('#' + importzone.dataset.origin);\n\n        if (!import_target) return false;\n        ts = import_target.tomselect;\n        if (ts) {\n          // only if replace specified\n          if (btn.dataset.replace && btn.dataset.replace === 'replace') {\n            ts.clear();\n            ts.clearOptions();\n          }\n          const tzone = importzone.tomselect;\n          const items = [...tzone.items];\n          const options = Object.assign({}, tzone.options);\n          items.forEach((e, i) => {\n            let el = {};\n            el[ts.settings.valueField] = e;\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(options[e][ts.settings.searchField]);\n            if (!ts.getOption(e)) ts.addOption(el);\n            ts.addItem(e);\n          });\n          tzone.clear();\n          tzone.clearOptions();\n        } else {\n          if (btn.dataset.replace && btn.dataset.replace === 'replace') import_target.innerHTML = ``;\n          import_target.innerHTML = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(importzone.innerHTML);\n          importzone.innerHTML = ``;\n        }\n        done = true;\n        break;\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges:\n        if (!importzone) return false;\n        done = this.renderPrivileges(importzone, (btn.dataset.replace && btn.dataset.replace === 'replace'));\n        if (importzone.currentlist) importzone.currentlist = {};\n        break;\n      default:\n        const ts_add_select_item = function(ts, data) {\n          const el = {};\n          if (typeof(data) == 'string') {\n            el[ts.settings.labelField] = data;\n            el[ts.settings.valueField] = data;\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(data);\n          } else {\n            el[ts.settings.labelField] = data.key;\n            el[ts.settings.valueField] = data.key;\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(data.value);\n          }\n          if (!ts.getOption(el[ts.settings.valueField])) ts.addOption(el);\n          if (!ts.getItem(el[ts.settings.valueField])) ts.addItem(el[ts.settings.valueField]);\n        }\n        const add_select_option = function(input, data) {\n          let attr = {\n            selected: true\n          };\n          if (typeof(data) === 'string') attr.value = attr.text = data;\n          else {\n            attr.value = data.key;\n            attr.text = data.value;\n          }\n          const option = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.create_box)('option', attr, input);\n\n        }\n        const add_input_option = function(input, data) {\n          if (input.multiple) {\n            let values = input.value.split(',');\n            values.push(data.key);\n            input.value = values.join(',');\n          } else input.value = data;\n\n        }\n        selectcells.forEach((name, index) => {\n          let input = ((this.form.querySelector('[data-importfield=\"' + name + '\"]')) ? this.form.querySelector('[data-importfield=\"' + name + '\"]') : this.form.querySelector('[name=\"' + name + '\"]'));\n          if (input && input.dataset.noimport) return;\n          if (input && this.imports[name] !== undefined) {\n            const type = (input.type) ? input.type : input.tagName.toLowerCase();\n            ts = input.tomselect;\n            if (name === 'init_classif_list') {\n              let ids = this.imports[name];\n              if (Array.isArray(ids)) ids = ids.join(',');\n              else ids = ids.replace('[', '').replace(']', '').replaceAll(' ', '');\n              if (ts) {\n                ts.wrapper.classList.add('wait-for-results');\n                ts.clear(false);\n                ts.clearOptions();\n              }\n              if (ids !== '') {\n                if (ts) ts.wrapper.classList.add('wait-for-results');\n                const formData = new FormData();\n                formData.append('idlist', ids);\n                const url = '/search/taxoresolve' //+ new URLSearchParams({'idlist': ids});\n                fetch(url, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.fetchSettings)({\n                  'method': 'POST',\n                  'body': formData\n                })).then(response =>\n                  response.json()\n                ).then(results => {\n                  const ts = input.tomselect;\n                  if (ts) {\n\n                    Object.entries(results).forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(text)\n                      }\n                      ts_add_select_item(ts, el);\n                    });\n                    ts.wrapper.classList.remove('wait-for-results');\n                  } else if (type.indexOf('select') === 0) {\n\n                    input.querySelectorAll('option').forEach(option => {\n                      option.remove();\n                    });\n                    Object.entries(results).forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(text)\n                      }\n                      add_input_option(input, el);\n                    });\n\n                  } else {\n                    Object.entries(results).forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(text)\n                      }\n                      add_select_option(input, el);\n                    });\n\n                  }\n\n                  results = null;\n                  this.setImportedTag(input);\n                });\n              }\n            } else if (ts) {\n              ts_add_select_item(ts, this.imports[name]);\n              this.setImportedTag(input);\n            } else {\n              switch (type) {\n                case 'radio':\n                case 'checkbox':\n                  input = this.form.querySelector('[name=\"' + name + '\"][value=\"' + this.imports[name] + '\"]');\n                  if (input) input.checked = true;\n                  break;\n                case 'select':\n                  if (input.multiple) this.imports[name].forEach(data => {\n                    add_select_option(input, data)\n                  });\n                  else add_select_option(input, this.imports[name]);\n\n                  break;\n                default:\n                  input.value = this.imports[name];\n                  break;\n              }\n              this.setImportedTag(input);\n            }\n            if (what !== _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.settings) input.focus();\n            done = done && true;\n            // set imported tag to fieldbox\n\n\n          } else if (name === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) {\n            //const clearprivileges = (what === typeimport.settings);\n            const clearprivileges = false;\n            done = done && this.importPrivileges(this.imports[name], clearprivileges);\n          }\n        });\n        break;\n    }\n    if (done === true && close == true) {\n      this.dismiss();\n      if (this.form) this.form.dispatchEvent(new CustomEvent('validate'));\n    }\n  }\n\n  setImportedTag(input, selector = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.form.formbox) {\n    let el = (selector === null) ? input : (input.closest(selector) ? input.closest(selector) : input.closest('fieldset'));\n    if (!el) return;\n    const removetag = (e) => {\n      delete el.dataset.isimported;\n      el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported);\n      input.removeEventListener('change', removetag);\n    }\n    el.dataset.isimported = this.form.dataset.isimported;\n    el.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported);\n    if (input.dataset.unique !== undefined) {\n      input.dataset.unique = input.value;\n    }\n    setTimeout(function() {\n      input.addEventListener('change', removetag);\n    }, 500);\n  }\n\n  dismiss(clear = false) {\n    if (this.button) this.showImport(false);\n    const container = this.dom.closest('details');\n    if (container) {\n      container.open = false;\n      if (clear === true) container.querySelector(this.content_selector).innerHTML = ``;\n    }\n\n  }\n  indexToCheck() {\n    // index of cells to check if empty and disable row  import btn\n    const grid = (this.tbl) ? this.tbl.grid : null;\n    if (!grid) return [0];\n    let index = grid.columns.findIndex(column => (column.what && column.what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo));\n    if (index === -1) return [0];\n    const parts = (grid.columns[index].parts) ? grid.columns[index].parts : null;\n    if (parts) {\n      const indextocheck = grid.columns.filter((column, i) => {\n        if (parts.indexOf(column.name) >= 0) return i;\n      }).map(v => {\n        return v.index;\n      });\n      return indextocheck;\n    }\n\n  }\n  addResetButton() {\n    if (!this.tbl || !this.tbl.params.hasOwnProperty(\"reset\")) return;\n    let resetbtn = this.dom.parentElement.querySelector(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton);\n    if (resetbtn === null) {\n      resetbtn = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.create_box)('a', {\n        class: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton.substr(1),\n        text: this.tbl.params.reset\n      }, this.dom.parentElement.firstChild);\n      /*  resetbtn = document.createElement('a');\n        resetbtn.classList.add(domselectors.resetbutton.substr(1));\n        resetbtn.textContent = this.tbl.params.reset;\n        this.dom.parentElement.firstChild.prepend(resetbtn);*/\n    }\n    resetbtn.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      const selectors = this.selectors = this.dom.querySelectorAll('[' + this.selector + '] button:disabled, [' + this.selector + '] input:disabled');\n      selectors.forEach(selector => {\n        selector.disabled = false;\n        const sel = selector.closest('tr').querySelector('.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n        if (sel) sel.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n      });\n    });\n\n  }\n  // show / hide importzone and buttons\n  showImport(show) {\n    if (!this.button) return;\n    if (show === false) {\n      this.button.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.replacebutton.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.importcontainer.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      if (this.tabbutton) this.tabbutton.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n    } else {\n      const importzone = this.importcontainer.querySelector('#' + this.importid);\n      if (importzone) {\n        //  const offseth = importzone.tomselect.control.offsetHeight;\n        //  const scrollh = importzone.tomselect.control.scrollHeight;\n        this.button.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n        this.replacebutton.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n        this.importcontainer.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n        this.button.disabled = false;\n        if (this.tabbutton) {\n          this.tabbutton.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n          if (importzone.tomselect) {\n            this.tabbutton.disabled = false;\n          } else this.tabbutton.disabled = true;\n        }\n      }\n      return importzone;\n    }\n    return null;\n  }\n  // resize importzone\n  resizeZone(e) {\n    const div = this.importcontainer.closest(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.import.zoneimport);\n    if (!div) return;\n    div.parentElement.classList.toggle(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.showfull);\n    const icon = e.currentTarget.querySelector('i');\n    if (icon) {\n      icon.classList.toggle(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.arrowout);\n      icon.classList.toggle(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.arrowin);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/data-import.js\n")},"./src/modules/module-tom-select.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsTomSelect: () => (/* binding */ JsTomSelect)\n/* harmony export */ });\n/* harmony import */ var _css_tom_select_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/tom-select.css */ \"./src/css/tom-select.css\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var tom_select_dist_js_tom_select_base_min_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tom-select/dist/js/tom-select.base.min.js */ \"./node_modules/tom-select/dist/js/tom-select.base.min.js\");\n/* harmony import */ var tom_select_dist_js_tom_select_base_min_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(tom_select_dist_js_tom_select_base_min_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var tom_select_dist_js_plugins_remove_button_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tom-select/dist/js/plugins/remove_button.js */ \"./node_modules/tom-select/dist/js/plugins/remove_button.js\");\n/* harmony import */ var tom_select_dist_js_plugins_remove_button_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(tom_select_dist_js_plugins_remove_button_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var tom_select_dist_js_plugins_clear_button_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tom-select/dist/js/plugins/clear_button.js */ \"./node_modules/tom-select/dist/js/plugins/clear_button.js\");\n/* harmony import */ var tom_select_dist_js_plugins_clear_button_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(tom_select_dist_js_plugins_clear_button_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var tom_select_dist_js_plugins_caret_position_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tom-select/dist/js/plugins/caret_position.js */ \"./node_modules/tom-select/dist/js/plugins/caret_position.js\");\n/* harmony import */ var tom_select_dist_js_plugins_caret_position_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(tom_select_dist_js_plugins_caret_position_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\n\n\n\n\n\ntom_select_dist_js_tom_select_base_min_js__WEBPACK_IMPORTED_MODULE_2___default().define('remove_button', (tom_select_dist_js_plugins_remove_button_js__WEBPACK_IMPORTED_MODULE_3___default()));\ntom_select_dist_js_tom_select_base_min_js__WEBPACK_IMPORTED_MODULE_2___default().define('clear_button', (tom_select_dist_js_plugins_clear_button_js__WEBPACK_IMPORTED_MODULE_4___default()));\ntom_select_dist_js_tom_select_base_min_js__WEBPACK_IMPORTED_MODULE_2___default().define('caret_position', (tom_select_dist_js_plugins_caret_position_js__WEBPACK_IMPORTED_MODULE_5___default()));\n\n\nlet users_list = {};\n\nfunction _get_label(el, labelfield, item = false) {\n  if (!labelfield) return el.text;\n  let label = [];\n  if (Object.keys(el).indexOf(labelfield) >= 0) label.push(el[labelfield]);\n  else if (labelfield.indexOf('+') > 0) {\n    if (item === true) label.push(el[labelfield.split('+')[0]]);\n    else labelfield.split('+').forEach(l => {\n      if (l in el) label.push(el[l]);\n    });\n  }\n  return label.join(` `);\n}\n// settings for autocomplete select component - users , instruments , taxons\nfunction JsTomSelect() {\n  function applyTo(item, settings = {}, siblings = null) {\n    const id = item.getAttribute('id');\n    const multiple = item.hasAttribute('multiple');\n    const type = item.dataset.type;\n    let option = {\n        url: '',\n        settings: settings\n      },\n      init_canceltag = (tag) => {\n        tag.addEventListener('click', (e) => {\n          const v = e.currentTarget.closest(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.domselectors.component.tomselect.item).dataset.value;\n          if (v) {\n            e.stopImmediatePropagation();\n            item.tomselect.removeItem(v);\n          }\n        })\n      }\n    if (item.dataset.create && item.dataset.create === 'true') {\n      //  option.settings.create = true;\n      //  option.settings.createOnBlur = true;\n      option.settings.create = true;\n      option.settings.addPrecedence = true;\n    }\n    if (item.dataset.empty && item.dataset.empty === 'true') {\n      option.settings.allowEmptyOption = true;\n    }\n    if (item.dataset.maxitems) {\n      option.settings.maxItems = parseInt(item.dataset.maxitems);\n    }\n    if (item.dataset.addoption) {\n      option.settings.addoption = item.dataset.addoption.split(',');\n    }\n    /*,\n          on_clear = function() {\n\n            if (item.tagName.toLowerCase() === 'select')\n              item.querySelectorAll('option:checked').forEach(option => {\n                option.removeAttribute('selected');\n              });\n            item.selectedIndex = -1;\n            return true;\n          }*/\n    ;\n\n    switch (type) {\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.project:\n        // for top navigation search and collections\n        const maxitems = (multiple) ? null : 1;\n        option.url = \"/gui/prjlist/\";\n        option.settings = { ...option.settings,\n          ...{\n            valueField: 'id',\n            searchField: 'text',\n            labelField: 'text',\n            openOnFocus: false,\n            maxItems: maxitems,\n            allowEmptyOption: false,\n          }\n        };\n\n        break;\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.user:\n        option.url = \"/api/users/search?by_name=\";\n        option.settings = { ...option.settings,\n          ...{\n            valueField: 'id',\n            searchField: 'name',\n            labelField: 'name+email',\n            onInitialize: function() {\n              if (item.currentlist) users_list = item.currentlist;\n              else item.tomselect.items.forEach(e => {\n                if (e !== '' && parseInt(e) > 0) users_list[e] = true;\n              });\n            },\n            onItemAdd: function(e) {\n              if (e === \"\") return;\n              if (users_list[e]) {\n                //  if (multiple || !this.revertSettings || this.revertSettings.tabIndex < 0 || !item.options.length) return;\n                if (window.alertbox) {\n                  console.log('itemtoms', item)\n                  window.alertbox.addItemMessage({\n                    type: window.alertbox.alertconfig.types.danger,\n                    parent: item,\n                    content: window.alertbox.i18nmessages.exists\n                  });\n                } else {\n                  item.dataset.invalid = window.alertbox.i18nmessages.exists;\n                  item.dispatchEvent(new Event('invalid'));\n                }\n                setTimeout(() => {\n                  this.removeOption(e);\n                  if (this.revertSettings.tabIndex < 0 || !item.options.length || !this.revertSettings) {\n                    this.removeItem(e);\n                    users_list[e] = true;\n                  } else {\n                    const revert = item.options[this.revertSettings.tabIndex].value;\n                    this.addItem(revert);\n                  }\n                  if (window.alertbox) {\n                    window.alertbox.removeItemMessage({\n                      type: window.alertbox.alertconfig.types.danger,\n                      parent: item,\n                      content: window.alertbox.i18nmessages.exists\n                    });\n                  } else {\n                    delete item.dataset.invalid;\n                    item.dispatchEvent(new Event('undeterminate'));\n                  }\n                }, 2000);\n              } else users_list[e] = true;\n            },\n            onItemRemove: function(e) {\n              if (users_list[e]) delete users_list[e];\n              if (multiple || !this.revertSettings || (this.revertSettings.innerHTML === '' && this.revertSettings.tabIndex === 0) || this.revertSettings.tabIndex < 0) return;\n              const revert = item.options[this.revertSettings.tabIndex].value;\n              if (users_list[revert] !== undefined) delete users_list[revert];\n\n            }\n          }\n        };\n        break;\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.instr:\n        option.url = \"/search/instruments\";\n        option.settings = {\n          valueField: 'id',\n          labelField: 'text',\n          searchField: 'id',\n          maxItems: 1,\n          preload: true\n        };\n        break;\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.taxo:\n        tom_select_dist_js_tom_select_base_min_js__WEBPACK_IMPORTED_MODULE_2___default().define('no_close', () => {\n          this.close = () => {};\n        });\n\n        option.url = \"/search/taxo\";\n        option.settings = { ...option.settings,\n          ...{\n            valueField: 'id',\n            labelField: 'text',\n            searchField: 'text',\n            closeAfterSelect: true,\n            onInitialize: () => {\n              const wrapper = document.getElementById(id).nextElementSibling;\n              if (!wrapper.classList.contains('ts-wrapper')) return;\n              const tags = wrapper.querySelectorAll(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.domselectors.component.tomselect.tsdelet);\n              tags.forEach(tag => {\n                init_canceltag(tag);\n              })\n            }\n\n          }\n        }\n\n        break;\n    }\n    const default_settings = {\n      create: false,\n      minOptions: 0,\n      maxOptions: null,\n      preload: false,\n      hideSelected: true,\n      duplicates: false,\n      allowEmptyOption: true,\n      closeAfterSelect: true,\n      placeholder: (item.placeholder) ? item.placeholder : ((item.dataset.placeholder) ? item.dataset.placeholder : ''),\n      onDropdownClose: function() {\n\n      },\n      shouldLoad: function(query) {\n        return query.length > 2\n      },\n      onItemRemove: function() {\n        return true;\n      },\n      load: function(query, callback) {\n        query = dompurify__WEBPACK_IMPORTED_MODULE_1___default().sanitize(query);\n\n        const self = this;\n        if (self.loading > 10) {\n\n          callback();\n          return;\n        }\n        let url = '';\n        switch (type) {\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.user:\n            url = option.url + encodeURIComponent('%' + query + '%');\n            break;\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.instr:\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.taxo:\n            url = option.url;\n            //\n\n            if (query.indexOf('_') == 0 && option.settings.addoption && query == option.settings.addoption[0]) {\n              url = null;\n              return callback(Object.entries([{\n                text: option.settings.addoption[0],\n                id: option.settings.addoption[1]\n              }]));\n            }\n            //\n            if (query) url += '?q=' + encodeURIComponent(query);\n\n            break;\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.project:\n            url = option.url;\n\n            if (query) url += '?filt_title=' + encodeURIComponent(query); //+ '&filt_instrum=' + encodeURIComponent(query);\n            break;\n        }\n        if (url !== null) fetch(url, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_6__.fetchSettings)()).then(response => response.json()).then(json => {\n          if (type === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.project) {\n\n            if (json.data && json.data.length) json = json.data.map(row => {\n              return {\n                id: row[1],\n                text: row[3][0],\n                rights: row[0]\n              }\n\n            });\n          }\n          if (type === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.instr && json.length) json = json.reduce((result, a, v) => {\n            a = dompurify__WEBPACK_IMPORTED_MODULE_1___default().sanitize(a);\n            let obj = {\n              id: a,\n              text: a\n            }\n            result.push(obj);\n\n            return result;\n          }, []);\n\n          if (json.length && typeof json == 'object') json = Object.entries(json);\n          return callback(json);\n\n        }).catch(err => {\n          console.log('tomselect-err', err);\n        });\n      },\n\n      render: {\n        option: function(el, escape) {\n          if (el === undefined || el === null) return ``;\n          // add optgroup\n          const optgroup = (el.hasOwnProperty('optgroup')) ? `data-optgroup=${el.optgroup}` : ``;\n          const label = _get_label(el, option.settings.labelField);\n          return `<div class=\"py-2 flex  ${ ((multiple)?'inline-flex':'') } \" ${optgroup} data-value=\"${el[option.settings.valueField]}\">${ escape(label) }</div>`;\n        },\n        item: function(el, escape) {\n          if (el === undefined || el === null) return ``; // add optgroup\n          const optgroup = (el.optgroup) ? `item-${el.optgroup}` : ``;\n          const inlist = (users_list[el[this.settings.valueField]]) ? `data-inlist` : ``;\n          // add cancel icon for multiple selections\n          //  const cancel = ((multiple) ? `<i class=\"${domselectors.component.tomselect.tsdelet.substr(1)}\"></i>` : ``);\n          // use ts plugin remove_button\n          const cancel = ``;\n          const label = _get_label(el, option.settings.labelField, true);\n          return dompurify__WEBPACK_IMPORTED_MODULE_1___default().sanitize(`<div class=\"${((multiple) ? `flex inline-flex ` : ``) } ${optgroup}\"  data-value=\"${el[this.settings.valueField]}\"  ${inlist}>${ escape(label) } ${ cancel }</div>`);\n        },\n        no_results: function(data, escape) {\n          return dompurify__WEBPACK_IMPORTED_MODULE_1___default().sanitize('<div class=\"no-results\">' + ((item.dataset.noresults) ? item.dataset.noresults : 'No result found for ') + escape(data.input) + '</div>');\n        },\n\n      }\n    }\n\n    option.settings.plugins = {\n      'clear_button': {\n        title: (item.dataset.clear) ? item.dataset.clear : 'Clear all',\n        html: (data) => {\n          return `<div class=\"${data.className}\" id=\"clear-${id}\" title=\"${data.title}\"><i class=\"icon ${(multiple)?``:'p-[0.125rem]'} icon-x-circle-sm ${(multiple)?``:` opacity-50`}\"></i></div>`;\n        }\n      }\n    }\n    option.settings.onClear = function() {\n      item.tomselect.clear();\n      return true;\n    }\n    if (multiple) {\n      option.settings.plugins = { ...option.settings.plugins,\n        ...{\n          'remove_button': {}\n        }\n\n      };\n      option.settings.plugins = { ...option.settings.plugins,\n        ...{\n          'caret_position': {}\n        }\n\n      };\n    }\n    option.settings = Object.assign(default_settings, option.settings)\n    if (id !== null) {\n      const ts = new (tom_select_dist_js_tom_select_base_min_js__WEBPACK_IMPORTED_MODULE_2___default())('#' + id, option.settings);\n      ts.wrapper.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.domselectors.component.tomselect.ident);\n      ts.wrapper.classList.remove('js');\n      // add\n      ts.wrapper.setAttribute('data-component', 'tom-select');\n      switch (type) {\n        case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.taxo:\n          ts.on('item_add', (v, el) => {\n            if (el !== null) el.classList.add('new');\n            //  el = el.querySelector('.ts-delet');\n            //  if (el !== null) init_canceltag(el);\n          });\n          //\n          break;\n        case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_7__.models.project:\n          // add data-noaction just to select a project\n          if (item.dataset.dest) {\n\n            ts.on('item_add', (v, el) => {\n              if (v != item.dataset.value && ts.options[v] && !el.querySelector('a')) {\n                const links = {\n                  \"A\": \"/prj/\",\n                  \"V\": \"/prj/\",\n                  \"M\": \"/gui/prj/edit/\"\n                };\n                const rights = ts.options[v].rights;\n                const keys = Object.keys(rights);\n                if (keys) {\n                  if (keys.length > 1) {\n                    Object.entries(rights).forEach(([k, r]) => {\n                      el.insertAdjacentHTML('beforeend', ` <a data-k=\"${k}\" class=\"small-caps font-normal ml-2\">${r}</a>`);\n                    });\n                    el.querySelectorAll('a').forEach(lk => {\n                      lk.addEventListener('click', (e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        window.open(links[e.target.dataset.k] + v, `_proj${v}`).focus();\n                        ts.removeItem(v);\n                      });\n                    })\n                  } else {\n                    window.open(links[keys[0]] + v, `_proj${v}`).focus();\n                    ts.removeItem(v);\n                  }\n                }\n              }\n            });\n          }\n          break;\n          /*  case 'user':\n              if (item.dataset.priv) ts.on(\"item_add\", function(v, el) {\n                el = el.querySelector(domselectors.component.tomselect.tsdelet);\n                if (el !== null) init_canceltag(el);\n              });\n              break;*/\n      }\n      return ts;\n    } else console.log('noid');\n\n  }\n\n  function getUserList() {\n    return users_list;\n  }\n  return {\n    applyTo\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/module-tom-select.js\n")}}]);
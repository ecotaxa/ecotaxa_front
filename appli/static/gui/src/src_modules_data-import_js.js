/*! For license information please see src_modules_data-import_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_data-import_js"],{"./src/modules/data-import.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataImport: () => (/* binding */ DataImport)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/js-tom-select.js */ \"./src/modules/js-tom-select.js\");\n/* harmony import */ var _modules_project_privileges_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/project-privileges.js */ \"./src/modules/project-privileges.js\");\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\n\n\n\nconst key_privileges = Object.keys(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges).reduce(function(result, key) {\n  result[key] = key;\n  return result;\n}, {});\nlet instance;\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported = 'imported';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton = '.import-list-reset';\nclass DataImport {\n  content_selector = '.modal-content';\n  imports = [];\n  taxos = [\"preset\", \"extra\"];\n  importcontainer;\n  importzoneid;\n  importid = 'importzone';\n  selectors;\n  button;\n  clearbutton;\n  replacebutton;\n  tabbutton;\n  tbl = null;\n  constructor(tbl, what = null, selector = null) {\n    if (!tbl) return;\n    // tbl is a TableComponent  ?\n    this.tbl = (typeof(tbl) === 'object') ? tbl : null;\n    selector = (selector === null) ? ((this.tbl.cellidname) ? \"data-\" + this.tbl.cellidname : \"data-id\") : selector;\n    // get the table from table component or html table element id\n    this.dom = (this.tbl) ? this.tbl.dom : document.getElementById(tbl);\n    if (!this.dom) return;\n    what = (what) ? dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(what) : (tbl && tbl.params && tbl.params.import) ? tbl.params.import : (this.dom.dataset.import) ? dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(this.dom.dataset.import) : null;\n    if (!instance || instance.doc !== this.dom) {\n      // defaultoptions - keep like that\n\n      const options = {\n        importcontainer: '#data-import-' + what,\n        btns: '.btns-imports',\n        button: '#add-import-' + what,\n        replacebutton: '#replace-import-' + what,\n        tabbutton: '#tab-import-' + what,\n      };\n      this.selector = selector;\n\n      this.importcontainer = options.importcontainer instanceof HTMLElement ? options.importcontainer : document.querySelector(options.importcontainer);\n      this.form = (options.form) ? ((options.form) instanceof HTMLElement ? options.form : document.querySelector(options.form)) : this.dom.closest('form');\n      this.button = options.button instanceof HTMLElement ? options.button : document.querySelector(options.button);\n      this.replacebutton = options.replacebutton instanceof HTMLElement ? options.replacebutton : document.querySelector(options.replacebutton);\n      this.tabbutton = options.tabbutton instanceof HTMLElement ? options.tabbutton : document.querySelector(options.tabbutton);\n      this.init(options);\n      instance = this;\n\n    }\n    return instance;\n  }\n\n  init(options) {\n    // hide importzone\n    this.showImport(false);\n    // remove line of target proj\n    let projid = this.form.querySelector('#' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.projid);\n    if (projid && projid.value) {\n      projid = this.dom.querySelector('[' + this.selector + '=\"' + projid.value + '\"]');\n      if (projid) projid.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n\n    }\n    const indextocheck = this.indexToCheck();\n    this.selectors = this.dom.querySelectorAll('[' + this.selector + '] button, [' + this.selector + '] input');\n    this.selectors.forEach(selector => {\n      // checkbox possible\n      const index = Array.from(selector.parentElement.children).indexOf((selector));\n      if (indextocheck && selector.closest('tr').children[indextocheck[index]].innerHTML === '') selector.disabled = true;\n      else {\n        const evt = (selector.tagName.toLowerCase() === 'input') ? 'change' : 'click';\n        const apply_selection = (e) => {\n          e.stopImmediatePropagation();\n          const target = e.currentTarget;\n          target.disabled = true;\n          this.toImport(target.parentElement, index);\n        };\n        selector.removeEventListener(evt, apply_selection, false);\n        selector.addEventListener(evt, apply_selection, false);\n      };\n    });\n    if (this.button) {\n      this.tabbutton.addEventListener('click', (e) => {\n        e.stopImmediatePropagation();\n        this.resizeZone(e);\n      });\n      this.showImport(false);\n    }\n  }\n  columnProperty(name, index, th) {\n    if (this.tbl) return (this.tbl.grid.columns[index].hasOwnProperty(name)) ? this.tbl.grid.columns[index][name] : null;\n    else return (th.dataset[name]) ? th.dataset.name : null;\n  }\n  columnIndex(prop, value) {\n    return Array.from(this.dom.querySelectorAll('thead th')).findIndex(th => (th.dataset[prop] && th.dataset[prop] === value));\n  }\n  gridColumnIndex(prop, value) {\n    if (this.tbl) return this.tbl.grid.columns.findIndex(column => (column.hasOwnProperty(prop) && column[prop] === value));\n    else return this.columnIndex(prop, value);\n  }\n  rowIndex(td, trs) {\n    const ref = (td.parentElement) ? td.parentElement : null;\n    if (!ref) return null;\n    return trs.findIndex(tr => (tr === ref));\n  }\n  toImport(td, whatpart = 0) {\n    const grid = (this.tbl) ? this.tbl.grid : null;\n    const thcells = Array.from(this.dom.querySelectorAll('thead th'));\n    const trs = Array.from(this.dom.querySelectorAll('tbody tr'));\n    const datas = (grid) ? grid.data : trs.map(tr => {\n      return Array.from(tr.childNodes).forEach(cell => {\n        return cell.innerText;\n      });\n    }); // cell values in json  - no parse\n    if (td.tagName.toLowerCase() !== 'td') td = td.closest('td');\n    const rowindex = this.rowIndex(td, trs);\n    if (rowindex === null) return;\n    let showbtns = true;\n    const cellindex = td.cellIndex;\n    const th = thcells[cellindex];\n    const tds = trs[rowindex];\n    const what = this.columnProperty('what', cellindex, th);\n    if (!what) return;\n    const parts = this.columnProperty('parts', cellindex, th);\n    let contact = null;\n    let selectcells = this.columnProperty('selectcells', cellindex, th);\n    selectcells = (selectcells) ? ((parts) ? [parts[whatpart]] : selectcells) : null;\n    if (!selectcells) return;\n    if (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.settings || what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact] = this.findContact(datas[rowindex]);\n    const importzone = (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo || what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) ? this.createImportzone(what) : null;\n    this.addResetButton();\n    let ts = null;\n    selectcells.forEach((name, index) => {\n      index = this.gridColumnIndex('name', name);\n      if (index >= 0) {\n        const tdindex = this.columnIndex('name', name);\n        // show import buttons if importzone\n        const cell = (tdindex >= 0) ? trs[rowindex].cells[tdindex] : null;\n        if (cell) cell.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n        const celldata = datas[rowindex][index];\n        const thcell = (tdindex >= 0) ? thcells[tdindex] : null;\n        switch (what) {\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo:\n            // accumulate and show in import win - move the form field in modal win to view the changes and benefit of tom-select component functs...\n            ts = importzone.tomselect;\n            let taxons = celldata;\n            if (taxons) {\n              if (ts) {\n                // merge taxons and options - unique\n                Object.values(ts.options).forEach((opt) => {\n                  let obj = {};\n                  obj[opt[ts.settings.valueField]] = opt[ts.settings.labelField];\n                  if (!taxons[opt[ts.settings.valueField]]) taxons = Object.assign(taxons, obj);\n                });\n                taxons = Object.entries(taxons);\n                // sort taxons\n                taxons.sort((a, b) => {\n                  let x = a[1];\n                  let y = b[1];\n                  return +(x > y) || -(y > x);\n                });\n                ts.clear();\n                ts.clearOptions();\n                // add taxons items\n                taxons.forEach(([key, text]) => {\n                  if (!ts.getItem(key)) {\n                    if (!ts.getOption(key)) {\n                      let obj = {};\n                      obj[ts.settings.valueField] = key;\n                      obj[ts.settings.labelField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(text.trim());\n                      ts.addOption(obj);\n                    }\n                    ts.addItem(key);\n                  }\n                });\n              } else {\n                Object.values(importzone.options).forEach(opt => {\n                  let obj = {};\n                  obj[opt.value] = opt.text;\n                  if (!taxons[opt.value]) taxons = Object.assign(taxons, obj);\n                });\n                taxons = Object.entries(taxons);\n                taxons.sort((a, b) => {\n                  let x = a[1];\n                  let y = b[1];\n                  return +(x > y) || -(y > x);\n                });\n                importzone.innerHTML = ``;\n                taxons.forEach(([key, text]) => {\n                  if (!importzone.querySelector('option[value=\"' + key + '\"]')) importzone.insertAdjacentHTML('beforeend', '<option value=\"' + key + '\" selected>' + text + '</option>');\n                });\n              }\n              showbtns = (taxons.length > 0);\n              taxons = null;\n            }\n\n            break;\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges:\n            const privs = celldata;\n            // set everybody to 'view' if more than one project imported\n            const resetpriv = ((ts && ts.items.length > 0) || (importzone.selectedIndex > 0));\n            if (!importzone.tomselect) {\n              importzone.currentlist = {};\n              const jsTomSelect = new _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__.JsTomSelect();\n              jsTomSelect.applyTo(importzone);\n            }\n            ts = importzone.tomselect;\n\n            Object.entries(privs).forEach(([priv, members]) => {\n              members.sort((a, b) => {\n                return (b.name > a.name);\n              });\n              members.forEach(member => {\n                const newpriv = (resetpriv) ? key_privileges.viewers : priv; // viewer if more than one project imported\n                let opt;\n                if (!importzone.currentlist || !importzone.currentlist[member.id]) {\n                  if (ts) {\n                    opt = ts.items.indexOf(member.id);\n                    //TODO - test - opt should always be 0\n                    if (opt >= 0) {\n                      ts.removeItem(member.id);\n                      ts.removeOption(member.id);\n                    }\n                    // addoption && addItem\n                    opt = {\n                      optgroup: newpriv\n                    }\n                    opt[ts.settings.valueField] = member.id;\n                    opt[ts.settings.searchField] = member.name;\n                    opt[ts.settings.labelField] = member.name;\n                    ts.addOption(opt);\n                    ts.addItem(member.id);\n                  } else {\n                    opt = importzone.querySelector('option[value=\"' + member.id + '\"]');\n                    if (opt === null) {\n                      opt = document.createElement('option');\n                      opt.value = member.id;\n                      opt.dataset.optgroup = newpriv;\n                      opt.selected = opt.defaultSelected = true;\n                      opt.text = member.name;\n                      importzone.add(opt);\n                    } else opt.dataset.optgroup = newpriv;\n                  }\n                }\n              });\n              importzone.tomselect.refreshOptions(true);\n            });\n\n            showbtns = (((ts) ? ts.items.length : importzone.selectedIndex + 1) > 0);\n\n\n            break;\n          default:\n            this.imports[name] = celldata;\n            if (cell !== null) {\n              if (cell.dataset.autocomplete) {\n                // select elements where key / value in different columns\n                this.imports[name] = {\n                  value: celldata,\n                  key: null\n                };\n                let el = null;\n                thcells.every((t, idx) => {\n                  if (t.dataset.name == thcell.dataset.autocomplete) {\n                    el = idx;\n                    return false;\n                  }\n                  return true;\n                });\n                if (el !== null) {\n                  el = datas[rowindex][el];\n\n                  this.imports[name].key = el;\n                }\n              } else if (cell.dataset.value) this.imports[name] = cell.dataset.value;\n\n            }\n\n            break;\n        }\n      };\n    });\n\n    if (thcells.length) {\n      if (this.button) {\n        this.showImport(showbtns);\n        if (!this.button.dataset.activated && (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo || what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges)) this.activateButtons(what, selectcells);\n      } else this.makeImport(null, selectcells, what, true);\n    }\n    //\n\n  }\n  messageZone(item) {\n    console.log('itemmessage', item);\n  }\n  activateButtons(what, selectcells) {\n\n    this.button.addEventListener('click', (e) => {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      this.makeImport(e.currentTarget, selectcells, what, true);\n\n    });\n    this.replacebutton.addEventListener('click', (e) => {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      this.makeImport(e.currentTarget, selectcells, what, true);\n\n    });\n\n    this.button.dataset.activated = true;\n    this.replacebutton.dataset.activated = true;\n  }\n\n  findContact(tds, name = 'contact') {\n    const index = this.gridColumnIndex('name', name);\n    if (index >= 0) return tds[index] ? tds[index] : null;\n\n    return null;\n  }\n\n  renderPrivileges(importzone, replace = false) {\n    let privileges = {};\n    const tzone = importzone.tomselect;\n\n    const pushpriv = (member, priv) => {\n      const obj = {\n        id: member.id,\n        name: member.name,\n        priv: priv\n      }\n      if (privileges[priv]) privileges[priv].push(obj);\n      else privileges[priv] = [obj];\n    }\n\n    if (tzone) {\n      const members = [...tzone.items];\n      const options = Object.assign({}, tzone.options);\n      members.forEach(member => {\n        member = options[member];\n        if (member) pushpriv(member, member.optgroup);\n\n      })\n    } else {\n      importzone.options.forEach(member => {\n        if (member.selected) pushpriv(member, member.dataset.optgroup);\n      })\n    }\n\n    if (this.importPrivileges(privileges, replace)) {\n      if (tzone) {\n        tzone.clear();\n        tzone.clearOptions();\n      } else importzone.innerHTML = ``;\n\n    }\n\n  }\n\n  importPrivileges(privileges, clear = false) {\n    const projectPrivileges = this.form.querySelector('.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.privileges.ident);\n\n    if (projectPrivileges === null || !projectPrivileges.jsprivileges) return;\n    const importedtag = (input) => {\n      this.setImportedTag(input, null);\n    }\n    const dismiss = () => {\n      this.dismiss();\n    }\n    const contact = (clear === true && this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact]) ? this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact] : null;\n    return (projectPrivileges.jsprivileges.importPrivileges(privileges, clear, contact, importedtag, dismiss));\n  }\n\n  resetSelectors() {\n    this.selectors.forEach((selector, i) => {\n      if (selector.disabled) selector.disabled = false;\n    });\n    this.dom.querySelectorAll('td.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected).forEach(td => {\n      td.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n    });\n  }\n\n  activateClear() {\n    const clearbutton = document.getElementById('clear-' + this.importid);\n    if (!clearbutton) return;\n    clearbutton.addEventListener('click', (e) => {\n      e.stopImmediatePropagation();\n      if (!this.importcontainer) return;\n      this.resetSelectors();\n      this.button.disabled = false;\n      this.replacebutton.disabled = false;\n      this.showImport(false);\n    });\n  }\n  createImportzone(name) {\n    this.showImport(true);\n    let importzone = this.importcontainer.querySelector('#' + this.importid);\n\n\n    if (name === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) {\n      if (!importzone) {\n        importzone = document.createElement('select');\n        this.importid = importzone.id = this.importid + '-' + name;\n        importzone.dataset.type = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.user;\n        importzone.multiple = true;\n        importzone.dataset.priv = true;\n        this.importcontainer.append(importzone);\n\n      }\n    } else {\n      const import_target = (this.form.querySelector('[name=\"' + name + '\"]')) ? this.form.querySelector('[name=\"' + name + '\"]') : this.form.querySelector('[data-importfield=\"' + name + '\"]');\n      const ts = import_target.tomselect;\n\n      if (!importzone) {\n        if (!import_target) return;\n        this.importzoneid = import_target.id;\n        // tomselect ?\n        importzone = import_target.cloneNode();\n        importzone.classList.remove('tomselected');\n        importzone.classList.remove('ts-hidden-accessible');\n        // keep original id to replace data on apply import\n        importzone.dataset.origin = importzone.id;\n        importzone.id = this.importid;\n        importzone.name = this.importid + '_' + importzone.name;\n        this.importcontainer.insertAdjacentHTML('afterbegin', importzone.outerHTML);\n        if (ts) {\n          importzone = this.importcontainer.querySelector('#' + this.importid);\n          const jsTomSelect = new _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__.JsTomSelect();\n          jsTomSelect.applyTo(importzone);\n        }\n        this.activateClear();\n\n      }\n    }\n\n    return importzone;\n\n  }\n\n  makeImport(btn, selectcells, what, close = false) {\n    let done = true,\n      ts = null;\n    const importzone = (this.importcontainer) ? this.importcontainer.querySelector('#' + this.importid) : null;\n\n    switch (what) {\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo:\n\n        if (!importzone) return false;\n        const import_target = this.form.querySelector('#' + importzone.dataset.origin);\n\n        if (!import_target) return false;\n        ts = import_target.tomselect;\n        if (ts) {\n          // only if replace specified\n          if (btn.dataset.replace && btn.dataset.replace === 'replace') {\n            ts.clear();\n            ts.clearOptions();\n          }\n\n          const tzone = importzone.tomselect;\n          const items = [...tzone.items];\n          const options = Object.assign({}, tzone.options);\n          items.forEach((e, i) => {\n            let el = {};\n            el[ts.settings.valueField] = e;\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(options[e][ts.settings.searchField]);\n            if (!ts.getOption(e)) ts.addOption(el);\n            ts.addItem(e);\n          });\n          tzone.clear();\n          tzone.clearOptions();\n        } else {\n          if (btn.dataset.replace && btn.dataset.replace === 'replace') import_target.innerHTML = ``;\n          import_target.innerHTML = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(importzone.innerHTML);\n          importzone.innerHTML = ``;\n        }\n        done = true;\n        break;\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges:\n        if (!importzone) return false;\n        done = this.renderPrivileges(importzone, (btn.dataset.replace && btn.dataset.replace === 'replace'));\n        if (importzone.currentlist) importzone.currentlist = {};\n        break;\n      default:\n        const ts_add_select_item = function(ts, data) {\n          const el = {};\n          if (typeof(data) == 'string') {\n            el[ts.settings.labelField] = data;\n            el[ts.settings.valueField] = data;\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(data);\n          } else {\n            el[ts.settings.labelField] = data.key;\n            el[ts.settings.valueField] = data.key;\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(data.value);\n          }\n          if (!ts.getOption(el[ts.settings.valueField])) ts.addOption(el);\n          if (!ts.getItem(el[ts.settings.valueField])) ts.addItem(el[ts.settings.valueField]);\n        }\n        const add_select_option = function(input, data) {\n          const option = document.createElement('option');\n          if (typeof(data) === 'string') option.value = option.text = data;\n          else {\n            option.value = data.key;\n            option.text = data.value;\n          }\n          option.selected = true;\n          input.append(option);\n        }\n        const add_input_option = function(input, data) {\n          if (input.multiple) {\n            let values = input.value.split(',');\n            values.push(data.key);\n            input.value = values.join(',');\n          } else input.value = data;\n\n        }\n        selectcells.forEach((name, index) => {\n          let input = ((this.form.querySelector('[data-importfield=\"' + name + '\"]')) ? this.form.querySelector('[data-importfield=\"' + name + '\"]') : this.form.querySelector('[name=\"' + name + '\"]'));\n          if (input && input.dataset.noimport) return;\n          if (input && this.imports[name] !== undefined) {\n            const type = (input.type) ? input.type : input.tagName.toLowerCase();\n            ts = input.tomselect;\n            if (name === 'init_classif_list') {\n              let ids = this.imports[name];\n              if (Array.isArray(ids)) ids = ids.join(',');\n              else ids = ids.replace('[', '').replace(']', '').replaceAll(' ', '');\n              if (ts) {\n                ts.wrapper.classList.add('wait-for-results');\n                ts.clear(false);\n                ts.clearOptions();\n              }\n              if (ids !== '') {\n                if (ts) ts.wrapper.classList.add('wait-for-results');\n                const formData = new FormData();\n                formData.append('idlist', ids);\n                const url = '/search/taxoresolve' //+ new URLSearchParams({'idlist': ids});\n                fetch(url, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.fetchSettings)({\n                  'method': 'POST',\n                  'body': formData\n                })).then(response =>\n                  response.json()\n                ).then(results => {\n                  const ts = input.tomselect;\n                  if (ts) {\n\n                    Object.entries(results).forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(text)\n                      }\n                      ts_add_select_item(ts, el);\n                    });\n                    ts.wrapper.classList.remove('wait-for-results');\n                  } else if (type.indexOf('select') === 0) {\n\n                    input.querySelectorAll('option').forEach(option => {\n                      option.remove();\n                    });\n                    Object.entries(results).forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(text)\n                      }\n                      add_input_option(input, el);\n                    });\n\n                  } else {\n                    Object.entries(results).forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(text)\n                      }\n                      add_select_option(input, el);\n                    });\n\n                  }\n\n                  results = null;\n                  this.setImportedTag(input);\n                });\n              }\n            } else if (ts) {\n              ts_add_select_item(ts, this.imports[name]);\n              this.setImportedTag(input);\n            } else {\n              switch (type) {\n                case 'radio':\n                case 'checkbox':\n                  input = this.form.querySelector('[name=\"' + name + '\"][value=\"' + this.imports[name] + '\"]');\n                  if (input) input.checked = true;\n                  break;\n                case 'select':\n                  if (input.multiple) this.imports[name].forEach(data => {\n                    add_select_option(input, data)\n                  });\n                  else add_select_option(input, this.imports[name]);\n\n                  break;\n                default:\n                  input.value = this.imports[name];\n                  break;\n              }\n              this.setImportedTag(input);\n            }\n            if (what !== _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.settings) input.focus();\n            done = done && true;\n            // set imported tag to fieldbox\n\n\n          } else if (name === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) {\n            //const clearprivileges = (what === typeimport.settings);\n            const clearprivileges = false;\n            done = done && this.importPrivileges(this.imports[name], clearprivileges);\n          }\n        });\n        break;\n    }\n    if (done === true && close == true) {\n      this.dismiss();\n      if (this.form) this.form.dispatchEvent(new CustomEvent('validate'));\n    }\n  }\n\n  setImportedTag(input, selector = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.form.formbox) {\n    let el = (selector === null) ? input : (input.closest(selector) ? input.closest(selector) : input.closest('fieldset'));\n    if (!el) return;\n    const removetag = (e) => {\n      delete el.dataset.isimported;\n      el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported);\n      input.removeEventListener('change', removetag);\n    }\n    el.dataset.isimported = this.form.dataset.isimported;\n    el.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported);\n    if (input.dataset.unique !== undefined) {\n      input.dataset.unique = input.value;\n    }\n    setTimeout(function() {\n      input.addEventListener('change', removetag);\n    }, 500);\n  }\n\n  dismiss(clear = false) {\n    if (this.button) this.showImport(false);\n    const container = this.dom.closest('details');\n    if (container) {\n      container.open = false;\n      if (clear === true) container.querySelector(this.content_selector).innerHTML = ``;\n    }\n\n  }\n  indexToCheck() {\n    // index of cells to check if empty and disable row  import btn\n    const grid = (this.tbl) ? this.tbl.grid : null;\n    if (!grid) return [0];\n    let index = grid.columns.findIndex(column => (column.what && column.what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo));\n    if (index === -1) return [0];\n    const parts = (grid.columns[index].parts) ? grid.columns[index].parts : null;\n    if (parts) {\n      const indextocheck = grid.columns.filter((column, i) => {\n        if (parts.indexOf(column.name) >= 0) return i;\n      }).map(v => {\n        return v.index;\n      });\n      return indextocheck;\n    }\n\n  }\n  addResetButton() {\n    if (!this.tbl || !this.tbl.params.hasOwnProperty(\"reset\")) return;\n    let resetbtn = this.dom.parentElement.querySelector(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton);\n    if (resetbtn === null) {\n      resetbtn = document.createElement('a');\n      resetbtn.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton.substr(1));\n      resetbtn.textContent = this.tbl.params.reset;\n      this.dom.parentElement.firstChild.prepend(resetbtn);\n    }\n    resetbtn.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      const selectors = this.selectors = this.dom.querySelectorAll('[' + this.selector + '] button:disabled, [' + this.selector + '] input:disabled');\n      selectors.forEach(selector => {\n        selector.disabled = false;\n        const sel = selector.closest('tr').querySelector('.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n        if (sel) sel.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n      });\n    });\n\n  }\n  // show / hide importzone and buttons\n  showImport(show) {\n    if (!this.button) return;\n\n    if (show === false) {\n      this.button.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.replacebutton.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.importcontainer.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.tabbutton.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n\n    } else {\n      this.button.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.replacebutton.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n\n      this.importcontainer.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.button.disabled = false;\n      const importzone = this.importcontainer.querySelector('#' + this.importid);\n      if (importzone) {\n        this.tabbutton.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n        if (importzone.tomselect && importzone.tomselect.control.offsetHeight < importzone.tomselect.control.scrollHeight) {\n          this.tabbutton.disabled = false;\n        } else this.tabbutton.disabled = true;\n      }\n    }\n  }\n  // resize importzone\n  resizeZone(e) {\n    const div = this.importcontainer.closest(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.import.zoneimport);\n    if (!div) return;\n    div.parentElement.classList.toggle(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.showfull);\n    const icon = e.currentTarget.querySelector('i');\n    if (icon) {\n      icon.classList.toggle('icon-arrow-pointing-out');\n      icon.classList.toggle('icon-arrow-pointing-in');\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/data-import.js\n")}}]);
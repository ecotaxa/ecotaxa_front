/*! For license information please see src_modules_data-import_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_data-import_js"],{"./src/modules/data-import.js":(module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataImport: () => (/* binding */ DataImport)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.es.mjs\");\n/* harmony import */ var _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/js-tom-select.js */ \"./src/modules/js-tom-select.js\");\n/* harmony import */ var _modules_project_privileges_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/project-privileges.js */ \"./src/modules/project-privileges.js\");\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__, _modules_project_privileges_js__WEBPACK_IMPORTED_MODULE_2__]);\n([_modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__, _modules_project_privileges_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\nconst key_privileges = Object.keys(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges).reduce(function(result, key) {\n  result[key] = key;\n  return result;\n}, {});\nlet instance;\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported = 'imported';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.tomselected = 'tomselected';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hiddenaccessible = 'ts-hidden-accessible';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.arrowout = 'icon-arrow-pointing-out';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.arrowin = 'icon-arrow-pointing-in';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton = '.import-list-reset';\nclass DataImport {\n  content_selector = '.modal-content';\n  imports = [];\n  taxos = [\"preset\", \"extra\"];\n  importcontainer;\n  importzoneid; // target element to add/replace datasto import\n  importid = 'importzone'; // importzone built to display data to import\n  importzone = null;\n  selectors;\n  button;\n  clearbutton;\n  replacebutton;\n  tabbutton;\n  dom;\n  tbl = null;\n  thcells = [];\n  trs = [];\n  datas;\n  constructor(tbl, what = null, selector = null) {\n    if (!tbl) return;\n    // tbl is a TableComponent  ?\n    this.tbl = (typeof(tbl) === 'object') ? tbl : null;\n    selector = (selector === null) ? ((this.tbl.cellidname) ? \"data-\" + this.tbl.cellidname : \"data-id\") : selector;\n    // get the table from table component or html table element id\n    this.dom = (this.tbl) ? this.tbl.dom : document.getElementById(tbl);\n    if (!this.dom) return;\n    this.thcells = Array.from(this.dom.querySelectorAll('thead th'));\n    this.trs = Array.from(this.dom.querySelectorAll('tbody tr'));\n    const grid = (this.tbl) ? this.tbl.grid : null;\n    this.datas = (grid) ? grid.data : this.trs.map(tr => {\n      return Array.from(tr.childNodes).forEach(cell => {\n        return cell.innerText;\n      });\n    });\n    what = (what) ? dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sanitize(what) : (tbl && tbl.params && tbl.params.import) ? tbl.params.import : (this.dom.dataset.import) ? dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sanitize(this.dom.dataset.import) : null;\n    if (!instance || instance.doc !== this.dom) {\n      // defaultoptions - keep like that\n\n      const options = {\n        importcontainer: '#data-import-' + what,\n        btns: '.btns-imports',\n        button: '#add-import-' + what,\n        replacebutton: '#replace-import-' + what,\n        tabbutton: '#tab-import-' + what,\n      };\n      this.selector = selector;\n\n      this.importcontainer = options.importcontainer instanceof HTMLElement ? options.importcontainer : document.querySelector(options.importcontainer);\n      this.form = (options.form) ? ((options.form) instanceof HTMLElement ? options.form : document.querySelector(options.form)) : this.dom.closest('form');\n      this.button = options.button instanceof HTMLElement ? options.button : document.querySelector(options.button);\n      this.replacebutton = options.replacebutton instanceof HTMLElement ? options.replacebutton : document.querySelector(options.replacebutton);\n      this.tabbutton = options.tabbutton instanceof HTMLElement ? options.tabbutton : document.querySelector(options.tabbutton);\n      this.importid = this.importid + '_' + what;\n      this.targetimport = (this.form.querySelector('[name=\"' + what + '\"]')) ? this.form.querySelector('[name=\"' + what + '\"]') : this.form.querySelector('[data-type=\"' + what + '\"]');\n      this.init(options);\n      instance = this;\n    }\n    return instance;\n  }\n\n  init(options) {\n    // hide importzone\n    this.showImport(false);\n    // remove line of target proj\n    let projid = this.form.querySelector('#' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.projid);\n    if (projid && projid.value) {\n      projid = this.dom.querySelector('[' + this.selector + '=\"' + projid.value + '\"]');\n      if (projid) projid.hidden = true;\n    }\n    const indextocheck = this.indexToCheck();\n    this.selectors = this.dom.querySelectorAll('[' + this.selector + '] button, [' + this.selector + '] input');\n    this.selectors.forEach(selector => {\n      // checkbox possible\n      const index = Array.from(selector.parentElement.children).indexOf((selector));\n      if (indextocheck && selector.closest('tr').children[indextocheck[index]].innerHTML === '') this.disableSelector(selector, false);\n      else {\n        const evt = (selector.tagName.toLowerCase() === 'input') ? 'change' : 'click';\n        const apply_selection = (e) => {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          const target = e.currentTarget;\n          const add = (evt === 'click' || target.checked === true);\n          this.disableSelector(target, add);\n          this.toImport(target.parentElement, index, add);\n        };\n        selector.removeEventListener(evt, apply_selection, false);\n        selector.addEventListener(evt, apply_selection, false);\n      };\n    });\n    if (this.tabbutton) {\n      this.tabbutton.addEventListener('click', (e) => {\n        e.stopImmediatePropagation();\n        e.preventDefault();\n        this.resizeZone(e);\n      });\n    }\n\n  }\n\n  columnProperty(name, index) {\n    const th = this.thcells[index];\n    if (this.tbl) return (this.tbl.grid.columns[index].hasOwnProperty(name)) ? this.tbl.grid.columns[index][name] : null;\n    else return (th.dataset[name]) ? th.dataset.name : null;\n  }\n  columnIndex(prop, value) {\n    return Array.from(this.dom.querySelectorAll('thead th')).findIndex(th => (th.dataset[prop] && th.dataset[prop] === value));\n  }\n  gridColumnIndex(prop, value) {\n    if (this.tbl) return this.tbl.grid.columns.findIndex(column => (column.hasOwnProperty(prop) && column[prop] === value));\n    else return this.columnIndex(prop, value);\n  }\n  rowIndex(td) {\n    const ref = (td.parentElement) ? td.parentElement : null;\n    if (!ref) return null;\n    return this.trs.findIndex(tr => (tr === ref));\n  }\n  disableSelector(selector, disable = true) {\n    const type = selector.tagName.toLowerCase();\n    if (type === \"input\") {\n      if (selector.checked !== disable) selector.checked = disable;\n    } // disable button but toggle checkbox\n    else selector.disabled = disable;\n  }\n\n  getDataToImport(cell, celldata) {\n    let toimport = celldata;\n    if (cell !== null) {\n      if (cell.dataset.autocomplete) {\n        // select elements where key / value in different columns\n        toimport = {\n          value: celldata,\n          key: null\n        };\n        let el = null;\n        this.thcells.every((t, idx) => {\n          if (t.dataset.name == thcell.dataset.autocomplete) {\n            el = idx;\n            return false;\n          }\n          return true;\n        });\n        if (el !== null) {\n          el = this.datas[rowindex][el];\n\n          toimport.key = el;\n        }\n      } else if (cell.dataset.value) toimport = cell.dataset.value;\n\n    }\n    return toimport;\n  }\n  getSelectCells(cellindex, whatpart) {\n    const parts = this.columnProperty('parts', cellindex);\n    let selectcells = this.columnProperty('selectcells', cellindex);\n    selectcells = (selectcells) ? ((parts) ? [parts[whatpart]] : selectcells) : null;\n    return selectcells;\n  }\n\n  populateImportZone(add, items) {\n    if (!this.importzone) return;\n    const ts = this.importzone.tomselect;\n    if (ts) {\n      Object.values(ts.options).forEach((opt) => {\n        let obj = {};\n        obj[opt[ts.settings.valueField]] = opt[ts.settings.labelField];\n        if (!items[opt[ts.settings.valueField]]) items = Object.assign(items, obj);\n      });\n      items = Object.entries(items);\n      // sort items\n      items.sort((a, b) => {\n        let x = a[1];\n        let y = b[1];\n        return +(x > y) || -(y > x);\n      });\n      //  ts.clear();\n      //ts.clearOptions();\n      // add ts items\n      if (add) items.forEach(([key, text]) => {\n        if (ts.getItem(key) === null) {\n          if (ts.getOption(key) === null) {\n            let obj = {};\n            obj[ts.settings.valueField] = key;\n            obj[ts.settings.labelField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(text.trim());\n            ts.addOption(obj);\n          }\n          ts.addItem(key);\n        }\n      });\n      else items.forEach(([key, text]) => {\n        ts.removeItem(key);\n      });\n    } else {\n      Object.values(this.importzone.options).forEach(opt => {\n        let obj = {};\n        obj[opt.value] = opt.text;\n        if (!items[opt.value]) items = Object.assign(items, obj);\n      });\n      items = Object.entries(items);\n      items.sort((a, b) => {\n        let x = a[1];\n        let y = b[1];\n        return +(x > y) || -(y > x);\n      });\n      this.importzone.innerHTML = ``;\n      if (add) items.forEach(([key, text]) => {\n        const opt = this.importzone.querySelector('option[value=\"' + key + '\"]');\n        if (!opt) {\n          const o = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.create_box)('option', {\n            value: key,\n            selected: 'selected',\n            text: text\n          }, this.importzone);\n        } else opt.selected = true;\n      });\n      else items.forEach(([key, text]) => {\n        const opt = this.importzone.querySelector('option[value=\"' + key + '\"]');\n        if (opt) opt.remove(); // or opt.selected=false;\n      });\n    }\n  }\n\n  toImport(td, whatpart = 0, add = true) {\n    // cell values in json  - no parse\n    if (td.tagName.toLowerCase() !== 'td') td = td.closest('td');\n    const rowindex = this.rowIndex(td);\n    if (rowindex === null) return;\n    let showbtns = true;\n    let contact = null;\n    const cellindex = td.cellIndex;\n    const what = this.columnProperty('what', cellindex);\n    if (!what) return;\n    const parts = this.columnProperty('parts', cellindex);\n    const selectcells = this.getSelectCells(cellindex, whatpart);\n    if (!selectcells) return;\n    if ([_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.settings, _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges].indexOf(what) >= 0) this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact] = this.findContact(this.datas[rowindex]);\n    if ([_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.project, _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo, _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges].indexOf(what) >= 0) this.createImportzone(what);\n    this.addResetButton();\n    let ts = null;\n    selectcells.forEach((name, index) => {\n      index = this.gridColumnIndex('name', name);\n      if (index >= 0) {\n        const tdindex = this.columnIndex('name', name);\n        // show import buttons if importzone\n        const cell = (tdindex >= 0) ? this.trs[rowindex].cells[tdindex] : null;\n        if (cell) cell.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n        const rowdata = this.datas[rowindex];\n        const celldata = rowdata[index];\n        const thcell = (tdindex >= 0) ? this.thcells[tdindex] : null;\n        switch (what) {\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo:\n            if (!this.importzone) return;\n            // accumulate and show in import win - move the form field in modal win to view the changes and benefit of tom-select component functs...\n            ts = this.importzone.tomselect;\n            let taxons = celldata;\n            if (taxons) {\n              this.populateImportZone(add, taxons);\n              showbtns = (Object.keys(taxons).length > 0);\n              taxons = null;\n            }\n            break;\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges:\n            const privs = celldata;\n            // set everybody to 'view' if more than one project imported\n            const resetpriv = ((ts && ts.items.length > 0) || (this.importzone.selectedIndex > 0));\n            if (!this.importzone.tomselect) {\n              this.importzone.currentlist = {};\n              _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__.JsTomSelect.applyTo(this.importzone);\n            }\n            ts = this.importzone.tomselect;\n            Object.entries(privs).forEach(([priv, members]) => {\n              members.sort((a, b) => {\n                return (b.name > a.name);\n              });\n              members.forEach(member => {\n                const newpriv = (resetpriv) ? key_privileges.viewers : priv; // viewer if more than one project imported\n                let opt;\n                if (!this.importzone.currentlist || !this.importzone.currentlist[member.id]) {\n                  if (ts) {\n                    opt = ts.items.indexOf(member.id);\n                    //TODO - test - opt should always be 0\n                    if (opt >= 0) {\n                      ts.removeItem(member.id);\n                      ts.removeOption(member.id);\n                    }\n                    // addoption && addItem\n                    opt = {\n                      optgroup: newpriv\n                    }\n                    opt[ts.settings.valueField] = member.id;\n                    opt[ts.settings.searchField] = member.name;\n                    opt[ts.settings.labelField] = member.name;\n                    ts.addOption(opt);\n                    ts.addItem(member.id);\n                  } else {\n                    opt = this.importzone.querySelector('option[value=\"' + member.id + '\"]');\n                    if (opt === null) {\n                      opt = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.create_box)('option', {\n                        value: member.id,\n                        dataset: {\n                          optgroup: newpriv\n                        },\n                        selected: true,\n                        defaultSelected: true,\n                        text: member.name\n                      })\n                      this.importzone.add(opt);\n                    } else opt.dataset.optgroup = newpriv;\n                  }\n                }\n              });\n              if (ts) ts.refreshOptions(true);\n            });\n            showbtns = (((ts) ? ts.items.length : this.importzone.selectedIndex + 1) > 0);\n            break;\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.project:\n            const ln = Object.keys(this.imports).length;\n\n            if (!this.imports[name]) this.imports[name] = [];\n            const data = this.getDataToImport(cell, celldata);\n            if (add) this.imports[name].push(data);\n            else {\n              const idx = this.imports[name].indexOf(data);\n              if (idx > -1) this.imports[name].splice(idx, 1);\n            }\n            if (name === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.projid) {\n              const idx = this.columnIndex('name', 'title');\n              // show import buttons if importzone\n              const celllabel = (idx >= 0) ? this.trs[rowindex].cells[idx] : null;\n              const datalabel = rowdata[idx];\n              const label = (celllabel) ? this.getDataToImport(celllabel, datalabel) : data;\n              const items = {};\n              items[rowdata[this.tbl.getCellId(this.tbl.cellidname)]] = label;\n              this.populateImportZone(add, items);\n            }\n            if (ln === 0) {\n              if (add) this.filterByRecord(rowdata, rowindex);\n              else this.resetFilter();\n            }\n            break;\n          default:\n            if (add) this.imports[name] = this.getDataToImport(cell, celldata);\n            else {\n              const idx = this.imports.indexOf(name);\n              if (idx > -1) this.imports.splice(idx, 1);\n            }\n            break;\n        }\n      };\n    });\n    if (this.thcells.length) {\n      if (this.button) {\n        const activate = (!this.button.dataset.activated && ([_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo, _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges, _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.project].indexOf(what) >= 0));\n        this.showImport(showbtns);\n        if (activate) this.activateButtons(what, selectcells);\n      } else this.makeImport(null, selectcells, what, true);\n    }\n  }\n  messageZone(item) {\n    console.log('itemmessage', item);\n  }\n  activateButtons(what, selectcells) {\n    this.button.addEventListener('click', async (e) => {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      await this.makeImport(e.currentTarget, selectcells, what, true);\n    });\n    this.replacebutton.addEventListener('click', async (e) => {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      await this.makeImport(e.currentTarget, selectcells, what, true);\n    });\n    this.button.dataset.activated = true;\n    this.replacebutton.dataset.activated = true;\n  }\n\n  findContact(tds, name = 'contact') {\n    const index = this.gridColumnIndex('name', name);\n    if (index >= 0) return tds[index] ? tds[index] : null;\n\n    return null;\n  }\n\n  renderPrivileges(replace = false) {\n    let privileges = {};\n    const tzone = this.importzone.tomselect;\n    const pushpriv = (member, priv) => {\n      const obj = {\n        id: member.id,\n        name: member.name,\n        priv: priv\n      }\n      if (privileges[priv]) privileges[priv].push(obj);\n      else privileges[priv] = [obj];\n    }\n\n    if (tzone) {\n      const members = [...tzone.items];\n      const options = Object.assign({}, tzone.options);\n      members.forEach(member => {\n        member = options[member];\n        if (member) pushpriv(member, member.optgroup);\n\n      })\n    } else {\n      this.importzone.options.forEach(member => {\n        if (member.selected) pushpriv(member, member.dataset.optgroup);\n      })\n    }\n\n    if (this.importPrivileges(privileges, replace)) {\n      if (tzone) {\n        tzone.clear();\n        tzone.clearOptions();\n      } else this.importzone.innerHTML = ``;\n\n    }\n\n  }\n\n  importPrivileges(privileges, clear = false) {\n    const projectPrivileges = this.form.querySelector('.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.privileges.ident);\n    if (projectPrivileges === null || !projectPrivileges.jsprivileges) return;\n    const importedtag = (input) => {\n      this.setImportedTag(input, null);\n    }\n    const dismiss = () => {\n      this.dismiss();\n    }\n    const contact = (clear === true && this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact]) ? this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact] : null;\n    return (projectPrivileges.jsprivileges.importPrivileges(privileges, clear, contact, importedtag, dismiss));\n  }\n\n  resetSelector(tr) {\n    const resets = {};\n    const append_resets = (name, td, i) => {\n      const rowindex = this.rowIndex(td);\n      const celldata = this.datas[rowindex][i];\n      const cell = this.trs[rowindex].cells[i];\n      const data = this.getDataToImport(cell, celldata);\n      if (!resets[name]) resets[name] = [data];\n      else if (resets[name].indexOf(data) < 0) resets[name].push(data);\n    }\n    const selectors = tr.querySelectorAll('[' + this.selector + '] button, [' + this.selector + '] input');\n    selectors.forEach((selector, i) => {\n      if (selector.disabled) this.disableSelector(selector, false);\n      const name = (selector.parentElement.dataset.name) ? selector.parentElement.dataset.name : null;\n      append_resets(name, selector.parentElement, i);\n    });\n    tr.querySelectorAll('td.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected).forEach((td, i) => {\n      td.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n      append_resets(name, td, i);\n    });\n    return resets;\n  }\n\n  resetSelectors() {\n    this.selectors.forEach((selector, i) => {\n      if (selector.disabled) this.disableSelector(selector, false);\n    });\n    this.dom.querySelectorAll('td.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected).forEach(td => {\n      td.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n    });\n  }\n  resetImports() {\n    this.imports = [];\n    if (this.importzone) {\n      if (this.importzone.currentlist) this.importzone.currentlist = {};\n      if (this.importzone.tomselect) this.importzone.tomselect.clear();\n      else switch (this.importzone.tagName.toLowerCase()) {\n        case 'input':\n          this.importzone.value = '';\n          break;\n        case 'select':\n          this.importzone.selectedIndex = -1;\n          break;\n      }\n    }\n  }\n\n  activateClear() {\n    const clearbutton = document.getElementById('clear-' + this.importid);\n    if (!clearbutton) return;\n    clearbutton.addEventListener('click', (e) => {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      if (!this.importcontainer) return;\n      this.resetSelectors();\n      this.resetImports();\n      this.button.disabled = false;\n      this.replacebutton.disabled = false;\n      this.showImport(false);\n    });\n  }\n\n  createImportzone(name) {\n    this.showImport(true);\n    let ts = false;\n    if (!this.importzone) {\n      if (name === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) {\n        this.importzone = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.create_box)('select', {\n          id: this.importid,\n          dataset: {\n            type: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.user,\n            priv: true,\n          },\n          multiple: true\n        }, this.importcontainer);\n        ts = true;\n      } else {\n\n        if (!this.targetimport) return;\n        this.importzoneid = this.targetimport.id;\n        ts = this.targetimport.tomselect;\n        // tomselect ?\n        const importzone = this.targetimport.cloneNode();\n        importzone.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.tomselected);\n        importzone.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hiddenaccessible);\n        // keep original id to replace data on apply import\n        importzone.dataset.origin = importzone.id;\n        importzone.id = this.importid;\n        importzone.name = this.importid + '_' + importzone.name;\n        this.importcontainer.prepend(importzone);\n        this.importzone = importzone;\n        if (ts) {\n          _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__.JsTomSelect.applyTo(this.importzone);\n          ts = this.importzone.tomselect;\n        }\n        if (ts) {\n          ts.on(\"item_remove\", (value, item) => {\n            this.itemRemove(value, item);\n          });\n        }\n        this.activateClear();\n      }\n\n    }\n\n  }\n  cloneImport(btn) {\n    const import_target = this.form.querySelector('#' + this.importzone.dataset.origin);\n    if (!import_target) return false;\n    const ts = import_target.tomselect;\n    if (ts) {\n\n      // only if replace specified\n      if (btn.dataset.replace && btn.dataset.replace === 'replace') {\n        ts.clear();\n        ts.clearOptions();\n      }\n      const tzone = this.importzone.tomselect;\n      const items = [...tzone.items];\n      const options = Object.assign({}, tzone.options);\n      items.forEach((e) => {\n        let el = {};\n        el[ts.settings.valueField] = e;\n        el[ts.settings.labelField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(options[e][ts.settings.labelField]);\n        el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(options[e][ts.settings.labelField]);\n        if (ts.getOption(el[ts.settings.valueField]) === null) ts.addOption(el);\n        if (ts.getItem(el[ts.settings.valueField]) === null) ts.addItem(el[ts.settings.valueField]);\n      });\n      //  tzone.clearOptions();\n    } else {\n      if (btn.dataset.replace && btn.dataset.replace === 'replace') import_target.innerHTML = ``;\n      import_target.innerHTML = dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sanitize(this.importzone.innerHTML);\n      this.importzone.innerHTML = ``;\n    }\n    return true;\n  }\n\n  async makeImport(btn, selectcells, what, close = false) {\n    let done = true,\n      ts = null;\n\n    switch (what) {\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo:\n        if (!this.importzone) return false;\n        done = this.cloneImport(btn);\n        break;\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges:\n        if (!this.importzone) return false;\n        done = this.renderPrivileges((btn.dataset.replace && btn.dataset.replace === 'replace'));\n        if (this.importzone.currentlist) this.importzone.currentlist = {};\n        break;\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.project:\n        if (!this.importzone) return false;\n        const newone = (this.form.dataset.id) ? parseInt(this.form.dataset.id) : 0;\n        const results = await this.compileProjectRecords(newone);\n        done = this.cloneImport(btn);\n        const idx = selectcells.indexOf(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.projid);\n        if (idx >= 0) selectcells.splice(idx, 1);\n        [\"creator_users\", \"creator_organisations\", \"classiffieldlist\", \"privileges\", \"access\", \"status\", \"cnn_network_id\"].forEach(result => {\n          this.imports[result] = results[result];\n        });\n        this.imports[\"init_classif_list\"] = results.initclassiflist;\n      default:\n        const ts_add_select_item = function(ts, data) {\n          const el = {};\n          if (typeof(data) == 'string') {\n            el[ts.settings.labelField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(data);\n            el[ts.settings.valueField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(data);\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(data);\n          } else {\n            el[ts.settings.labelField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(data.value);\n            el[ts.settings.valueField] = data.key;\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(data.value);\n          }\n          if (ts.getOption(el[ts.settings.valueField]) === null) ts.addOption(el);\n          if (ts.getItem(el[ts.settings.valueField]) === null) ts.addItem(el[ts.settings.valueField]);\n        }\n        const add_select_option = function(input, data) {\n          let attr = {\n            selected: true\n          };\n          if (typeof(data) === 'string') attr.value = attr.text = data;\n          else {\n            attr.value = data.key;\n            attr.text = data.value;\n          }\n          const option = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.create_box)('option', attr, input);\n        }\n        const add_input_option = function(input, data) {\n          if (input.multiple) {\n            let values = input.value.split(',');\n            values.push(data.key);\n            input.value = values.join(',');\n          } else input.value = data;\n\n        }\n        selectcells.forEach((name, index) => {\n          let input = ((this.form.querySelector('[data-importfield=\"' + name + '\"]')) ? this.form.querySelector('[data-importfield=\"' + name + '\"]') : this.form.querySelector('[name=\"' + name + '\"]'));\n          if (input && input.dataset.noimport) return;\n          if (input && this.imports[name] !== undefined) {\n            const type = (input.type) ? input.type : input.tagName.toLowerCase();\n            ts = input.tomselect;\n            if (['init_classif_list'].indexOf(name) >= 0) {\n              let ids = this.imports[name];\n              if (Array.isArray(ids)) ids = ids.join(',');\n              else ids = ids.replace('[', '').replace(']', '').replaceAll(' ', '');\n              if (ids !== '') {\n                if (ts) ts.wrapper.classList.add('wait-for-results');\n                let opts = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.fetchSettings)(),\n                  url = '';\n                const formData = new FormData();\n                formData.append('idlist', ids);\n                url = '/search/taxoresolve' //+ new URLSearchParams({'idlist': ids});\n                opts = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.fetchSettings)({\n                  'method': 'POST',\n                  'body': formData\n                });\n                fetch(url, opts).then(response =>\n                  response.json()\n                ).then(results => {\n                  const ts = input.tomselect;\n                  if (ts) {\n                    results = Object.entries(results);\n                    results.forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sanitize(text)\n                      }\n                      ts_add_select_item(ts, el);\n                    });\n                    ts.wrapper.classList.remove('wait-for-results');\n                  } else if (type.indexOf('select') === 0) {\n                    input.querySelectorAll('option').forEach(option => {\n                      option.remove();\n                    });\n                    Object.entries(results).forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sanitize(text)\n                      }\n                      add_input_option(input, el);\n                    });\n\n                  } else {\n                    Object.entries(results).forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sanitize(text)\n                      }\n                      add_select_option(input, el);\n                    });\n                  }\n                  results = null;\n                  this.setImportedTag(input);\n                });\n              }\n            } else if (ts) {\n              if (input.multiple) this.imports[name].forEach(data => {\n                ts_add_select_item(ts, data)\n              });\n              else ts_add_select_item(ts, this.imports[name]);\n              this.setImportedTag(input);\n            } else {\n              switch (type) {\n                case 'radio':\n                case 'checkbox':\n                  const tocheck = this.form.querySelector('[name=\"' + name + '\"][value=\"' + this.imports[name] + '\"]');\n                  if (tocheck) tocheck.checked = true;\n                  break;\n                case 'select-multiple':\n                case 'select':\n                  if (input.multiple) this.imports[name].forEach(data => {\n                    add_select_option(input, data);\n                  });\n                  else add_select_option(input, this.imports[name]);\n                  break;\n                default:\n                  input.value = this.imports[name];\n                  break;\n              }\n              this.setImportedTag(input);\n            }\n            if (what !== _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.settings) input.focus();\n            done = done && true;\n\n\n          } else if (name === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) {\n            //const clearprivileges = (what === typeimport.settings);\n            const clearprivileges = false;\n            done = done && this.importPrivileges(this.imports[name], clearprivileges);\n          }\n        });\n        break;\n    }\n    if (done === true && close == true) {\n      this.dismiss();\n      if (this.form) this.form.dispatchEvent(new CustomEvent('validate'));\n    }\n  }\n\n  setImportedTag(input, selector = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.form.formbox) {\n    if (input === null) return;\n    let el = (selector === null) ? input : ((input.closest(selector)) ? input.closest(selector) : input.closest('fieldset'));\n    if (!el) return;\n    const removetag = (e) => {\n      delete el.dataset.isimported;\n      el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported);\n      input.removeEventListener('change', removetag);\n    }\n    el.dataset.isimported = this.form.dataset.isimported;\n    el.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported);\n    if (input.dataset.unique !== undefined) {\n      input.dataset.unique = input.value;\n    }\n    setTimeout(function() {\n      input.addEventListener('change', removetag);\n    }, 500);\n  }\n\n  dismiss(clear = false) {\n    if (this.button) this.showImport(false);\n    const container = this.dom.closest('details');\n    if (container) {\n      container.open = false;\n      if (clear === true) container.querySelector(this.content_selector).innerHTML = ``;\n    }\n\n  }\n  indexToCheck() {\n    // index of cells to check if empty and disable row  import btn\n    const grid = (this.tbl) ? this.tbl.grid : null;\n    if (!grid) return [0];\n    let index = grid.columns.findIndex(column => (column.what && column.what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo));\n    if (index === -1) return [0];\n    const parts = (grid.columns[index].parts) ? grid.columns[index].parts : null;\n    if (parts) {\n      const indextocheck = grid.columns.filter((column, i) => {\n        if (parts.indexOf(column.name) >= 0) return i;\n      }).map(v => {\n        return v.index;\n      });\n      return indextocheck;\n    }\n\n  }\n  addResetButton() {\n    if (!this.tbl || !this.tbl.params.hasOwnProperty(\"reset\")) return;\n    let resetbtn = this.dom.parentElement.querySelector(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton);\n    if (resetbtn === null) {\n      resetbtn = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.create_box)('a', {\n        class: _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton.substr(1),\n        text: this.tbl.params.reset\n      }, this.dom.parentElement.firstChild);\n    }\n    resetbtn.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      this.resetSelectors();\n      this.resetImports();\n    });\n\n  }\n  // show / hide importzone and buttons\n  showImport(show) {\n    if (!this.button) return;\n    if (show === false) {\n      this.button.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.replacebutton.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.importcontainer.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      if (this.tabbutton) this.tabbutton.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n    } else {\n      if (this.importzone) {\n        this.button.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n        this.replacebutton.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n        this.importcontainer.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n        this.button.disabled = false;\n        if (this.tabbutton) {\n          this.tabbutton.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n          if (this.importzone.tomselect) {\n            this.tabbutton.disabled = false;\n          } else this.tabbutton.disabled = true;\n        }\n      }\n    }\n\n  }\n  // resize importzone\n  resizeZone(e) {\n    const div = this.importcontainer.closest(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.import.zoneimport);\n    if (!div) return;\n    div.parentElement.classList.toggle(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.showfull);\n    const icon = e.currentTarget.querySelector('i');\n    if (icon) {\n      icon.classList.toggle(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.arrowout);\n      icon.classList.toggle(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.arrowin);\n    }\n  }\n}\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/data-import.js\n")}}]);
/*! For license information please see src_modules_data-import_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_data-import_js"],{"./src/modules/data-import.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataImport: () => (/* binding */ DataImport)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/js-tom-select.js */ \"./src/modules/js-tom-select.js\");\n/* harmony import */ var _modules_project_privileges_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/project-privileges.js */ \"./src/modules/project-privileges.js\");\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\n\n\n\nconst key_privileges = Object.keys(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges).reduce(function(result, key) {\n  result[key] = key;\n  return result;\n}, {});\nlet instance;\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported = 'imported';\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton = '.import-list-reset';\nclass DataImport {\n  content_selector = '.modal-content';\n  imports = [];\n  taxos = [\"preset\", \"extra\"];\n  importcontainer;\n  importzoneid;\n  importid = 'importzone';\n  selectors;\n  button;\n  clearbutton;\n  replacebutton;\n  tabbutton;\n  tbl = null;\n  constructor(tbl, what = null, selector = null) {\n    if (!tbl) return;\n    // tbl is a TableComponent  ?\n    this.tbl = (typeof(tbl) === 'object') ? tbl : null;\n    // get the table from table component or html table element id\n    this.dom = (this.tbl) ? this.tbl.dom : document.getElementById(tbl);\n    if (!this.dom) return;\n    what = (what) ? dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(what) : (tbl && tbl.params && tbl.params.import) ? tbl.params.import : (this.dom.dataset.import) ? dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(this.dom.dataset.import) : null;\n    if (!instance || instance.doc !== this.dom) {\n      // defaultoptions - keep like that\n      const options = {\n        importcontainer: '#data-import-' + what,\n        btns: '.btns-imports',\n        button: '#add-import-' + what,\n        replacebutton: '#replace-import-' + what,\n        tabbutton: '#tab-import-' + what,\n        selector: 'data-id',\n\n      };\n      this.selector = (selector) ? selector : options.selector;\n      this.importcontainer = options.importcontainer instanceof HTMLElement ? options.importcontainer : document.querySelector(options.importcontainer);\n      this.form = (options.form) ? ((options.form) instanceof HTMLElement ? options.form : document.querySelector(options.form)) : this.dom.closest('form');\n      this.button = options.button instanceof HTMLElement ? options.button : document.querySelector(options.button);\n      this.replacebutton = options.replacebutton instanceof HTMLElement ? options.replacebutton : document.querySelector(options.replacebutton);\n      this.tabbutton = options.tabbutton instanceof HTMLElement ? options.tabbutton : document.querySelector(options.tabbutton);\n      this.init(options);\n      instance = this;\n\n    }\n    return instance;\n  }\n\n  init(options) {\n    // hide importzone\n    this.showImport(false);\n    // remove line of target proj\n    let projid = this.form.querySelector('#' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.projid);\n    if (projid && projid.value) {\n      projid = this.dom.querySelector('[' + this.selector + '=\"' + projid.value + '\"]');\n      if (projid) projid.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n\n    }\n    const indextocheck = this.indexToCheck();\n    this.selectors = this.dom.querySelectorAll('[' + this.selector + '] button, [' + this.selector + '] input');\n    this.selectors.forEach(selector => {\n      // checkbox possible\n      const index = Array.from(selector.parentElement.children).indexOf((selector));\n\n      if (indextocheck && selector.closest('tr').children[indextocheck[index]].innerHTML === '') selector.disabled = true;\n      else {\n        const evt = (selector.tagName.toLowerCase() === 'input') ? 'change' : 'click';\n        const apply_selection = (e) => {\n          e.stopImmediatePropagation();\n          const target = e.currentTarget;\n          target.disabled = true;\n          this.toImport(target.parentElement, index);\n        };\n        selector.removeEventListener(evt, apply_selection, false);\n        selector.addEventListener(evt, apply_selection, false);\n      };\n    });\n    if (this.button) {\n      this.tabbutton.addEventListener('click', (e) => {\n        e.stopImmediatePropagation();\n        this.resizeZone(e);\n      });\n      this.showImport(false);\n    }\n  }\n  columnProperty(name, index, th) {\n    if (this.tbl) return (this.tbl.grid.columns[index].hasOwnProperty(name)) ? this.tbl.grid.columns[index][name] : null;\n    else return (th.dataset[name]) ? th.dataset.name : null;\n  }\n  columnIndex(prop, value) {\n    return Array.from(this.dom.querySelectorAll('thead th')).findIndex(th => (th.dataset[prop] && th.dataset[prop] === value));\n  }\n  gridColumnIndex(prop, value) {\n    if (this.tbl) return this.tbl.grid.columns.findIndex(column => (column.hasOwnProperty(prop) && column[prop] === value));\n    else return this.columnIndex(prop, value);\n  }\n  rowIndex(td, trs) {\n    const ref = (td.parentElement) ? td.parentElement : null;\n    if (!ref) return null;\n    return trs.findIndex(tr => (tr === ref));\n  }\n  toImport(td, whatpart = 0) {\n    const grid = (this.tbl) ? this.tbl.grid : null;\n    const thcells = Array.from(this.dom.querySelectorAll('thead th'));\n    const trs = Array.from(this.dom.querySelectorAll('tbody tr'));\n    const datas = (grid) ? grid.data : trs.map(tr => {\n      return Array.from(tr.childNodes).forEach(cell => {\n        return cell.innerText;\n      });\n    }); // cell values in json  - no parse\n    if (td.tagName.toLowerCase() !== 'td') td = td.closest('td');\n    const rowindex = this.rowIndex(td, trs);\n    if (rowindex === null) return;\n    let showbtns = true;\n    const cellindex = td.cellIndex;\n    const th = thcells[cellindex];\n    const tds = trs[rowindex];\n    const what = this.columnProperty('what', cellindex, th);\n    if (!what) return;\n    const parts = this.columnProperty('parts', cellindex, th);\n    let contact = null;\n    let selectcells = this.columnProperty('selectcells', cellindex, th);\n    selectcells = (selectcells) ? ((parts) ? [parts[whatpart]] : selectcells) : null;\n    if (!selectcells) return;\n    if (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.settings || what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact] = this.findContact(datas[rowindex]);\n    const importzone = (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo || what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) ? this.createImportzone(what) : null;\n    this.addResetButton();\n    let ts = null;\n    selectcells.forEach((name, index) => {\n      index = this.gridColumnIndex('name', name);\n      if (index >= 0) {\n        const tdindex = this.columnIndex('name', name);\n        // show import buttons if importzone\n        const cell = (tdindex >= 0) ? trs[rowindex].cells[tdindex] : null;\n        if (cell) cell.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n        const celldata = datas[rowindex][index];\n        const thcell = (tdindex >= 0) ? thcells[tdindex] : null;\n        switch (what) {\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo:\n            // accumulate and show in import win - move the form field in modal win to view the changes and benefit of tom-select component functs...\n            ts = importzone.tomselect;\n            let taxons = celldata;\n            if (taxons) {\n              if (ts) {\n                // merge taxons and options - unique\n                Object.values(ts.options).forEach((opt) => {\n                  let obj = {};\n                  obj[opt[ts.settings.valueField]] = opt[ts.settings.labelField];\n                  if (!taxons[opt[ts.settings.valueField]]) taxons = Object.assign(taxons, obj);\n                });\n                taxons = Object.entries(taxons);\n                // sort taxons\n                taxons.sort((a, b) => {\n                  let x = a[1];\n                  let y = b[1];\n                  return +(x > y) || -(y > x);\n                });\n                ts.clear();\n                ts.clearOptions();\n                // add taxons items\n                taxons.forEach(([key, text]) => {\n                  if (!ts.getItem(key)) {\n                    if (!ts.getOption(key)) {\n                      let obj = {};\n                      obj[ts.settings.valueField] = key;\n                      obj[ts.settings.labelField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(text.trim());\n                      ts.addOption(obj);\n                    }\n                    ts.addItem(key);\n                  }\n                });\n              } else {\n                Object.values(importzone.options).forEach(opt => {\n                  let obj = {};\n                  obj[opt.value] = opt.text;\n                  if (!taxons[opt.value]) taxons = Object.assign(taxons, obj);\n                });\n                taxons = Object.entries(taxons);\n                taxons.sort((a, b) => {\n                  let x = a[1];\n                  let y = b[1];\n                  return +(x > y) || -(y > x);\n                });\n                importzone.innerHTML = ``;\n                taxons.forEach(([key, text]) => {\n                  if (!importzone.querySelector('option[value=\"' + key + '\"]')) importzone.insertAdjacentHTML('beforeend', '<option value=\"' + key + '\" selected>' + text + '</option>');\n                });\n              }\n              showbtns = (taxons.length > 0);\n              taxons = null;\n            }\n\n            break;\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges:\n            const privs = celldata;\n            // set everybody to 'view' if more than one project imported\n            const resetpriv = ((ts && ts.items.length > 0) || (importzone.selectedIndex > 0));\n            if (!importzone.tomselect) {\n              importzone.currentlist = {};\n              const jsTomSelect = new _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__.JsTomSelect();\n              jsTomSelect.applyTo(importzone);\n            }\n            ts = importzone.tomselect;\n\n            Object.entries(privs).forEach(([priv, members]) => {\n              members.sort((a, b) => {\n                return (b.name > a.name);\n              });\n              members.forEach(member => {\n                const newpriv = (resetpriv) ? key_privileges.viewers : priv; // viewer if more than one project imported\n                let opt;\n                if (!importzone.currentlist || !importzone.currentlist[member.id]) {\n                  if (ts) {\n                    opt = ts.items.indexOf(member.id);\n                    //TODO - test - opt should always be 0\n                    if (opt >= 0) {\n                      ts.removeItem(member.id);\n                      ts.removeOption(member.id);\n                    }\n                    // addoption && addItem\n                    opt = {\n                      optgroup: newpriv\n                    }\n                    opt[ts.settings.valueField] = member.id;\n                    opt[ts.settings.searchField] = member.name;\n                    opt[ts.settings.labelField] = member.name;\n                    ts.addOption(opt);\n                    ts.addItem(member.id);\n                  } else {\n                    opt = importzone.querySelector('option[value=\"' + member.id + '\"]');\n                    if (opt === null) {\n                      opt = document.createElement('option');\n                      opt.value = member.id;\n                      opt.dataset.optgroup = newpriv;\n                      opt.selected = opt.defaultSelected = true;\n                      opt.text = member.name;\n                      importzone.add(opt);\n                    } else opt.dataset.optgroup = newpriv;\n                  }\n                }\n              });\n              importzone.tomselect.refreshOptions(true);\n            });\n\n            showbtns = (((ts) ? ts.items.length : importzone.selectedIndex + 1) > 0);\n\n\n            break;\n          default:\n            this.imports[name] = celldata;\n            if (cell !== null) {\n              if (cell.dataset.autocomplete) {\n                // select elements where key / value in different columns\n                this.imports[name] = {\n                  value: celldata,\n                  key: null\n                };\n                let el = null;\n                thcells.every((t, idx) => {\n                  if (t.dataset.name == thcell.dataset.autocomplete) {\n                    el = idx;\n                    return false;\n                  }\n                  return true;\n                });\n                if (el !== null) {\n                  el = datas[rowindex][el];\n\n                  this.imports[name].key = el;\n                }\n              } else if (cell.dataset.value) this.imports[name] = cell.dataset.value;\n\n            }\n\n            break;\n        }\n      };\n    });\n\n    if (thcells.length) {\n      if (this.button) {\n        this.showImport(showbtns);\n        if (!this.button.dataset.activated && (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo || what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges)) this.activateButtons(what, selectcells);\n      } else this.makeImport(null, selectcells, what, true);\n    }\n    //\n\n  }\n  messageZone(item) {\n    console.log('itemmessage', item);\n  }\n  activateButtons(what, selectcells) {\n\n    this.button.addEventListener('click', (e) => {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      this.makeImport(e.currentTarget, selectcells, what, true);\n\n    });\n    this.replacebutton.addEventListener('click', (e) => {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      this.makeImport(e.currentTarget, selectcells, what, true);\n\n    });\n\n    this.button.dataset.activated = true;\n    this.replacebutton.dataset.activated = true;\n  }\n\n  findContact(tds, name = 'contact') {\n    const index = this.gridColumnIndex('name', name);\n    if (index >= 0) return tds[index] ? tds[index] : null;\n\n    return null;\n  }\n\n  renderPrivileges(importzone, replace = false) {\n    let privileges = {};\n    const tzone = importzone.tomselect;\n\n    const pushpriv = (member, priv) => {\n      const obj = {\n        id: member.id,\n        name: member.name,\n        priv: priv\n      }\n      if (privileges[priv]) privileges[priv].push(obj);\n      else privileges[priv] = [obj];\n    }\n\n    if (tzone) {\n      const members = [...tzone.items];\n      const options = Object.assign({}, tzone.options);\n      members.forEach(member => {\n        member = options[member];\n        if (member) pushpriv(member, member.optgroup);\n\n      })\n    } else {\n      importzone.options.forEach(member => {\n        if (member.selected) pushpriv(member, member.dataset.optgroup);\n      })\n    }\n\n    if (this.importPrivileges(privileges, replace)) {\n      if (tzone) {\n        tzone.clear();\n        tzone.clearOptions();\n      } else importzone.innerHTML = ``;\n\n    }\n\n  }\n\n  importPrivileges(privileges, clear = false) {\n    const projectPrivileges = this.form.querySelector('.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.privileges.ident);\n\n    if (projectPrivileges === null || !projectPrivileges.jsprivileges) return;\n    const importedtag = (input) => {\n      this.setImportedTag(input, null);\n    }\n    const dismiss = () => {\n      this.dismiss();\n    }\n    const contact = (clear === true && this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact]) ? this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact] : null;\n    return (projectPrivileges.jsprivileges.importPrivileges(privileges, clear, contact, importedtag, dismiss));\n  }\n\n  resetSelectors() {\n    this.selectors.forEach((selector, i) => {\n      if (selector.disabled) selector.disabled = false;\n    });\n    this.dom.querySelectorAll('td.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected).forEach(td => {\n      td.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n    });\n  }\n\n  activateClear() {\n    const clearbutton = document.getElementById('clear-' + this.importid);\n    if (!clearbutton) return;\n    clearbutton.addEventListener('click', (e) => {\n      e.stopImmediatePropagation();\n      if (!this.importcontainer) return;\n      this.resetSelectors();\n      this.button.disabled = false;\n      this.replacebutton.disabled = false;\n      this.showImport(false);\n    });\n  }\n  createImportzone(name) {\n    this.showImport(true);\n    let importzone = this.importcontainer.querySelector('#' + this.importid);\n\n\n    if (name === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) {\n      if (!importzone) {\n        importzone = document.createElement('select');\n        this.importid = importzone.id = this.importid + '-' + name;\n        importzone.dataset.type = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.user;\n        importzone.multiple = true;\n        importzone.dataset.priv = true;\n        this.importcontainer.append(importzone);\n\n      }\n    } else {\n      const import_target = (this.form.querySelector('[name=\"' + name + '\"]')) ? this.form.querySelector('[name=\"' + name + '\"]') : this.form.querySelector('[data-importfield=\"' + name + '\"]');\n      const ts = import_target.tomselect;\n\n      if (!importzone) {\n        if (!import_target) return;\n        this.importzoneid = import_target.id;\n        // tomselect ?\n        importzone = import_target.cloneNode();\n        importzone.classList.remove('tomselected');\n        importzone.classList.remove('ts-hidden-accessible');\n        // keep original id to replace data on apply import\n        importzone.dataset.origin = importzone.id;\n        importzone.id = this.importid;\n        importzone.name = this.importid + '_' + importzone.name;\n        this.importcontainer.insertAdjacentHTML('afterbegin', importzone.outerHTML);\n        if (ts) {\n          importzone = this.importcontainer.querySelector('#' + this.importid);\n          const jsTomSelect = new _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__.JsTomSelect();\n          jsTomSelect.applyTo(importzone);\n        }\n        this.activateClear();\n\n      }\n    }\n\n    return importzone;\n\n  }\n\n  makeImport(btn, selectcells, what, close = false) {\n    let done = true,\n      ts = null;\n    const importzone = (this.importcontainer) ? this.importcontainer.querySelector('#' + this.importid) : null;\n\n    switch (what) {\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo:\n\n        if (!importzone) return false;\n        const import_target = this.form.querySelector('#' + importzone.dataset.origin);\n\n        if (!import_target) return false;\n        ts = import_target.tomselect;\n        if (ts) {\n          // only if replace specified\n          if (btn.dataset.replace && btn.dataset.replace === 'replace') {\n            ts.clear();\n            ts.clearOptions();\n          }\n\n          const tzone = importzone.tomselect;\n          const items = [...tzone.items];\n          const options = Object.assign({}, tzone.options);\n          items.forEach((e, i) => {\n            let el = {};\n            el[ts.settings.valueField] = e;\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(options[e][ts.settings.searchField]);\n            if (!ts.getOption(e)) ts.addOption(el);\n            ts.addItem(e);\n          });\n          tzone.clear();\n          tzone.clearOptions();\n        } else {\n          if (btn.dataset.replace && btn.dataset.replace === 'replace') import_target.innerHTML = ``;\n          import_target.innerHTML = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(importzone.innerHTML);\n          importzone.innerHTML = ``;\n        }\n        done = true;\n        break;\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges:\n        if (!importzone) return false;\n        done = this.renderPrivileges(importzone, (btn.dataset.replace && btn.dataset.replace === 'replace'));\n        if (importzone.currentlist) importzone.currentlist = {};\n        break;\n      default:\n        const ts_add_select_item = function(ts, data) {\n          const el = {};\n          if (typeof(data) == 'string') {\n            el[ts.settings.labelField] = data;\n            el[ts.settings.valueField] = data;\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(data);\n          } else {\n            el[ts.settings.labelField] = data.key;\n            el[ts.settings.valueField] = data.key;\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(data.value);\n          }\n          if (!ts.getOption(el[ts.settings.valueField])) ts.addOption(el);\n          if (!ts.getItem(el[ts.settings.valueField])) ts.addItem(el[ts.settings.valueField]);\n        }\n        const add_select_option = function(input, data) {\n          const option = document.createElement('option');\n          if (typeof(data) === 'string') option.value = option.text = data;\n          else {\n            option.value = data.key;\n            option.text = data.value;\n          }\n          option.selected = true;\n          input.append(option);\n        }\n        const add_input_option = function(input, data) {\n          if (input.multiple) {\n            let values = input.value.split(',');\n            values.push(data.key);\n            input.value = values.join(',');\n          } else input.value = data;\n\n        }\n        selectcells.forEach((name, index) => {\n          let input = ((this.form.querySelector('[data-importfield=\"' + name + '\"]')) ? this.form.querySelector('[data-importfield=\"' + name + '\"]') : this.form.querySelector('[name=\"' + name + '\"]'));\n          if (input && input.dataset.noimport) return;\n          if (input && this.imports[name] !== undefined) {\n            const type = (input.type) ? input.type : input.tagName.toLowerCase();\n            ts = input.tomselect;\n            if (name === 'init_classif_list') {\n              let ids = this.imports[name];\n              if (Array.isArray(ids)) ids = ids.join(',');\n              else ids = ids.replace('[', '').replace(']', '').replaceAll(' ', '');\n              if (ts) {\n                ts.wrapper.classList.add('wait-for-results');\n                ts.clear(false);\n                ts.clearOptions();\n              }\n              if (ids !== '') {\n                if (ts) ts.wrapper.classList.add('wait-for-results');\n                const formData = new FormData();\n                formData.append('idlist', ids);\n                const url = '/search/taxoresolve' //+ new URLSearchParams({'idlist': ids});\n                fetch(url, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.fetchSettings)({\n                  'method': 'POST',\n                  'body': formData\n                })).then(response =>\n                  response.json()\n                ).then(results => {\n                  const ts = input.tomselect;\n                  if (ts) {\n\n                    Object.entries(results).forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(text)\n                      }\n                      ts_add_select_item(ts, el);\n                    });\n                    ts.wrapper.classList.remove('wait-for-results');\n                  } else if (type.indexOf('select') === 0) {\n\n                    input.querySelectorAll('option').forEach(option => {\n                      option.remove();\n                    });\n                    Object.entries(results).forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(text)\n                      }\n                      add_input_option(input, el);\n                    });\n\n                  } else {\n                    Object.entries(results).forEach(([key, text]) => {\n                      const el = {\n                        key: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(key),\n                        value: dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(text)\n                      }\n                      add_select_option(input, el);\n                    });\n\n                  }\n\n                  results = null;\n                  this.setImportedTag(input);\n                });\n              }\n            } else if (ts) {\n              ts_add_select_item(ts, this.imports[name]);\n              this.setImportedTag(input);\n            } else {\n              switch (type) {\n                case 'radio':\n                case 'checkbox':\n                  input = this.form.querySelector('[name=\"' + name + '\"][value=\"' + this.imports[name] + '\"]');\n                  if (input) input.checked = true;\n                  break;\n                case 'select':\n                  if (input.multiple) this.imports[name].forEach(data => {\n                    add_select_option(input, data)\n                  });\n                  else add_select_option(input, this.imports[name]);\n\n                  break;\n                default:\n                  input.value = this.imports[name];\n                  break;\n              }\n              this.setImportedTag(input);\n            }\n            if (what !== _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.settings) input.focus();\n            done = done && true;\n            // set imported tag to fieldbox\n\n\n          } else if (name === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) {\n            //const clearprivileges = (what === typeimport.settings);\n            const clearprivileges = false;\n            done = done && this.importPrivileges(this.imports[name], clearprivileges);\n          }\n        });\n        break;\n    }\n    if (done === true && close == true) {\n      this.dismiss();\n      if (this.form) this.form.dispatchEvent(new CustomEvent('validate'));\n    }\n  }\n\n  setImportedTag(input, selector = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.form.formbox) {\n    let el = (selector === null) ? input : (input.closest(selector) ? input.closest(selector) : input.closest('fieldset'));\n    if (!el) return;\n    const removetag = (e) => {\n      delete el.dataset.isimported;\n      el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported);\n      input.removeEventListener('change', removetag);\n    }\n    el.dataset.isimported = this.form.dataset.isimported;\n    el.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.imported);\n    if (input.dataset.unique !== undefined) {\n      input.dataset.unique = input.value;\n    }\n    setTimeout(function() {\n      input.addEventListener('change', removetag);\n    }, 500);\n  }\n\n  dismiss(clear = false) {\n    if (this.button) this.showImport(false);\n    const container = this.dom.closest('details');\n    if (container) {\n      container.open = false;\n      if (clear === true) container.querySelector(this.content_selector).innerHTML = ``;\n    }\n\n  }\n  indexToCheck() {\n    // index of cells to check if empty and disable row  import btn\n    const grid = (this.tbl) ? this.tbl.grid : null;\n    if (!grid) return [0];\n    let index = grid.columns.findIndex(column => (column.what && column.what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo));\n    if (index === -1) return [0];\n    const parts = (grid.columns[index].parts) ? grid.columns[index].parts : null;\n    if (parts) {\n      const indextocheck = grid.columns.filter((column, i) => {\n        if (parts.indexOf(column.name) >= 0) return i;\n      }).map(v => {\n        return v.index;\n      });\n      return indextocheck;\n    }\n\n  }\n  addResetButton() {\n    if (!this.tbl || !this.tbl.params.hasOwnProperty(\"reset\")) return;\n    let resetbtn = this.dom.parentElement.querySelector(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton);\n    if (resetbtn === null) {\n      resetbtn = document.createElement('a');\n      resetbtn.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.resetbutton.substr(1));\n      resetbtn.textContent = this.tbl.params.reset;\n      this.dom.parentElement.firstChild.prepend(resetbtn);\n    }\n    resetbtn.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      const selectors = this.selectors = this.dom.querySelectorAll('[' + this.selector + '] button:disabled, [' + this.selector + '] input:disabled');\n      selectors.forEach(selector => {\n        selector.disabled = false;\n        const sel = selector.closest('tr').querySelector('.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n        console.log('sel' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected, sel)\n        if (sel) sel.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n      });\n    });\n\n  }\n  // show / hide importzone and buttons\n  showImport(show) {\n    if (!this.button) return;\n\n    if (show === false) {\n      this.button.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.replacebutton.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.importcontainer.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.tabbutton.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n\n    } else {\n      this.button.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.replacebutton.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n\n      this.importcontainer.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.button.disabled = false;\n      const importzone = this.importcontainer.querySelector('#' + this.importid);\n      if (importzone) {\n        this.tabbutton.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n        if (importzone.tomselect && importzone.tomselect.control.offsetHeight < importzone.tomselect.control.scrollHeight) {\n          this.tabbutton.disabled = false;\n        } else this.tabbutton.disabled = true;\n      }\n    }\n  }\n  // resize importzone\n  resizeZone(e) {\n    const div = this.importcontainer.closest(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component.import.zoneimport);\n    if (!div) return;\n    div.parentElement.classList.toggle(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.showfull);\n    const icon = e.currentTarget.querySelector('i');\n    if (icon) {\n      icon.classList.toggle('icon-arrow-pointing-out');\n      icon.classList.toggle('icon-arrow-pointing-in');\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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REFBRztBQUN0QywwQ0FBMEMsMkRBQUc7O0FBRTdDLDRDQUE0QywyREFBRztBQUMvQztBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsMkRBQUc7QUFDM0M7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLG9FQUFZO0FBQ3pEO0FBQ0EsdUNBQXVDLDJEQUFHO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvZGF0YS1pbXBvcnQuanM/ODBhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRE9NUHVyaWZ5IGZyb20gJ2RvbXB1cmlmeSc7XG5pbXBvcnQge1xuICBKc1RvbVNlbGVjdFxufSBmcm9tIFwiLi4vbW9kdWxlcy9qcy10b20tc2VsZWN0LmpzXCI7XG5pbXBvcnQge1xuICBQcm9qZWN0UHJpdmlsZWdlc1xufSBmcm9tICcuLi9tb2R1bGVzL3Byb2plY3QtcHJpdmlsZWdlcy5qcyc7XG5pbXBvcnQge1xuICBmZXRjaFNldHRpbmdzLFxuICB1bmVzY2FwZV9odG1sXG59IGZyb20gJy4uL21vZHVsZXMvdXRpbHMuanMnO1xuaW1wb3J0IHtcbiAgbW9kZWxzLFxuICB0eXBlaW1wb3J0LFxuICBjc3MsXG4gIGRlZmluZWRfcHJpdmlsZWdlcyxcbiAgZG9tc2VsZWN0b3JzXG59IGZyb20gJy4uL21vZHVsZXMvbW9kdWxlcy1jb25maWcuanMnO1xuY29uc3Qga2V5X3ByaXZpbGVnZXMgPSBPYmplY3Qua2V5cyhkZWZpbmVkX3ByaXZpbGVnZXMpLnJlZHVjZShmdW5jdGlvbihyZXN1bHQsIGtleSkge1xuICByZXN1bHRba2V5XSA9IGtleTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sIHt9KTtcbmxldCBpbnN0YW5jZTtcbmNzcy5pbXBvcnRlZCA9ICdpbXBvcnRlZCc7XG5kb21zZWxlY3RvcnMucmVzZXRidXR0b24gPSAnLmltcG9ydC1saXN0LXJlc2V0JztcbmV4cG9ydCBjbGFzcyBEYXRhSW1wb3J0IHtcbiAgY29udGVudF9zZWxlY3RvciA9ICcubW9kYWwtY29udGVudCc7XG4gIGltcG9ydHMgPSBbXTtcbiAgdGF4b3MgPSBbXCJwcmVzZXRcIiwgXCJleHRyYVwiXTtcbiAgaW1wb3J0Y29udGFpbmVyO1xuICBpbXBvcnR6b25laWQ7XG4gIGltcG9ydGlkID0gJ2ltcG9ydHpvbmUnO1xuICBzZWxlY3RvcnM7XG4gIGJ1dHRvbjtcbiAgY2xlYXJidXR0b247XG4gIHJlcGxhY2VidXR0b247XG4gIHRhYmJ1dHRvbjtcbiAgdGJsID0gbnVsbDtcbiAgY29uc3RydWN0b3IodGJsLCB3aGF0ID0gbnVsbCwgc2VsZWN0b3IgPSBudWxsKSB7XG4gICAgaWYgKCF0YmwpIHJldHVybjtcbiAgICAvLyB0YmwgaXMgYSBUYWJsZUNvbXBvbmVudCAgP1xuICAgIHRoaXMudGJsID0gKHR5cGVvZih0YmwpID09PSAnb2JqZWN0JykgPyB0YmwgOiBudWxsO1xuICAgIC8vIGdldCB0aGUgdGFibGUgZnJvbSB0YWJsZSBjb21wb25lbnQgb3IgaHRtbCB0YWJsZSBlbGVtZW50IGlkXG4gICAgdGhpcy5kb20gPSAodGhpcy50YmwpID8gdGhpcy50YmwuZG9tIDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGJsKTtcbiAgICBpZiAoIXRoaXMuZG9tKSByZXR1cm47XG4gICAgd2hhdCA9ICh3aGF0KSA/IERPTVB1cmlmeS5zYW5pdGl6ZSh3aGF0KSA6ICh0YmwgJiYgdGJsLnBhcmFtcyAmJiB0YmwucGFyYW1zLmltcG9ydCkgPyB0YmwucGFyYW1zLmltcG9ydCA6ICh0aGlzLmRvbS5kYXRhc2V0LmltcG9ydCkgPyBET01QdXJpZnkuc2FuaXRpemUodGhpcy5kb20uZGF0YXNldC5pbXBvcnQpIDogbnVsbDtcbiAgICBpZiAoIWluc3RhbmNlIHx8IGluc3RhbmNlLmRvYyAhPT0gdGhpcy5kb20pIHtcbiAgICAgIC8vIGRlZmF1bHRvcHRpb25zIC0ga2VlcCBsaWtlIHRoYXRcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGltcG9ydGNvbnRhaW5lcjogJyNkYXRhLWltcG9ydC0nICsgd2hhdCxcbiAgICAgICAgYnRuczogJy5idG5zLWltcG9ydHMnLFxuICAgICAgICBidXR0b246ICcjYWRkLWltcG9ydC0nICsgd2hhdCxcbiAgICAgICAgcmVwbGFjZWJ1dHRvbjogJyNyZXBsYWNlLWltcG9ydC0nICsgd2hhdCxcbiAgICAgICAgdGFiYnV0dG9uOiAnI3RhYi1pbXBvcnQtJyArIHdoYXQsXG4gICAgICAgIHNlbGVjdG9yOiAnZGF0YS1pZCcsXG5cbiAgICAgIH07XG4gICAgICB0aGlzLnNlbGVjdG9yID0gKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogb3B0aW9ucy5zZWxlY3RvcjtcbiAgICAgIHRoaXMuaW1wb3J0Y29udGFpbmVyID0gb3B0aW9ucy5pbXBvcnRjb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IG9wdGlvbnMuaW1wb3J0Y29udGFpbmVyIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLmltcG9ydGNvbnRhaW5lcik7XG4gICAgICB0aGlzLmZvcm0gPSAob3B0aW9ucy5mb3JtKSA/ICgob3B0aW9ucy5mb3JtKSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ID8gb3B0aW9ucy5mb3JtIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLmZvcm0pKSA6IHRoaXMuZG9tLmNsb3Nlc3QoJ2Zvcm0nKTtcbiAgICAgIHRoaXMuYnV0dG9uID0gb3B0aW9ucy5idXR0b24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IG9wdGlvbnMuYnV0dG9uIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLmJ1dHRvbik7XG4gICAgICB0aGlzLnJlcGxhY2VidXR0b24gPSBvcHRpb25zLnJlcGxhY2VidXR0b24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IG9wdGlvbnMucmVwbGFjZWJ1dHRvbiA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy5yZXBsYWNlYnV0dG9uKTtcbiAgICAgIHRoaXMudGFiYnV0dG9uID0gb3B0aW9ucy50YWJidXR0b24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IG9wdGlvbnMudGFiYnV0dG9uIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLnRhYmJ1dHRvbik7XG4gICAgICB0aGlzLmluaXQob3B0aW9ucyk7XG4gICAgICBpbnN0YW5jZSA9IHRoaXM7XG5cbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgaW5pdChvcHRpb25zKSB7XG4gICAgLy8gaGlkZSBpbXBvcnR6b25lXG4gICAgdGhpcy5zaG93SW1wb3J0KGZhbHNlKTtcbiAgICAvLyByZW1vdmUgbGluZSBvZiB0YXJnZXQgcHJvalxuICAgIGxldCBwcm9qaWQgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcignIycgKyBkb21zZWxlY3RvcnMucHJvamlkKTtcbiAgICBpZiAocHJvamlkICYmIHByb2ppZC52YWx1ZSkge1xuICAgICAgcHJvamlkID0gdGhpcy5kb20ucXVlcnlTZWxlY3RvcignWycgKyB0aGlzLnNlbGVjdG9yICsgJz1cIicgKyBwcm9qaWQudmFsdWUgKyAnXCJdJyk7XG4gICAgICBpZiAocHJvamlkKSBwcm9qaWQuY2xhc3NMaXN0LmFkZChjc3MuaGlkZSk7XG5cbiAgICB9XG4gICAgY29uc3QgaW5kZXh0b2NoZWNrID0gdGhpcy5pbmRleFRvQ2hlY2soKTtcbiAgICB0aGlzLnNlbGVjdG9ycyA9IHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJ1snICsgdGhpcy5zZWxlY3RvciArICddIGJ1dHRvbiwgWycgKyB0aGlzLnNlbGVjdG9yICsgJ10gaW5wdXQnKTtcbiAgICB0aGlzLnNlbGVjdG9ycy5mb3JFYWNoKHNlbGVjdG9yID0+IHtcbiAgICAgIC8vIGNoZWNrYm94IHBvc3NpYmxlXG4gICAgICBjb25zdCBpbmRleCA9IEFycmF5LmZyb20oc2VsZWN0b3IucGFyZW50RWxlbWVudC5jaGlsZHJlbikuaW5kZXhPZigoc2VsZWN0b3IpKTtcblxuICAgICAgaWYgKGluZGV4dG9jaGVjayAmJiBzZWxlY3Rvci5jbG9zZXN0KCd0cicpLmNoaWxkcmVuW2luZGV4dG9jaGVja1tpbmRleF1dLmlubmVySFRNTCA9PT0gJycpIHNlbGVjdG9yLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBldnQgPSAoc2VsZWN0b3IudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnKSA/ICdjaGFuZ2UnIDogJ2NsaWNrJztcbiAgICAgICAgY29uc3QgYXBwbHlfc2VsZWN0aW9uID0gKGUpID0+IHtcbiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUuY3VycmVudFRhcmdldDtcbiAgICAgICAgICB0YXJnZXQuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMudG9JbXBvcnQodGFyZ2V0LnBhcmVudEVsZW1lbnQsIGluZGV4KTtcbiAgICAgICAgfTtcbiAgICAgICAgc2VsZWN0b3IucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnQsIGFwcGx5X3NlbGVjdGlvbiwgZmFsc2UpO1xuICAgICAgICBzZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKGV2dCwgYXBwbHlfc2VsZWN0aW9uLCBmYWxzZSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIGlmICh0aGlzLmJ1dHRvbikge1xuICAgICAgdGhpcy50YWJidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLnJlc2l6ZVpvbmUoZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2hvd0ltcG9ydChmYWxzZSk7XG4gICAgfVxuICB9XG4gIGNvbHVtblByb3BlcnR5KG5hbWUsIGluZGV4LCB0aCkge1xuICAgIGlmICh0aGlzLnRibCkgcmV0dXJuICh0aGlzLnRibC5ncmlkLmNvbHVtbnNbaW5kZXhdLmhhc093blByb3BlcnR5KG5hbWUpKSA/IHRoaXMudGJsLmdyaWQuY29sdW1uc1tpbmRleF1bbmFtZV0gOiBudWxsO1xuICAgIGVsc2UgcmV0dXJuICh0aC5kYXRhc2V0W25hbWVdKSA/IHRoLmRhdGFzZXQubmFtZSA6IG51bGw7XG4gIH1cbiAgY29sdW1uSW5kZXgocHJvcCwgdmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmRvbS5xdWVyeVNlbGVjdG9yQWxsKCd0aGVhZCB0aCcpKS5maW5kSW5kZXgodGggPT4gKHRoLmRhdGFzZXRbcHJvcF0gJiYgdGguZGF0YXNldFtwcm9wXSA9PT0gdmFsdWUpKTtcbiAgfVxuICBncmlkQ29sdW1uSW5kZXgocHJvcCwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy50YmwpIHJldHVybiB0aGlzLnRibC5ncmlkLmNvbHVtbnMuZmluZEluZGV4KGNvbHVtbiA9PiAoY29sdW1uLmhhc093blByb3BlcnR5KHByb3ApICYmIGNvbHVtbltwcm9wXSA9PT0gdmFsdWUpKTtcbiAgICBlbHNlIHJldHVybiB0aGlzLmNvbHVtbkluZGV4KHByb3AsIHZhbHVlKTtcbiAgfVxuICByb3dJbmRleCh0ZCwgdHJzKSB7XG4gICAgY29uc3QgcmVmID0gKHRkLnBhcmVudEVsZW1lbnQpID8gdGQucGFyZW50RWxlbWVudCA6IG51bGw7XG4gICAgaWYgKCFyZWYpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0cnMuZmluZEluZGV4KHRyID0+ICh0ciA9PT0gcmVmKSk7XG4gIH1cbiAgdG9JbXBvcnQodGQsIHdoYXRwYXJ0ID0gMCkge1xuICAgIGNvbnN0IGdyaWQgPSAodGhpcy50YmwpID8gdGhpcy50YmwuZ3JpZCA6IG51bGw7XG4gICAgY29uc3QgdGhjZWxscyA9IEFycmF5LmZyb20odGhpcy5kb20ucXVlcnlTZWxlY3RvckFsbCgndGhlYWQgdGgnKSk7XG4gICAgY29uc3QgdHJzID0gQXJyYXkuZnJvbSh0aGlzLmRvbS5xdWVyeVNlbGVjdG9yQWxsKCd0Ym9keSB0cicpKTtcbiAgICBjb25zdCBkYXRhcyA9IChncmlkKSA/IGdyaWQuZGF0YSA6IHRycy5tYXAodHIgPT4ge1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20odHIuY2hpbGROb2RlcykuZm9yRWFjaChjZWxsID0+IHtcbiAgICAgICAgcmV0dXJuIGNlbGwuaW5uZXJUZXh0O1xuICAgICAgfSk7XG4gICAgfSk7IC8vIGNlbGwgdmFsdWVzIGluIGpzb24gIC0gbm8gcGFyc2VcbiAgICBpZiAodGQudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAndGQnKSB0ZCA9IHRkLmNsb3Nlc3QoJ3RkJyk7XG4gICAgY29uc3Qgcm93aW5kZXggPSB0aGlzLnJvd0luZGV4KHRkLCB0cnMpO1xuICAgIGlmIChyb3dpbmRleCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIGxldCBzaG93YnRucyA9IHRydWU7XG4gICAgY29uc3QgY2VsbGluZGV4ID0gdGQuY2VsbEluZGV4O1xuICAgIGNvbnN0IHRoID0gdGhjZWxsc1tjZWxsaW5kZXhdO1xuICAgIGNvbnN0IHRkcyA9IHRyc1tyb3dpbmRleF07XG4gICAgY29uc3Qgd2hhdCA9IHRoaXMuY29sdW1uUHJvcGVydHkoJ3doYXQnLCBjZWxsaW5kZXgsIHRoKTtcbiAgICBpZiAoIXdoYXQpIHJldHVybjtcbiAgICBjb25zdCBwYXJ0cyA9IHRoaXMuY29sdW1uUHJvcGVydHkoJ3BhcnRzJywgY2VsbGluZGV4LCB0aCk7XG4gICAgbGV0IGNvbnRhY3QgPSBudWxsO1xuICAgIGxldCBzZWxlY3RjZWxscyA9IHRoaXMuY29sdW1uUHJvcGVydHkoJ3NlbGVjdGNlbGxzJywgY2VsbGluZGV4LCB0aCk7XG4gICAgc2VsZWN0Y2VsbHMgPSAoc2VsZWN0Y2VsbHMpID8gKChwYXJ0cykgPyBbcGFydHNbd2hhdHBhcnRdXSA6IHNlbGVjdGNlbGxzKSA6IG51bGw7XG4gICAgaWYgKCFzZWxlY3RjZWxscykgcmV0dXJuO1xuICAgIGlmICh3aGF0ID09PSB0eXBlaW1wb3J0LnNldHRpbmdzIHx8IHdoYXQgPT09IHR5cGVpbXBvcnQucHJpdmlsZWdlcykgdGhpcy5pbXBvcnRzW21vZGVscy5jb250YWN0XSA9IHRoaXMuZmluZENvbnRhY3QoZGF0YXNbcm93aW5kZXhdKTtcbiAgICBjb25zdCBpbXBvcnR6b25lID0gKHdoYXQgPT09IHR5cGVpbXBvcnQudGF4byB8fCB3aGF0ID09PSB0eXBlaW1wb3J0LnByaXZpbGVnZXMpID8gdGhpcy5jcmVhdGVJbXBvcnR6b25lKHdoYXQpIDogbnVsbDtcbiAgICB0aGlzLmFkZFJlc2V0QnV0dG9uKCk7XG4gICAgbGV0IHRzID0gbnVsbDtcbiAgICBzZWxlY3RjZWxscy5mb3JFYWNoKChuYW1lLCBpbmRleCkgPT4ge1xuICAgICAgaW5kZXggPSB0aGlzLmdyaWRDb2x1bW5JbmRleCgnbmFtZScsIG5hbWUpO1xuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgY29uc3QgdGRpbmRleCA9IHRoaXMuY29sdW1uSW5kZXgoJ25hbWUnLCBuYW1lKTtcbiAgICAgICAgLy8gc2hvdyBpbXBvcnQgYnV0dG9ucyBpZiBpbXBvcnR6b25lXG4gICAgICAgIGNvbnN0IGNlbGwgPSAodGRpbmRleCA+PSAwKSA/IHRyc1tyb3dpbmRleF0uY2VsbHNbdGRpbmRleF0gOiBudWxsO1xuICAgICAgICBpZiAoY2VsbCkgY2VsbC5jbGFzc0xpc3QuYWRkKGNzcy5zZWxlY3RlZCk7XG4gICAgICAgIGNvbnN0IGNlbGxkYXRhID0gZGF0YXNbcm93aW5kZXhdW2luZGV4XTtcbiAgICAgICAgY29uc3QgdGhjZWxsID0gKHRkaW5kZXggPj0gMCkgPyB0aGNlbGxzW3RkaW5kZXhdIDogbnVsbDtcbiAgICAgICAgc3dpdGNoICh3aGF0KSB7XG4gICAgICAgICAgY2FzZSB0eXBlaW1wb3J0LnRheG86XG4gICAgICAgICAgICAvLyBhY2N1bXVsYXRlIGFuZCBzaG93IGluIGltcG9ydCB3aW4gLSBtb3ZlIHRoZSBmb3JtIGZpZWxkIGluIG1vZGFsIHdpbiB0byB2aWV3IHRoZSBjaGFuZ2VzIGFuZCBiZW5lZml0IG9mIHRvbS1zZWxlY3QgY29tcG9uZW50IGZ1bmN0cy4uLlxuICAgICAgICAgICAgdHMgPSBpbXBvcnR6b25lLnRvbXNlbGVjdDtcbiAgICAgICAgICAgIGxldCB0YXhvbnMgPSBjZWxsZGF0YTtcbiAgICAgICAgICAgIGlmICh0YXhvbnMpIHtcbiAgICAgICAgICAgICAgaWYgKHRzKSB7XG4gICAgICAgICAgICAgICAgLy8gbWVyZ2UgdGF4b25zIGFuZCBvcHRpb25zIC0gdW5pcXVlXG4gICAgICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyh0cy5vcHRpb25zKS5mb3JFYWNoKChvcHQpID0+IHtcbiAgICAgICAgICAgICAgICAgIGxldCBvYmogPSB7fTtcbiAgICAgICAgICAgICAgICAgIG9ialtvcHRbdHMuc2V0dGluZ3MudmFsdWVGaWVsZF1dID0gb3B0W3RzLnNldHRpbmdzLmxhYmVsRmllbGRdO1xuICAgICAgICAgICAgICAgICAgaWYgKCF0YXhvbnNbb3B0W3RzLnNldHRpbmdzLnZhbHVlRmllbGRdXSkgdGF4b25zID0gT2JqZWN0LmFzc2lnbih0YXhvbnMsIG9iaik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGF4b25zID0gT2JqZWN0LmVudHJpZXModGF4b25zKTtcbiAgICAgICAgICAgICAgICAvLyBzb3J0IHRheG9uc1xuICAgICAgICAgICAgICAgIHRheG9ucy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgICBsZXQgeCA9IGFbMV07XG4gICAgICAgICAgICAgICAgICBsZXQgeSA9IGJbMV07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKyh4ID4geSkgfHwgLSh5ID4geCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdHMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB0cy5jbGVhck9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAvLyBhZGQgdGF4b25zIGl0ZW1zXG4gICAgICAgICAgICAgICAgdGF4b25zLmZvckVhY2goKFtrZXksIHRleHRdKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoIXRzLmdldEl0ZW0oa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRzLmdldE9wdGlvbihrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbGV0IG9iaiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgIG9ialt0cy5zZXR0aW5ncy52YWx1ZUZpZWxkXSA9IGtleTtcbiAgICAgICAgICAgICAgICAgICAgICBvYmpbdHMuc2V0dGluZ3MubGFiZWxGaWVsZF0gPSB1bmVzY2FwZV9odG1sKHRleHQudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICB0cy5hZGRPcHRpb24ob2JqKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cy5hZGRJdGVtKGtleSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhpbXBvcnR6b25lLm9wdGlvbnMpLmZvckVhY2gob3B0ID0+IHtcbiAgICAgICAgICAgICAgICAgIGxldCBvYmogPSB7fTtcbiAgICAgICAgICAgICAgICAgIG9ialtvcHQudmFsdWVdID0gb3B0LnRleHQ7XG4gICAgICAgICAgICAgICAgICBpZiAoIXRheG9uc1tvcHQudmFsdWVdKSB0YXhvbnMgPSBPYmplY3QuYXNzaWduKHRheG9ucywgb2JqKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0YXhvbnMgPSBPYmplY3QuZW50cmllcyh0YXhvbnMpO1xuICAgICAgICAgICAgICAgIHRheG9ucy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgICBsZXQgeCA9IGFbMV07XG4gICAgICAgICAgICAgICAgICBsZXQgeSA9IGJbMV07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKyh4ID4geSkgfHwgLSh5ID4geCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW1wb3J0em9uZS5pbm5lckhUTUwgPSBgYDtcbiAgICAgICAgICAgICAgICB0YXhvbnMuZm9yRWFjaCgoW2tleSwgdGV4dF0pID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmICghaW1wb3J0em9uZS5xdWVyeVNlbGVjdG9yKCdvcHRpb25bdmFsdWU9XCInICsga2V5ICsgJ1wiXScpKSBpbXBvcnR6b25lLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJzxvcHRpb24gdmFsdWU9XCInICsga2V5ICsgJ1wiIHNlbGVjdGVkPicgKyB0ZXh0ICsgJzwvb3B0aW9uPicpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNob3didG5zID0gKHRheG9ucy5sZW5ndGggPiAwKTtcbiAgICAgICAgICAgICAgdGF4b25zID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSB0eXBlaW1wb3J0LnByaXZpbGVnZXM6XG4gICAgICAgICAgICBjb25zdCBwcml2cyA9IGNlbGxkYXRhO1xuICAgICAgICAgICAgLy8gc2V0IGV2ZXJ5Ym9keSB0byAndmlldycgaWYgbW9yZSB0aGFuIG9uZSBwcm9qZWN0IGltcG9ydGVkXG4gICAgICAgICAgICBjb25zdCByZXNldHByaXYgPSAoKHRzICYmIHRzLml0ZW1zLmxlbmd0aCA+IDApIHx8IChpbXBvcnR6b25lLnNlbGVjdGVkSW5kZXggPiAwKSk7XG4gICAgICAgICAgICBpZiAoIWltcG9ydHpvbmUudG9tc2VsZWN0KSB7XG4gICAgICAgICAgICAgIGltcG9ydHpvbmUuY3VycmVudGxpc3QgPSB7fTtcbiAgICAgICAgICAgICAgY29uc3QganNUb21TZWxlY3QgPSBuZXcgSnNUb21TZWxlY3QoKTtcbiAgICAgICAgICAgICAganNUb21TZWxlY3QuYXBwbHlUbyhpbXBvcnR6b25lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRzID0gaW1wb3J0em9uZS50b21zZWxlY3Q7XG5cbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHByaXZzKS5mb3JFYWNoKChbcHJpdiwgbWVtYmVyc10pID0+IHtcbiAgICAgICAgICAgICAgbWVtYmVycy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChiLm5hbWUgPiBhLm5hbWUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgbWVtYmVycy5mb3JFYWNoKG1lbWJlciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3cHJpdiA9IChyZXNldHByaXYpID8ga2V5X3ByaXZpbGVnZXMudmlld2VycyA6IHByaXY7IC8vIHZpZXdlciBpZiBtb3JlIHRoYW4gb25lIHByb2plY3QgaW1wb3J0ZWRcbiAgICAgICAgICAgICAgICBsZXQgb3B0O1xuICAgICAgICAgICAgICAgIGlmICghaW1wb3J0em9uZS5jdXJyZW50bGlzdCB8fCAhaW1wb3J0em9uZS5jdXJyZW50bGlzdFttZW1iZXIuaWRdKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodHMpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0ID0gdHMuaXRlbXMuaW5kZXhPZihtZW1iZXIuaWQpO1xuICAgICAgICAgICAgICAgICAgICAvL1RPRE8gLSB0ZXN0IC0gb3B0IHNob3VsZCBhbHdheXMgYmUgMFxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICB0cy5yZW1vdmVJdGVtKG1lbWJlci5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgdHMucmVtb3ZlT3B0aW9uKG1lbWJlci5pZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkb3B0aW9uICYmIGFkZEl0ZW1cbiAgICAgICAgICAgICAgICAgICAgb3B0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwOiBuZXdwcml2XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3B0W3RzLnNldHRpbmdzLnZhbHVlRmllbGRdID0gbWVtYmVyLmlkO1xuICAgICAgICAgICAgICAgICAgICBvcHRbdHMuc2V0dGluZ3Muc2VhcmNoRmllbGRdID0gbWVtYmVyLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIG9wdFt0cy5zZXR0aW5ncy5sYWJlbEZpZWxkXSA9IG1lbWJlci5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB0cy5hZGRPcHRpb24ob3B0KTtcbiAgICAgICAgICAgICAgICAgICAgdHMuYWRkSXRlbShtZW1iZXIuaWQpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0ID0gaW1wb3J0em9uZS5xdWVyeVNlbGVjdG9yKCdvcHRpb25bdmFsdWU9XCInICsgbWVtYmVyLmlkICsgJ1wiXScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgb3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgb3B0LnZhbHVlID0gbWVtYmVyLmlkO1xuICAgICAgICAgICAgICAgICAgICAgIG9wdC5kYXRhc2V0Lm9wdGdyb3VwID0gbmV3cHJpdjtcbiAgICAgICAgICAgICAgICAgICAgICBvcHQuc2VsZWN0ZWQgPSBvcHQuZGVmYXVsdFNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICBvcHQudGV4dCA9IG1lbWJlci5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgIGltcG9ydHpvbmUuYWRkKG9wdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBvcHQuZGF0YXNldC5vcHRncm91cCA9IG5ld3ByaXY7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaW1wb3J0em9uZS50b21zZWxlY3QucmVmcmVzaE9wdGlvbnModHJ1ZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2hvd2J0bnMgPSAoKCh0cykgPyB0cy5pdGVtcy5sZW5ndGggOiBpbXBvcnR6b25lLnNlbGVjdGVkSW5kZXggKyAxKSA+IDApO1xuXG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aGlzLmltcG9ydHNbbmFtZV0gPSBjZWxsZGF0YTtcbiAgICAgICAgICAgIGlmIChjZWxsICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGlmIChjZWxsLmRhdGFzZXQuYXV0b2NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0IGVsZW1lbnRzIHdoZXJlIGtleSAvIHZhbHVlIGluIGRpZmZlcmVudCBjb2x1bW5zXG4gICAgICAgICAgICAgICAgdGhpcy5pbXBvcnRzW25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IGNlbGxkYXRhLFxuICAgICAgICAgICAgICAgICAga2V5OiBudWxsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBsZXQgZWwgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoY2VsbHMuZXZlcnkoKHQsIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKHQuZGF0YXNldC5uYW1lID09IHRoY2VsbC5kYXRhc2V0LmF1dG9jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICBlbCA9IGlkeDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGVsICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBlbCA9IGRhdGFzW3Jvd2luZGV4XVtlbF07XG5cbiAgICAgICAgICAgICAgICAgIHRoaXMuaW1wb3J0c1tuYW1lXS5rZXkgPSBlbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2VsbC5kYXRhc2V0LnZhbHVlKSB0aGlzLmltcG9ydHNbbmFtZV0gPSBjZWxsLmRhdGFzZXQudmFsdWU7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBpZiAodGhjZWxscy5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLmJ1dHRvbikge1xuICAgICAgICB0aGlzLnNob3dJbXBvcnQoc2hvd2J0bnMpO1xuICAgICAgICBpZiAoIXRoaXMuYnV0dG9uLmRhdGFzZXQuYWN0aXZhdGVkICYmICh3aGF0ID09PSB0eXBlaW1wb3J0LnRheG8gfHwgd2hhdCA9PT0gdHlwZWltcG9ydC5wcml2aWxlZ2VzKSkgdGhpcy5hY3RpdmF0ZUJ1dHRvbnMod2hhdCwgc2VsZWN0Y2VsbHMpO1xuICAgICAgfSBlbHNlIHRoaXMubWFrZUltcG9ydChudWxsLCBzZWxlY3RjZWxscywgd2hhdCwgdHJ1ZSk7XG4gICAgfVxuICAgIC8vXG5cbiAgfVxuICBtZXNzYWdlWm9uZShpdGVtKSB7XG4gICAgY29uc29sZS5sb2coJ2l0ZW1tZXNzYWdlJywgaXRlbSk7XG4gIH1cbiAgYWN0aXZhdGVCdXR0b25zKHdoYXQsIHNlbGVjdGNlbGxzKSB7XG5cbiAgICB0aGlzLmJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5tYWtlSW1wb3J0KGUuY3VycmVudFRhcmdldCwgc2VsZWN0Y2VsbHMsIHdoYXQsIHRydWUpO1xuXG4gICAgfSk7XG4gICAgdGhpcy5yZXBsYWNlYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLm1ha2VJbXBvcnQoZS5jdXJyZW50VGFyZ2V0LCBzZWxlY3RjZWxscywgd2hhdCwgdHJ1ZSk7XG5cbiAgICB9KTtcblxuICAgIHRoaXMuYnV0dG9uLmRhdGFzZXQuYWN0aXZhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLnJlcGxhY2VidXR0b24uZGF0YXNldC5hY3RpdmF0ZWQgPSB0cnVlO1xuICB9XG5cbiAgZmluZENvbnRhY3QodGRzLCBuYW1lID0gJ2NvbnRhY3QnKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmdyaWRDb2x1bW5JbmRleCgnbmFtZScsIG5hbWUpO1xuICAgIGlmIChpbmRleCA+PSAwKSByZXR1cm4gdGRzW2luZGV4XSA/IHRkc1tpbmRleF0gOiBudWxsO1xuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZW5kZXJQcml2aWxlZ2VzKGltcG9ydHpvbmUsIHJlcGxhY2UgPSBmYWxzZSkge1xuICAgIGxldCBwcml2aWxlZ2VzID0ge307XG4gICAgY29uc3QgdHpvbmUgPSBpbXBvcnR6b25lLnRvbXNlbGVjdDtcblxuICAgIGNvbnN0IHB1c2hwcml2ID0gKG1lbWJlciwgcHJpdikgPT4ge1xuICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICBpZDogbWVtYmVyLmlkLFxuICAgICAgICBuYW1lOiBtZW1iZXIubmFtZSxcbiAgICAgICAgcHJpdjogcHJpdlxuICAgICAgfVxuICAgICAgaWYgKHByaXZpbGVnZXNbcHJpdl0pIHByaXZpbGVnZXNbcHJpdl0ucHVzaChvYmopO1xuICAgICAgZWxzZSBwcml2aWxlZ2VzW3ByaXZdID0gW29ial07XG4gICAgfVxuXG4gICAgaWYgKHR6b25lKSB7XG4gICAgICBjb25zdCBtZW1iZXJzID0gWy4uLnR6b25lLml0ZW1zXTtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0em9uZS5vcHRpb25zKTtcbiAgICAgIG1lbWJlcnMuZm9yRWFjaChtZW1iZXIgPT4ge1xuICAgICAgICBtZW1iZXIgPSBvcHRpb25zW21lbWJlcl07XG4gICAgICAgIGlmIChtZW1iZXIpIHB1c2hwcml2KG1lbWJlciwgbWVtYmVyLm9wdGdyb3VwKTtcblxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgaW1wb3J0em9uZS5vcHRpb25zLmZvckVhY2gobWVtYmVyID0+IHtcbiAgICAgICAgaWYgKG1lbWJlci5zZWxlY3RlZCkgcHVzaHByaXYobWVtYmVyLCBtZW1iZXIuZGF0YXNldC5vcHRncm91cCk7XG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmICh0aGlzLmltcG9ydFByaXZpbGVnZXMocHJpdmlsZWdlcywgcmVwbGFjZSkpIHtcbiAgICAgIGlmICh0em9uZSkge1xuICAgICAgICB0em9uZS5jbGVhcigpO1xuICAgICAgICB0em9uZS5jbGVhck9wdGlvbnMoKTtcbiAgICAgIH0gZWxzZSBpbXBvcnR6b25lLmlubmVySFRNTCA9IGBgO1xuXG4gICAgfVxuXG4gIH1cblxuICBpbXBvcnRQcml2aWxlZ2VzKHByaXZpbGVnZXMsIGNsZWFyID0gZmFsc2UpIHtcbiAgICBjb25zdCBwcm9qZWN0UHJpdmlsZWdlcyA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKCcuJyArIGRvbXNlbGVjdG9ycy5jb21wb25lbnQucHJpdmlsZWdlcy5pZGVudCk7XG5cbiAgICBpZiAocHJvamVjdFByaXZpbGVnZXMgPT09IG51bGwgfHwgIXByb2plY3RQcml2aWxlZ2VzLmpzcHJpdmlsZWdlcykgcmV0dXJuO1xuICAgIGNvbnN0IGltcG9ydGVkdGFnID0gKGlucHV0KSA9PiB7XG4gICAgICB0aGlzLnNldEltcG9ydGVkVGFnKGlucHV0LCBudWxsKTtcbiAgICB9XG4gICAgY29uc3QgZGlzbWlzcyA9ICgpID0+IHtcbiAgICAgIHRoaXMuZGlzbWlzcygpO1xuICAgIH1cbiAgICBjb25zdCBjb250YWN0ID0gKGNsZWFyID09PSB0cnVlICYmIHRoaXMuaW1wb3J0c1ttb2RlbHMuY29udGFjdF0pID8gdGhpcy5pbXBvcnRzW21vZGVscy5jb250YWN0XSA6IG51bGw7XG4gICAgcmV0dXJuIChwcm9qZWN0UHJpdmlsZWdlcy5qc3ByaXZpbGVnZXMuaW1wb3J0UHJpdmlsZWdlcyhwcml2aWxlZ2VzLCBjbGVhciwgY29udGFjdCwgaW1wb3J0ZWR0YWcsIGRpc21pc3MpKTtcbiAgfVxuXG4gIHJlc2V0U2VsZWN0b3JzKCkge1xuICAgIHRoaXMuc2VsZWN0b3JzLmZvckVhY2goKHNlbGVjdG9yLCBpKSA9PiB7XG4gICAgICBpZiAoc2VsZWN0b3IuZGlzYWJsZWQpIHNlbGVjdG9yLmRpc2FibGVkID0gZmFsc2U7XG4gICAgfSk7XG4gICAgdGhpcy5kb20ucXVlcnlTZWxlY3RvckFsbCgndGQuJyArIGNzcy5zZWxlY3RlZCkuZm9yRWFjaCh0ZCA9PiB7XG4gICAgICB0ZC5jbGFzc0xpc3QucmVtb3ZlKGNzcy5zZWxlY3RlZCk7XG4gICAgfSk7XG4gIH1cblxuICBhY3RpdmF0ZUNsZWFyKCkge1xuICAgIGNvbnN0IGNsZWFyYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NsZWFyLScgKyB0aGlzLmltcG9ydGlkKTtcbiAgICBpZiAoIWNsZWFyYnV0dG9uKSByZXR1cm47XG4gICAgY2xlYXJidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmICghdGhpcy5pbXBvcnRjb250YWluZXIpIHJldHVybjtcbiAgICAgIHRoaXMucmVzZXRTZWxlY3RvcnMoKTtcbiAgICAgIHRoaXMuYnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnJlcGxhY2VidXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2hvd0ltcG9ydChmYWxzZSk7XG4gICAgfSk7XG4gIH1cbiAgY3JlYXRlSW1wb3J0em9uZShuYW1lKSB7XG4gICAgdGhpcy5zaG93SW1wb3J0KHRydWUpO1xuICAgIGxldCBpbXBvcnR6b25lID0gdGhpcy5pbXBvcnRjb250YWluZXIucXVlcnlTZWxlY3RvcignIycgKyB0aGlzLmltcG9ydGlkKTtcblxuXG4gICAgaWYgKG5hbWUgPT09IHR5cGVpbXBvcnQucHJpdmlsZWdlcykge1xuICAgICAgaWYgKCFpbXBvcnR6b25lKSB7XG4gICAgICAgIGltcG9ydHpvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgICAgICAgdGhpcy5pbXBvcnRpZCA9IGltcG9ydHpvbmUuaWQgPSB0aGlzLmltcG9ydGlkICsgJy0nICsgbmFtZTtcbiAgICAgICAgaW1wb3J0em9uZS5kYXRhc2V0LnR5cGUgPSBtb2RlbHMudXNlcjtcbiAgICAgICAgaW1wb3J0em9uZS5tdWx0aXBsZSA9IHRydWU7XG4gICAgICAgIGltcG9ydHpvbmUuZGF0YXNldC5wcml2ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbXBvcnRjb250YWluZXIuYXBwZW5kKGltcG9ydHpvbmUpO1xuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGltcG9ydF90YXJnZXQgPSAodGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiJyArIG5hbWUgKyAnXCJdJykpID8gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiJyArIG5hbWUgKyAnXCJdJykgOiB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcignW2RhdGEtaW1wb3J0ZmllbGQ9XCInICsgbmFtZSArICdcIl0nKTtcbiAgICAgIGNvbnN0IHRzID0gaW1wb3J0X3RhcmdldC50b21zZWxlY3Q7XG5cbiAgICAgIGlmICghaW1wb3J0em9uZSkge1xuICAgICAgICBpZiAoIWltcG9ydF90YXJnZXQpIHJldHVybjtcbiAgICAgICAgdGhpcy5pbXBvcnR6b25laWQgPSBpbXBvcnRfdGFyZ2V0LmlkO1xuICAgICAgICAvLyB0b21zZWxlY3QgP1xuICAgICAgICBpbXBvcnR6b25lID0gaW1wb3J0X3RhcmdldC5jbG9uZU5vZGUoKTtcbiAgICAgICAgaW1wb3J0em9uZS5jbGFzc0xpc3QucmVtb3ZlKCd0b21zZWxlY3RlZCcpO1xuICAgICAgICBpbXBvcnR6b25lLmNsYXNzTGlzdC5yZW1vdmUoJ3RzLWhpZGRlbi1hY2Nlc3NpYmxlJyk7XG4gICAgICAgIC8vIGtlZXAgb3JpZ2luYWwgaWQgdG8gcmVwbGFjZSBkYXRhIG9uIGFwcGx5IGltcG9ydFxuICAgICAgICBpbXBvcnR6b25lLmRhdGFzZXQub3JpZ2luID0gaW1wb3J0em9uZS5pZDtcbiAgICAgICAgaW1wb3J0em9uZS5pZCA9IHRoaXMuaW1wb3J0aWQ7XG4gICAgICAgIGltcG9ydHpvbmUubmFtZSA9IHRoaXMuaW1wb3J0aWQgKyAnXycgKyBpbXBvcnR6b25lLm5hbWU7XG4gICAgICAgIHRoaXMuaW1wb3J0Y29udGFpbmVyLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGltcG9ydHpvbmUub3V0ZXJIVE1MKTtcbiAgICAgICAgaWYgKHRzKSB7XG4gICAgICAgICAgaW1wb3J0em9uZSA9IHRoaXMuaW1wb3J0Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyMnICsgdGhpcy5pbXBvcnRpZCk7XG4gICAgICAgICAgY29uc3QganNUb21TZWxlY3QgPSBuZXcgSnNUb21TZWxlY3QoKTtcbiAgICAgICAgICBqc1RvbVNlbGVjdC5hcHBseVRvKGltcG9ydHpvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZhdGVDbGVhcigpO1xuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGltcG9ydHpvbmU7XG5cbiAgfVxuXG4gIG1ha2VJbXBvcnQoYnRuLCBzZWxlY3RjZWxscywgd2hhdCwgY2xvc2UgPSBmYWxzZSkge1xuICAgIGxldCBkb25lID0gdHJ1ZSxcbiAgICAgIHRzID0gbnVsbDtcbiAgICBjb25zdCBpbXBvcnR6b25lID0gKHRoaXMuaW1wb3J0Y29udGFpbmVyKSA/IHRoaXMuaW1wb3J0Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyMnICsgdGhpcy5pbXBvcnRpZCkgOiBudWxsO1xuXG4gICAgc3dpdGNoICh3aGF0KSB7XG4gICAgICBjYXNlIHR5cGVpbXBvcnQudGF4bzpcblxuICAgICAgICBpZiAoIWltcG9ydHpvbmUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgaW1wb3J0X3RhcmdldCA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKCcjJyArIGltcG9ydHpvbmUuZGF0YXNldC5vcmlnaW4pO1xuXG4gICAgICAgIGlmICghaW1wb3J0X3RhcmdldCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0cyA9IGltcG9ydF90YXJnZXQudG9tc2VsZWN0O1xuICAgICAgICBpZiAodHMpIHtcbiAgICAgICAgICAvLyBvbmx5IGlmIHJlcGxhY2Ugc3BlY2lmaWVkXG4gICAgICAgICAgaWYgKGJ0bi5kYXRhc2V0LnJlcGxhY2UgJiYgYnRuLmRhdGFzZXQucmVwbGFjZSA9PT0gJ3JlcGxhY2UnKSB7XG4gICAgICAgICAgICB0cy5jbGVhcigpO1xuICAgICAgICAgICAgdHMuY2xlYXJPcHRpb25zKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgdHpvbmUgPSBpbXBvcnR6b25lLnRvbXNlbGVjdDtcbiAgICAgICAgICBjb25zdCBpdGVtcyA9IFsuLi50em9uZS5pdGVtc107XG4gICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHR6b25lLm9wdGlvbnMpO1xuICAgICAgICAgIGl0ZW1zLmZvckVhY2goKGUsIGkpID0+IHtcbiAgICAgICAgICAgIGxldCBlbCA9IHt9O1xuICAgICAgICAgICAgZWxbdHMuc2V0dGluZ3MudmFsdWVGaWVsZF0gPSBlO1xuICAgICAgICAgICAgZWxbdHMuc2V0dGluZ3Muc2VhcmNoRmllbGRdID0gdW5lc2NhcGVfaHRtbChvcHRpb25zW2VdW3RzLnNldHRpbmdzLnNlYXJjaEZpZWxkXSk7XG4gICAgICAgICAgICBpZiAoIXRzLmdldE9wdGlvbihlKSkgdHMuYWRkT3B0aW9uKGVsKTtcbiAgICAgICAgICAgIHRzLmFkZEl0ZW0oZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdHpvbmUuY2xlYXIoKTtcbiAgICAgICAgICB0em9uZS5jbGVhck9wdGlvbnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYnRuLmRhdGFzZXQucmVwbGFjZSAmJiBidG4uZGF0YXNldC5yZXBsYWNlID09PSAncmVwbGFjZScpIGltcG9ydF90YXJnZXQuaW5uZXJIVE1MID0gYGA7XG4gICAgICAgICAgaW1wb3J0X3RhcmdldC5pbm5lckhUTUwgPSBET01QdXJpZnkuc2FuaXRpemUoaW1wb3J0em9uZS5pbm5lckhUTUwpO1xuICAgICAgICAgIGltcG9ydHpvbmUuaW5uZXJIVE1MID0gYGA7XG4gICAgICAgIH1cbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0eXBlaW1wb3J0LnByaXZpbGVnZXM6XG4gICAgICAgIGlmICghaW1wb3J0em9uZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBkb25lID0gdGhpcy5yZW5kZXJQcml2aWxlZ2VzKGltcG9ydHpvbmUsIChidG4uZGF0YXNldC5yZXBsYWNlICYmIGJ0bi5kYXRhc2V0LnJlcGxhY2UgPT09ICdyZXBsYWNlJykpO1xuICAgICAgICBpZiAoaW1wb3J0em9uZS5jdXJyZW50bGlzdCkgaW1wb3J0em9uZS5jdXJyZW50bGlzdCA9IHt9O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnN0IHRzX2FkZF9zZWxlY3RfaXRlbSA9IGZ1bmN0aW9uKHRzLCBkYXRhKSB7XG4gICAgICAgICAgY29uc3QgZWwgPSB7fTtcbiAgICAgICAgICBpZiAodHlwZW9mKGRhdGEpID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBlbFt0cy5zZXR0aW5ncy5sYWJlbEZpZWxkXSA9IGRhdGE7XG4gICAgICAgICAgICBlbFt0cy5zZXR0aW5ncy52YWx1ZUZpZWxkXSA9IGRhdGE7XG4gICAgICAgICAgICBlbFt0cy5zZXR0aW5ncy5zZWFyY2hGaWVsZF0gPSB1bmVzY2FwZV9odG1sKGRhdGEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbFt0cy5zZXR0aW5ncy5sYWJlbEZpZWxkXSA9IGRhdGEua2V5O1xuICAgICAgICAgICAgZWxbdHMuc2V0dGluZ3MudmFsdWVGaWVsZF0gPSBkYXRhLmtleTtcbiAgICAgICAgICAgIGVsW3RzLnNldHRpbmdzLnNlYXJjaEZpZWxkXSA9IHVuZXNjYXBlX2h0bWwoZGF0YS52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdHMuZ2V0T3B0aW9uKGVsW3RzLnNldHRpbmdzLnZhbHVlRmllbGRdKSkgdHMuYWRkT3B0aW9uKGVsKTtcbiAgICAgICAgICBpZiAoIXRzLmdldEl0ZW0oZWxbdHMuc2V0dGluZ3MudmFsdWVGaWVsZF0pKSB0cy5hZGRJdGVtKGVsW3RzLnNldHRpbmdzLnZhbHVlRmllbGRdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZGRfc2VsZWN0X29wdGlvbiA9IGZ1bmN0aW9uKGlucHV0LCBkYXRhKSB7XG4gICAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgaWYgKHR5cGVvZihkYXRhKSA9PT0gJ3N0cmluZycpIG9wdGlvbi52YWx1ZSA9IG9wdGlvbi50ZXh0ID0gZGF0YTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IGRhdGEua2V5O1xuICAgICAgICAgICAgb3B0aW9uLnRleHQgPSBkYXRhLnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIGlucHV0LmFwcGVuZChvcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFkZF9pbnB1dF9vcHRpb24gPSBmdW5jdGlvbihpbnB1dCwgZGF0YSkge1xuICAgICAgICAgIGlmIChpbnB1dC5tdWx0aXBsZSkge1xuICAgICAgICAgICAgbGV0IHZhbHVlcyA9IGlucHV0LnZhbHVlLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChkYXRhLmtleSk7XG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9IHZhbHVlcy5qb2luKCcsJyk7XG4gICAgICAgICAgfSBlbHNlIGlucHV0LnZhbHVlID0gZGF0YTtcblxuICAgICAgICB9XG4gICAgICAgIHNlbGVjdGNlbGxzLmZvckVhY2goKG5hbWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgbGV0IGlucHV0ID0gKCh0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcignW2RhdGEtaW1wb3J0ZmllbGQ9XCInICsgbmFtZSArICdcIl0nKSkgPyB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcignW2RhdGEtaW1wb3J0ZmllbGQ9XCInICsgbmFtZSArICdcIl0nKSA6IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cIicgKyBuYW1lICsgJ1wiXScpKTtcbiAgICAgICAgICBpZiAoaW5wdXQgJiYgaW5wdXQuZGF0YXNldC5ub2ltcG9ydCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChpbnB1dCAmJiB0aGlzLmltcG9ydHNbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IChpbnB1dC50eXBlKSA/IGlucHV0LnR5cGUgOiBpbnB1dC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB0cyA9IGlucHV0LnRvbXNlbGVjdDtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaW5pdF9jbGFzc2lmX2xpc3QnKSB7XG4gICAgICAgICAgICAgIGxldCBpZHMgPSB0aGlzLmltcG9ydHNbbmFtZV07XG4gICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGlkcykpIGlkcyA9IGlkcy5qb2luKCcsJyk7XG4gICAgICAgICAgICAgIGVsc2UgaWRzID0gaWRzLnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKS5yZXBsYWNlQWxsKCcgJywgJycpO1xuICAgICAgICAgICAgICBpZiAodHMpIHtcbiAgICAgICAgICAgICAgICB0cy53cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3dhaXQtZm9yLXJlc3VsdHMnKTtcbiAgICAgICAgICAgICAgICB0cy5jbGVhcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgdHMuY2xlYXJPcHRpb25zKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGlkcyAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBpZiAodHMpIHRzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCgnd2FpdC1mb3ItcmVzdWx0cycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdpZGxpc3QnLCBpZHMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9ICcvc2VhcmNoL3RheG9yZXNvbHZlJyAvLysgbmV3IFVSTFNlYXJjaFBhcmFtcyh7J2lkbGlzdCc6IGlkc30pO1xuICAgICAgICAgICAgICAgIGZldGNoKHVybCwgZmV0Y2hTZXR0aW5ncyh7XG4gICAgICAgICAgICAgICAgICAnbWV0aG9kJzogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgJ2JvZHknOiBmb3JtRGF0YVxuICAgICAgICAgICAgICAgIH0pKS50aGVuKHJlc3BvbnNlID0+XG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5qc29uKClcbiAgICAgICAgICAgICAgICApLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCB0cyA9IGlucHV0LnRvbXNlbGVjdDtcbiAgICAgICAgICAgICAgICAgIGlmICh0cykge1xuXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHJlc3VsdHMpLmZvckVhY2goKFtrZXksIHRleHRdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IERPTVB1cmlmeS5zYW5pdGl6ZShrZXkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IERPTVB1cmlmeS5zYW5pdGl6ZSh0ZXh0KVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB0c19hZGRfc2VsZWN0X2l0ZW0odHMsIGVsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRzLndyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnd2FpdC1mb3ItcmVzdWx0cycpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ3NlbGVjdCcpID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5wdXQucXVlcnlTZWxlY3RvckFsbCgnb3B0aW9uJykuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHJlc3VsdHMpLmZvckVhY2goKFtrZXksIHRleHRdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IERPTVB1cmlmeS5zYW5pdGl6ZShrZXkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IERPTVB1cmlmeS5zYW5pdGl6ZSh0ZXh0KVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBhZGRfaW5wdXRfb3B0aW9uKGlucHV0LCBlbCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhyZXN1bHRzKS5mb3JFYWNoKChba2V5LCB0ZXh0XSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBET01QdXJpZnkuc2FuaXRpemUoa2V5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBET01QdXJpZnkuc2FuaXRpemUodGV4dClcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgYWRkX3NlbGVjdF9vcHRpb24oaW5wdXQsIGVsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB0aGlzLnNldEltcG9ydGVkVGFnKGlucHV0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0cykge1xuICAgICAgICAgICAgICB0c19hZGRfc2VsZWN0X2l0ZW0odHMsIHRoaXMuaW1wb3J0c1tuYW1lXSk7XG4gICAgICAgICAgICAgIHRoaXMuc2V0SW1wb3J0ZWRUYWcoaW5wdXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAncmFkaW8nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICAgICAgICAgIGlucHV0ID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiJyArIG5hbWUgKyAnXCJdW3ZhbHVlPVwiJyArIHRoaXMuaW1wb3J0c1tuYW1lXSArICdcIl0nKTtcbiAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCkgaW5wdXQuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICAgICAgICAgICAgaWYgKGlucHV0Lm11bHRpcGxlKSB0aGlzLmltcG9ydHNbbmFtZV0uZm9yRWFjaChkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkX3NlbGVjdF9vcHRpb24oaW5wdXQsIGRhdGEpXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGVsc2UgYWRkX3NlbGVjdF9vcHRpb24oaW5wdXQsIHRoaXMuaW1wb3J0c1tuYW1lXSk7XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IHRoaXMuaW1wb3J0c1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuc2V0SW1wb3J0ZWRUYWcoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdoYXQgIT09IHR5cGVpbXBvcnQuc2V0dGluZ3MpIGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICBkb25lID0gZG9uZSAmJiB0cnVlO1xuICAgICAgICAgICAgLy8gc2V0IGltcG9ydGVkIHRhZyB0byBmaWVsZGJveFxuXG5cbiAgICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09IHR5cGVpbXBvcnQucHJpdmlsZWdlcykge1xuICAgICAgICAgICAgLy9jb25zdCBjbGVhcnByaXZpbGVnZXMgPSAod2hhdCA9PT0gdHlwZWltcG9ydC5zZXR0aW5ncyk7XG4gICAgICAgICAgICBjb25zdCBjbGVhcnByaXZpbGVnZXMgPSBmYWxzZTtcbiAgICAgICAgICAgIGRvbmUgPSBkb25lICYmIHRoaXMuaW1wb3J0UHJpdmlsZWdlcyh0aGlzLmltcG9ydHNbbmFtZV0sIGNsZWFycHJpdmlsZWdlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChkb25lID09PSB0cnVlICYmIGNsb3NlID09IHRydWUpIHtcbiAgICAgIHRoaXMuZGlzbWlzcygpO1xuICAgICAgaWYgKHRoaXMuZm9ybSkgdGhpcy5mb3JtLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCd2YWxpZGF0ZScpKTtcbiAgICB9XG4gIH1cblxuICBzZXRJbXBvcnRlZFRhZyhpbnB1dCwgc2VsZWN0b3IgPSBkb21zZWxlY3RvcnMuY29tcG9uZW50LmZvcm0uZm9ybWJveCkge1xuICAgIGxldCBlbCA9IChzZWxlY3RvciA9PT0gbnVsbCkgPyBpbnB1dCA6IChpbnB1dC5jbG9zZXN0KHNlbGVjdG9yKSA/IGlucHV0LmNsb3Nlc3Qoc2VsZWN0b3IpIDogaW5wdXQuY2xvc2VzdCgnZmllbGRzZXQnKSk7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuICAgIGNvbnN0IHJlbW92ZXRhZyA9IChlKSA9PiB7XG4gICAgICBkZWxldGUgZWwuZGF0YXNldC5pc2ltcG9ydGVkO1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjc3MuaW1wb3J0ZWQpO1xuICAgICAgaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgcmVtb3ZldGFnKTtcbiAgICB9XG4gICAgZWwuZGF0YXNldC5pc2ltcG9ydGVkID0gdGhpcy5mb3JtLmRhdGFzZXQuaXNpbXBvcnRlZDtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGNzcy5pbXBvcnRlZCk7XG4gICAgaWYgKGlucHV0LmRhdGFzZXQudW5pcXVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlucHV0LmRhdGFzZXQudW5pcXVlID0gaW5wdXQudmFsdWU7XG4gICAgfVxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCByZW1vdmV0YWcpO1xuICAgIH0sIDUwMCk7XG4gIH1cblxuICBkaXNtaXNzKGNsZWFyID0gZmFsc2UpIHtcbiAgICBpZiAodGhpcy5idXR0b24pIHRoaXMuc2hvd0ltcG9ydChmYWxzZSk7XG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5kb20uY2xvc2VzdCgnZGV0YWlscycpO1xuICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgIGNvbnRhaW5lci5vcGVuID0gZmFsc2U7XG4gICAgICBpZiAoY2xlYXIgPT09IHRydWUpIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKHRoaXMuY29udGVudF9zZWxlY3RvcikuaW5uZXJIVE1MID0gYGA7XG4gICAgfVxuXG4gIH1cbiAgaW5kZXhUb0NoZWNrKCkge1xuICAgIC8vIGluZGV4IG9mIGNlbGxzIHRvIGNoZWNrIGlmIGVtcHR5IGFuZCBkaXNhYmxlIHJvdyAgaW1wb3J0IGJ0blxuICAgIGNvbnN0IGdyaWQgPSAodGhpcy50YmwpID8gdGhpcy50YmwuZ3JpZCA6IG51bGw7XG4gICAgaWYgKCFncmlkKSByZXR1cm4gWzBdO1xuICAgIGxldCBpbmRleCA9IGdyaWQuY29sdW1ucy5maW5kSW5kZXgoY29sdW1uID0+IChjb2x1bW4ud2hhdCAmJiBjb2x1bW4ud2hhdCA9PT0gdHlwZWltcG9ydC50YXhvKSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIFswXTtcbiAgICBjb25zdCBwYXJ0cyA9IChncmlkLmNvbHVtbnNbaW5kZXhdLnBhcnRzKSA/IGdyaWQuY29sdW1uc1tpbmRleF0ucGFydHMgOiBudWxsO1xuICAgIGlmIChwYXJ0cykge1xuICAgICAgY29uc3QgaW5kZXh0b2NoZWNrID0gZ3JpZC5jb2x1bW5zLmZpbHRlcigoY29sdW1uLCBpKSA9PiB7XG4gICAgICAgIGlmIChwYXJ0cy5pbmRleE9mKGNvbHVtbi5uYW1lKSA+PSAwKSByZXR1cm4gaTtcbiAgICAgIH0pLm1hcCh2ID0+IHtcbiAgICAgICAgcmV0dXJuIHYuaW5kZXg7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbmRleHRvY2hlY2s7XG4gICAgfVxuXG4gIH1cbiAgYWRkUmVzZXRCdXR0b24oKSB7XG4gICAgaWYgKCF0aGlzLnRibCB8fCAhdGhpcy50YmwucGFyYW1zLmhhc093blByb3BlcnR5KFwicmVzZXRcIikpIHJldHVybjtcbiAgICBsZXQgcmVzZXRidG4gPSB0aGlzLmRvbS5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoZG9tc2VsZWN0b3JzLnJlc2V0YnV0dG9uKTtcbiAgICBpZiAocmVzZXRidG4gPT09IG51bGwpIHtcbiAgICAgIHJlc2V0YnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgcmVzZXRidG4uY2xhc3NMaXN0LmFkZChkb21zZWxlY3RvcnMucmVzZXRidXR0b24uc3Vic3RyKDEpKTtcbiAgICAgIHJlc2V0YnRuLnRleHRDb250ZW50ID0gdGhpcy50YmwucGFyYW1zLnJlc2V0O1xuICAgICAgdGhpcy5kb20ucGFyZW50RWxlbWVudC5maXJzdENoaWxkLnByZXBlbmQocmVzZXRidG4pO1xuICAgIH1cbiAgICByZXNldGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgY29uc3Qgc2VsZWN0b3JzID0gdGhpcy5zZWxlY3RvcnMgPSB0aGlzLmRvbS5xdWVyeVNlbGVjdG9yQWxsKCdbJyArIHRoaXMuc2VsZWN0b3IgKyAnXSBidXR0b246ZGlzYWJsZWQsIFsnICsgdGhpcy5zZWxlY3RvciArICddIGlucHV0OmRpc2FibGVkJyk7XG4gICAgICBzZWxlY3RvcnMuZm9yRWFjaChzZWxlY3RvciA9PiB7XG4gICAgICAgIHNlbGVjdG9yLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHNlbCA9IHNlbGVjdG9yLmNsb3Nlc3QoJ3RyJykucXVlcnlTZWxlY3RvcignLicgKyBjc3Muc2VsZWN0ZWQpO1xuICAgICAgICBjb25zb2xlLmxvZygnc2VsJyArIGNzcy5zZWxlY3RlZCwgc2VsKVxuICAgICAgICBpZiAoc2VsKSBzZWwuY2xhc3NMaXN0LnJlbW92ZShjc3Muc2VsZWN0ZWQpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgfVxuICAvLyBzaG93IC8gaGlkZSBpbXBvcnR6b25lIGFuZCBidXR0b25zXG4gIHNob3dJbXBvcnQoc2hvdykge1xuICAgIGlmICghdGhpcy5idXR0b24pIHJldHVybjtcblxuICAgIGlmIChzaG93ID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5idXR0b24uY2xhc3NMaXN0LmFkZChjc3MuaGlkZSk7XG4gICAgICB0aGlzLnJlcGxhY2VidXR0b24uY2xhc3NMaXN0LmFkZChjc3MuaGlkZSk7XG4gICAgICB0aGlzLmltcG9ydGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKGNzcy5oaWRlKTtcbiAgICAgIHRoaXMudGFiYnV0dG9uLmNsYXNzTGlzdC5hZGQoY3NzLmhpZGUpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoY3NzLmhpZGUpO1xuICAgICAgdGhpcy5yZXBsYWNlYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoY3NzLmhpZGUpO1xuXG4gICAgICB0aGlzLmltcG9ydGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKGNzcy5oaWRlKTtcbiAgICAgIHRoaXMuYnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICBjb25zdCBpbXBvcnR6b25lID0gdGhpcy5pbXBvcnRjb250YWluZXIucXVlcnlTZWxlY3RvcignIycgKyB0aGlzLmltcG9ydGlkKTtcbiAgICAgIGlmIChpbXBvcnR6b25lKSB7XG4gICAgICAgIHRoaXMudGFiYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoY3NzLmhpZGUpO1xuICAgICAgICBpZiAoaW1wb3J0em9uZS50b21zZWxlY3QgJiYgaW1wb3J0em9uZS50b21zZWxlY3QuY29udHJvbC5vZmZzZXRIZWlnaHQgPCBpbXBvcnR6b25lLnRvbXNlbGVjdC5jb250cm9sLnNjcm9sbEhlaWdodCkge1xuICAgICAgICAgIHRoaXMudGFiYnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB0aGlzLnRhYmJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIHJlc2l6ZSBpbXBvcnR6b25lXG4gIHJlc2l6ZVpvbmUoZSkge1xuICAgIGNvbnN0IGRpdiA9IHRoaXMuaW1wb3J0Y29udGFpbmVyLmNsb3Nlc3QoZG9tc2VsZWN0b3JzLmNvbXBvbmVudC5pbXBvcnQuem9uZWltcG9ydCk7XG4gICAgaWYgKCFkaXYpIHJldHVybjtcbiAgICBkaXYucGFyZW50RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKGNzcy5zaG93ZnVsbCk7XG4gICAgY29uc3QgaWNvbiA9IGUuY3VycmVudFRhcmdldC5xdWVyeVNlbGVjdG9yKCdpJyk7XG4gICAgaWYgKGljb24pIHtcbiAgICAgIGljb24uY2xhc3NMaXN0LnRvZ2dsZSgnaWNvbi1hcnJvdy1wb2ludGluZy1vdXQnKTtcbiAgICAgIGljb24uY2xhc3NMaXN0LnRvZ2dsZSgnaWNvbi1hcnJvdy1wb2ludGluZy1pbicpO1xuICAgIH1cbiAgfVxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/modules/data-import.js\n")}}]);
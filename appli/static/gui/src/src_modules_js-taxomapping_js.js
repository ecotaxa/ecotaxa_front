/*! For license information please see src_modules_js-taxomapping_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_js-taxomapping_js"],{"./src/modules/js-taxomapping.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TaxoMapping: () => (/* binding */ TaxoMapping)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.es.mjs\");\n\nconst css = {\n  line: 'taxoline',\n  mapline: 'mapping-line',\n  cancel: 'cancel-line',\n};\nclass TaxoMapping {\n  // animation and specific display on accordions list / details tag open\n  numlines = 0;\n\n  constructor(line) {\n    if (!line || !(line instanceof HTMLElement)) return;\n    if (!line.taxomapping) {\n      const keepname = (line.dataset.name) ? line.dataset.name : null;\n      if (keepname === null) return null;\n      this.keepname = keepname;\n      this.init(line);\n      line.taxomapping = this;\n\n    }\n    return line.taxomapping;\n  }\n\n  init(line) {\n    if (line.dataset.addline) {\n      let controls = {};\n      ['select', 'replace'].forEach(selector => {\n        controls[selector] = line.querySelector('[data-role=\"' + selector + '\"]');\n      });\n      this.linecontrols = controls;\n      controls = null;\n      let btn = line.querySelector('.' + line.dataset.addline);\n      btn = (btn === null) ? this.createBtn(line) : btn;\n      btn.addEventListener('click', (e) => {\n        this.addLine(line);\n      });\n      this.btn = btn;\n    }\n    // adjust historyback\n    window.addEventListener(\"pageshow\", (e) => {\n      const historytraversal = event.persisted ||\n        (typeof window.performance != \"undefined\" &&\n          window.performance.navigation.type === 2);\n      if (historytraversal) {\n        this.beforeSubmit(line);\n      }\n    });\n    this.beforeSubmit(line);\n  }\n\n  createBtn(line) {\n    const btn = document.createElement('div');\n    btn.classList.add(line.dataset.addline);\n    btn.insertAdjacentHTML('afterbegin', `<i class=\"icon icon-plus-sm block mx-auto\"></i>`);\n    btn.textContent = (line.dataset.addtext) ? (0,dompurify__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(line.dataset.addtext).sanitize() : 'Add';\n    line.append(btn);\n    return btn;\n  }\n\n  addLine(line) {\n    // verify values not \"\" for select and replace inputs\n    let cando = true;\n    Object.values(this.linecontrols).forEach(input => {\n      const inputvalue = (input.tomselect) ? ((input.tomselect.items.length) ? input.tomselect.items[0] : '') : new String(input.value);\n      cando = cando && (inputvalue.length > 0);\n    });\n    if (cando === false) {\n      this.btn.dataset.title = (line.dataset.notselected) ? line.dataset.notselected : 'select values to replace';\n      return;\n    } else if (this.btn.dataset.title) delete this.btn.dataset.title;\n    const newline = document.createElement('div');\n    newline.classList.add(css.line);\n    newline.classList.add('pb-2');\n    this.numlines++;\n    Object.values(this.linecontrols).forEach(input => {\n      const keep = document.createElement('div');\n      keep.classList.add(css.mapline);\n      keep.classList.add('mr-2');\n      const role = input.dataset.role;\n      if (input.tomselect) {\n        const replaceline = input.nextElementSibling;\n        const tsinput = replaceline.querySelector('.ts-control > div');\n        keep.dataset.value = input.value;\n        keep.textContent = tsinput.textContent;\n        keep.dataset[role] = this.numlines;\n        input.tomselect.clear(true);\n      } else if (input.tagName.toLowerCase() === \"select\") {\n        keep.dataset.value = input.options[input.selectedIndex].value;\n        keep.textContent = input.options[input.selectedIndex].text;\n        newline.dataset.index = input.selectedIndex;\n        keep.dataset[role] = this.numlines;\n        input.options[input.selectedIndex].disabled = true;\n        input.selectedIndex = -1;\n      }\n      input.parentElement.insertBefore(keep, input);\n      newline.append(keep);\n    });\n\n    this.btnCancel(newline, (line.dataset.cancel) ? line.dataset.cancel : 'cancel');\n    line.parentElement.insertBefore(newline, line);\n  }\n\n  btnCancel(item, text) {\n    const cancel = document.createElement('div');\n    cancel.id = 'cancel_' + this.numlines;\n    cancel.classList.add(css.cancel);\n    ['action', 'name'].forEach(data => {\n      delete cancel.dataset[data];\n    });\n    item.append(cancel);\n    cancel.insertAdjacentHTML('afterbegin', `<i class=\"icon icon-x-mark absolute centered\"></i>`);\n    cancel.addEventListener('click', (e) => {\n      if (this.linecontrols.select.options) this.linecontrols.select.options[item.dataset.index].disabled = false;\n      item.remove();\n    });\n  }\n\n  beforeSubmit(item) {\n    const form = item.closest('form');\n    if (form === null) return;\n    const format_mapping_field = () => {\n    if (this.numlines===0 && this.btn) this.btn.click();\n      let keephidden = form.querySelector('input[name=\"' + this.keepname + '\"]');\n      if (keephidden !== null) keephidden.remove();\n      keephidden = document.createElement('input');\n      keephidden.type = 'hidden';\n      keephidden.name = this.keepname;\n      let mapping = {};\n      form.querySelectorAll('[data-select]').forEach(el => {\n      if (el.value!==\"\") {\n        const replace = el.parentElement.querySelector('[data-replace=\"' + el.dataset.select + '\"]');\n        if (replace !== null) mapping[el.dataset.value] = replace.dataset.value;}\n      });\n      form.append(keephidden);\n      keephidden.value = JSON.stringify(mapping);\n      return true;\n    };\n    if (form.formsubmit) {\n      form.formsubmit.addHandler('submit', format_mapping_field);\n\n    } else form.addEventListener('submit', (e) => {\n       format_mapping_field();\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/js-taxomapping.js\n")}}]);
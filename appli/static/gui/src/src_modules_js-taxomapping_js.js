/*! For license information please see src_modules_js-taxomapping_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_js-taxomapping_js"],{"./src/modules/js-taxomapping.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TaxoMapping: () => (/* binding */ TaxoMapping)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n//from css tricks\n// used in tables about project stats details\n// used in tables imports when cells contains lots of data\n// apply mostly to details tags\n\nconst css = {\n  line: 'taxoline',\n  mapline: 'mapping-line',\n  cancel: 'cancel-line',\n};\nclass TaxoMapping {\n  // animation and specific display on accordions list / details tag open\n  numlines = 0;\n\n  constructor(line) {\n    if (!line instanceof HTMLElement) return;\n    if (!line.taxomapping) {\n      const keepname = (line.dataset.name) ? line.dataset.name : null;\n      if (keepname === null) return null;\n      this.keepname = keepname;\n      this.init(line);\n      line.taxomapping = this;\n\n    }\n    return line.taxomapping;\n  }\n\n\n  init(line) {\n    if (line.dataset.addline) {\n      let controls = {};\n      ['select', 'replace'].forEach(selector => {\n        controls[selector] = line.querySelector('[name=\"item-' + selector + '\"]');\n      });\n      this.linecontrols = controls;\n      controls = null;\n      let btn = line.querySelector('.' + line.dataset.addline);\n      btn = (btn === null) ? this.createBtn(line) : btn;\n      btn.addEventListener('click', (e) => {\n        this.addLine(line);\n      });\n      this.btn = btn;\n    }\n    this.beforeSubmit(line);\n  }\n  createBtn(line) {\n    const btn = document.createElement('div');\n    btn.classList.add(line.dataset.addline);\n    btn.insertAdjacentHTML('afterbegin', `<i class=\"icon icon-plus-sm block mx-auto\"></i>`);\n    btn.textContent = (line.dataset.addtext) ? dompurify__WEBPACK_IMPORTED_MODULE_0___default()(line.dataset.addtext).sanitize() : 'Add';\n    line.append(btn);\n    return btn;\n  }\n  addLine(line) {\n\n    // verify values not \"\" for select and replace inputs\n    let cando = true;\n    Object.values(this.linecontrols).forEach(input => {\n      const inputvalue = (input.tomselect) ? input.tomselect.items : new String(input.value);\n\n      cando = cando && (inputvalue.length > 0);\n    });\n    if (cando === false) {\n      this.btn.dataset.title = (line.dataset.notselected) ? line.dataset.notselected : 'select values to replace';\n      return;\n    } else if (this.btn.dataset.title) delete this.btn.dataset.title;\n    const newline = document.createElement('div');\n    newline.classList.add(css.line);\n    newline.classList.add('pb-2');\n    this.numlines++;\n\n    Object.values(this.linecontrols).forEach(input => {\n      const keep = document.createElement('div');\n      keep.classList.add(css.mapline);\n      keep.classList.add('mr-2');\n      if (input.tomselect) {\n        const tsinput = line.querySelector('.ts-control > div');\n        keep.dataset.value = input.value;\n        keep.textContent = tsinput.textContent;\n        keep.dataset.replace = this.numlines;\n        input.tomselect.clear(true);\n      } else {\n        keep.dataset.value = input.options[input.selectedIndex].value;\n        keep.textContent = input.options[input.selectedIndex].text;\n        newline.dataset.index = input.selectedIndex;\n        keep.dataset.select = this.numlines;\n        input.options[input.selectedIndex].disabled = true;\n        input.selectedIndex = -1;\n      }\n      input.parentElement.insertBefore(keep, input);\n      newline.append(keep);\n    });\n    this.btnCancel(newline, (line.dataset.cancel) ? line.dataset.cancel : 'cancel');\n    line.parentElement.insertBefore(newline, line);\n  }\n\n  btnCancel(item, text) {\n    const cancel = document.createElement('div');\n    cancel.id = 'cancel_' + this.numlines;\n    cancel.classList.add(css.cancel);\n    ['action', 'name'].forEach(data => {\n      delete cancel.dataset[data];\n    });\n    item.append(cancel);\n    cancel.insertAdjacentHTML('afterbegin', `<i class=\"icon icon-cancel absolute centered\"></i>`);\n    cancel.addEventListener('click', (e) => {\n      this.linecontrols.select.options[item.dataset.index].disabled = false;\n      item.remove();\n    });\n  }\n\n  beforeSubmit(item) {\n    const form = item.closest('form');\n    if (form === null) return;\n    const format_mapping_field = () => {\n      let keephidden = form.querySelector('input[name=\"' + this.keepname + '\"]');\n      if (keephidden !== null) keephidden.remove();\n      keephidden = document.createElement('input');\n      keephidden.type = 'hidden';\n      keephidden.name = this.keepname;\n      let mapping = {};\n      form.querySelectorAll('[data-select]').forEach(el => {\n        const replace = el.parentElement.querySelector('[data-replace=\"' + el.dataset.select + '\"]');\n        if (replace !== null) mapping[el.dataset.value] = replace.dataset.value;\n      });\n      form.append(keephidden);\n      keephidden.value = JSON.stringify(mapping);\n      return true;\n    };\n\n    if (form.formsubmit) {\n      form.formsubmit.addHandler(format_mapping_field);\n\n    } else form.addEventListener('submit', (e) => {\n      format_mapping_field();\n\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9qcy10YXhvbWFwcGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLGdEQUFTO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsTUFBTTtBQUNOOztBQUVBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvanMtdGF4b21hcHBpbmcuanM/YmE1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvL2Zyb20gY3NzIHRyaWNrc1xuLy8gdXNlZCBpbiB0YWJsZXMgYWJvdXQgcHJvamVjdCBzdGF0cyBkZXRhaWxzXG4vLyB1c2VkIGluIHRhYmxlcyBpbXBvcnRzIHdoZW4gY2VsbHMgY29udGFpbnMgbG90cyBvZiBkYXRhXG4vLyBhcHBseSBtb3N0bHkgdG8gZGV0YWlscyB0YWdzXG5pbXBvcnQgRE9NUHVyaWZ5IGZyb20gJ2RvbXB1cmlmeSc7XG5jb25zdCBjc3MgPSB7XG4gIGxpbmU6ICd0YXhvbGluZScsXG4gIG1hcGxpbmU6ICdtYXBwaW5nLWxpbmUnLFxuICBjYW5jZWw6ICdjYW5jZWwtbGluZScsXG59O1xuZXhwb3J0IGNsYXNzIFRheG9NYXBwaW5nIHtcbiAgLy8gYW5pbWF0aW9uIGFuZCBzcGVjaWZpYyBkaXNwbGF5IG9uIGFjY29yZGlvbnMgbGlzdCAvIGRldGFpbHMgdGFnIG9wZW5cbiAgbnVtbGluZXMgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKGxpbmUpIHtcbiAgICBpZiAoIWxpbmUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgcmV0dXJuO1xuICAgIGlmICghbGluZS50YXhvbWFwcGluZykge1xuICAgICAgY29uc3Qga2VlcG5hbWUgPSAobGluZS5kYXRhc2V0Lm5hbWUpID8gbGluZS5kYXRhc2V0Lm5hbWUgOiBudWxsO1xuICAgICAgaWYgKGtlZXBuYW1lID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgIHRoaXMua2VlcG5hbWUgPSBrZWVwbmFtZTtcbiAgICAgIHRoaXMuaW5pdChsaW5lKTtcbiAgICAgIGxpbmUudGF4b21hcHBpbmcgPSB0aGlzO1xuXG4gICAgfVxuICAgIHJldHVybiBsaW5lLnRheG9tYXBwaW5nO1xuICB9XG5cblxuICBpbml0KGxpbmUpIHtcbiAgICBpZiAobGluZS5kYXRhc2V0LmFkZGxpbmUpIHtcbiAgICAgIGxldCBjb250cm9scyA9IHt9O1xuICAgICAgWydzZWxlY3QnLCAncmVwbGFjZSddLmZvckVhY2goc2VsZWN0b3IgPT4ge1xuICAgICAgICBjb250cm9sc1tzZWxlY3Rvcl0gPSBsaW5lLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiaXRlbS0nICsgc2VsZWN0b3IgKyAnXCJdJyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubGluZWNvbnRyb2xzID0gY29udHJvbHM7XG4gICAgICBjb250cm9scyA9IG51bGw7XG4gICAgICBsZXQgYnRuID0gbGluZS5xdWVyeVNlbGVjdG9yKCcuJyArIGxpbmUuZGF0YXNldC5hZGRsaW5lKTtcbiAgICAgIGJ0biA9IChidG4gPT09IG51bGwpID8gdGhpcy5jcmVhdGVCdG4obGluZSkgOiBidG47XG4gICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICB0aGlzLmFkZExpbmUobGluZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuYnRuID0gYnRuO1xuICAgIH1cbiAgICB0aGlzLmJlZm9yZVN1Ym1pdChsaW5lKTtcbiAgfVxuICBjcmVhdGVCdG4obGluZSkge1xuICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGJ0bi5jbGFzc0xpc3QuYWRkKGxpbmUuZGF0YXNldC5hZGRsaW5lKTtcbiAgICBidG4uaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgYDxpIGNsYXNzPVwiaWNvbiBpY29uLXBsdXMtc20gYmxvY2sgbXgtYXV0b1wiPjwvaT5gKTtcbiAgICBidG4udGV4dENvbnRlbnQgPSAobGluZS5kYXRhc2V0LmFkZHRleHQpID8gRE9NUHVyaWZ5KGxpbmUuZGF0YXNldC5hZGR0ZXh0KS5zYW5pdGl6ZSgpIDogJ0FkZCc7XG4gICAgbGluZS5hcHBlbmQoYnRuKTtcbiAgICByZXR1cm4gYnRuO1xuICB9XG4gIGFkZExpbmUobGluZSkge1xuXG4gICAgLy8gdmVyaWZ5IHZhbHVlcyBub3QgXCJcIiBmb3Igc2VsZWN0IGFuZCByZXBsYWNlIGlucHV0c1xuICAgIGxldCBjYW5kbyA9IHRydWU7XG4gICAgT2JqZWN0LnZhbHVlcyh0aGlzLmxpbmVjb250cm9scykuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICBjb25zdCBpbnB1dHZhbHVlID0gKGlucHV0LnRvbXNlbGVjdCkgPyBpbnB1dC50b21zZWxlY3QuaXRlbXMgOiBuZXcgU3RyaW5nKGlucHV0LnZhbHVlKTtcblxuICAgICAgY2FuZG8gPSBjYW5kbyAmJiAoaW5wdXR2YWx1ZS5sZW5ndGggPiAwKTtcbiAgICB9KTtcbiAgICBpZiAoY2FuZG8gPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmJ0bi5kYXRhc2V0LnRpdGxlID0gKGxpbmUuZGF0YXNldC5ub3RzZWxlY3RlZCkgPyBsaW5lLmRhdGFzZXQubm90c2VsZWN0ZWQgOiAnc2VsZWN0IHZhbHVlcyB0byByZXBsYWNlJztcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuYnRuLmRhdGFzZXQudGl0bGUpIGRlbGV0ZSB0aGlzLmJ0bi5kYXRhc2V0LnRpdGxlO1xuICAgIGNvbnN0IG5ld2xpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBuZXdsaW5lLmNsYXNzTGlzdC5hZGQoY3NzLmxpbmUpO1xuICAgIG5ld2xpbmUuY2xhc3NMaXN0LmFkZCgncGItMicpO1xuICAgIHRoaXMubnVtbGluZXMrKztcblxuICAgIE9iamVjdC52YWx1ZXModGhpcy5saW5lY29udHJvbHMpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgY29uc3Qga2VlcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAga2VlcC5jbGFzc0xpc3QuYWRkKGNzcy5tYXBsaW5lKTtcbiAgICAgIGtlZXAuY2xhc3NMaXN0LmFkZCgnbXItMicpO1xuICAgICAgaWYgKGlucHV0LnRvbXNlbGVjdCkge1xuICAgICAgICBjb25zdCB0c2lucHV0ID0gbGluZS5xdWVyeVNlbGVjdG9yKCcudHMtY29udHJvbCA+IGRpdicpO1xuICAgICAgICBrZWVwLmRhdGFzZXQudmFsdWUgPSBpbnB1dC52YWx1ZTtcbiAgICAgICAga2VlcC50ZXh0Q29udGVudCA9IHRzaW5wdXQudGV4dENvbnRlbnQ7XG4gICAgICAgIGtlZXAuZGF0YXNldC5yZXBsYWNlID0gdGhpcy5udW1saW5lcztcbiAgICAgICAgaW5wdXQudG9tc2VsZWN0LmNsZWFyKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2VlcC5kYXRhc2V0LnZhbHVlID0gaW5wdXQub3B0aW9uc1tpbnB1dC5zZWxlY3RlZEluZGV4XS52YWx1ZTtcbiAgICAgICAga2VlcC50ZXh0Q29udGVudCA9IGlucHV0Lm9wdGlvbnNbaW5wdXQuc2VsZWN0ZWRJbmRleF0udGV4dDtcbiAgICAgICAgbmV3bGluZS5kYXRhc2V0LmluZGV4ID0gaW5wdXQuc2VsZWN0ZWRJbmRleDtcbiAgICAgICAga2VlcC5kYXRhc2V0LnNlbGVjdCA9IHRoaXMubnVtbGluZXM7XG4gICAgICAgIGlucHV0Lm9wdGlvbnNbaW5wdXQuc2VsZWN0ZWRJbmRleF0uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICBpbnB1dC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICB9XG4gICAgICBpbnB1dC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShrZWVwLCBpbnB1dCk7XG4gICAgICBuZXdsaW5lLmFwcGVuZChrZWVwKTtcbiAgICB9KTtcbiAgICB0aGlzLmJ0bkNhbmNlbChuZXdsaW5lLCAobGluZS5kYXRhc2V0LmNhbmNlbCkgPyBsaW5lLmRhdGFzZXQuY2FuY2VsIDogJ2NhbmNlbCcpO1xuICAgIGxpbmUucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUobmV3bGluZSwgbGluZSk7XG4gIH1cblxuICBidG5DYW5jZWwoaXRlbSwgdGV4dCkge1xuICAgIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNhbmNlbC5pZCA9ICdjYW5jZWxfJyArIHRoaXMubnVtbGluZXM7XG4gICAgY2FuY2VsLmNsYXNzTGlzdC5hZGQoY3NzLmNhbmNlbCk7XG4gICAgWydhY3Rpb24nLCAnbmFtZSddLmZvckVhY2goZGF0YSA9PiB7XG4gICAgICBkZWxldGUgY2FuY2VsLmRhdGFzZXRbZGF0YV07XG4gICAgfSk7XG4gICAgaXRlbS5hcHBlbmQoY2FuY2VsKTtcbiAgICBjYW5jZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgYDxpIGNsYXNzPVwiaWNvbiBpY29uLWNhbmNlbCBhYnNvbHV0ZSBjZW50ZXJlZFwiPjwvaT5gKTtcbiAgICBjYW5jZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgdGhpcy5saW5lY29udHJvbHMuc2VsZWN0Lm9wdGlvbnNbaXRlbS5kYXRhc2V0LmluZGV4XS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgaXRlbS5yZW1vdmUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJlZm9yZVN1Ym1pdChpdGVtKSB7XG4gICAgY29uc3QgZm9ybSA9IGl0ZW0uY2xvc2VzdCgnZm9ybScpO1xuICAgIGlmIChmb3JtID09PSBudWxsKSByZXR1cm47XG4gICAgY29uc3QgZm9ybWF0X21hcHBpbmdfZmllbGQgPSAoKSA9PiB7XG4gICAgICBsZXQga2VlcGhpZGRlbiA9IGZvcm0ucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cIicgKyB0aGlzLmtlZXBuYW1lICsgJ1wiXScpO1xuICAgICAgaWYgKGtlZXBoaWRkZW4gIT09IG51bGwpIGtlZXBoaWRkZW4ucmVtb3ZlKCk7XG4gICAgICBrZWVwaGlkZGVuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgIGtlZXBoaWRkZW4udHlwZSA9ICdoaWRkZW4nO1xuICAgICAga2VlcGhpZGRlbi5uYW1lID0gdGhpcy5rZWVwbmFtZTtcbiAgICAgIGxldCBtYXBwaW5nID0ge307XG4gICAgICBmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXNlbGVjdF0nKS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgY29uc3QgcmVwbGFjZSA9IGVsLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcmVwbGFjZT1cIicgKyBlbC5kYXRhc2V0LnNlbGVjdCArICdcIl0nKTtcbiAgICAgICAgaWYgKHJlcGxhY2UgIT09IG51bGwpIG1hcHBpbmdbZWwuZGF0YXNldC52YWx1ZV0gPSByZXBsYWNlLmRhdGFzZXQudmFsdWU7XG4gICAgICB9KTtcbiAgICAgIGZvcm0uYXBwZW5kKGtlZXBoaWRkZW4pO1xuICAgICAga2VlcGhpZGRlbi52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KG1hcHBpbmcpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIGlmIChmb3JtLmZvcm1zdWJtaXQpIHtcbiAgICAgIGZvcm0uZm9ybXN1Ym1pdC5hZGRIYW5kbGVyKGZvcm1hdF9tYXBwaW5nX2ZpZWxkKTtcblxuICAgIH0gZWxzZSBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XG4gICAgICBmb3JtYXRfbWFwcGluZ19maWVsZCgpO1xuXG4gICAgfSk7XG4gIH1cbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/modules/js-taxomapping.js\n")}}]);
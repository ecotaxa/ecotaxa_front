/*! For license information please see src_modules_js-upload_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_js-upload_js"],{"./src/modules/js-upload.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsUpload: () => (/* binding */ JsUpload)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fflate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fflate */ \"./node_modules/fflate/esm/browser.js\");\n/* harmony import */ var _modules_form_submit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/form-submit.js */ \"./src/modules/form-submit.js\");\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\n\n\n\n\nconst already_compressed = new Set([\n  'zip', 'gz', 'png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx', 'ppt', 'pptx',\n  'xls', 'xlsx', 'heic', 'heif', '7z', 'bz2', 'rar', 'gif', 'webp', 'webm',\n  'mp4', 'mov', 'mp3', 'aifc'\n]);\nconst accept = '.tsv,.png,.jpg, .jpeg,.zip,.gz,.7z,.bz2';\nconst largefile = 50000;\nconst chunksize = 2000000;\nlet instance = null;\nconst defdir = \"ecotaxa_import\";\n\nclass JsUpload {\n  zipstream;\n  zipsize = 0;\n  pathname;\n  zipname;\n  numfiles = 0;\n  sizefiles = 0;\n  zipparts = [];\n  counter = 0;\n  counterdisplay = null;\n  ziptrigger = null;\n  displaylist = null;\n  timer = 0;\n  targetdir = '';\n  sent = false;\n  dropzone;\n  root = '.';\n  constructor(container, callback = null, options = {}) {\n    if (instance) return instance;\n    container = (container instanceof HTMLElement) ? container : document.querySelector(container);\n    if (!container) return;\n    this.container = container;\n    this.callback = callback;\n    const defaultOptions = {\n      level: 0,\n      //  url: \"http://localhost:5001/gui/files/upload\",\n      url: \"https://localhost:8000/my_files/\",\n      filefield: 'file',\n      selector: {\n        makezip: '.makezip',\n        droptarget: '.droptarget',\n        trigger: '.trigger',\n        uploadfile: 'uploadfile',\n        formu: 'formupload',\n        stepper: 'stepper',\n        stepitem: 'stepper-item',\n        filetoload: 'file_to_load',\n        progress: \"progress-upload\"\n      },\n      display: {\n        dropzone: 'dropzone',\n        counter: 'counter',\n        size: 'sizetozip',\n        counterzipped: 'counterzipped',\n        sizezipped: 'sizezipped',\n        dirlist: 'dirlist',\n        boxtitle: 'boxtitle',\n        timer: 'timer'\n      },\n      css: {\n        enabled: 'enabled'\n      }\n    };\n\n    this.options = Object.assign(defaultOptions, options);\n\n    this.init(container);\n    instance = this;\n    return instance;\n  }\n\n  init(container) {\n    // create a filepicker depends on browser\n    this.dropzone = document.createElement('div');\n    this.dropzone.id = this.options.display.dropzone;\n    this.dropzone.innerHTML = `<input type=\"file\" class=\"hidden\"  name=\"${this.options.selector.uploadfile}\" id=\"${this.options.selector.uploadfile}\">\n            <div class=\"${this.options.selector.droptarget.slice(1)}\">\n            <div id=\"${this.options.display.boxtitle}\"><span class=\"${this.options.selector.trigger.slice(1)}\">${this.container.dataset.textbrowse}</span>  ${this.container.dataset.textdrop}</div>\n          </div><div class=\"grid grid-cols-2 grid-gap-4\"><div>Files</div><div>Compressesd</div></div><div class=\"grid grid-cols-2 grid-gap-4\"><div id=\"${this.options.display.counter}\"></div><div id=\"${this.options.display.counterzipped}\"></div>\n          <div class=\"grid grid-cols-2 grid-gap-4\" id=\"${this.options.display.size}\"></div><div id=\"${this.options.display.sizezipped}\"></div><div id=\"${this.options.display.timer}\"></div>\n          <div id=\"${this.options.selector.makezip.slice(1)}\" class=\"button ${this.options.selector.makezip.slice(1)} ${_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide} \"><div id=\"${this.options.selector.progress}\"></div>${container.dataset.ended}</div>`;\n    container.append(this.dropzone);\n    this.counterdisplay = document.getElementById(this.options.display.counter);\n    this.counterzippeddisplay = document.getElementById(this.options.display.counterzipped);\n    this.sizedisplay = document.getElementById(this.options.display.size);\n    this.sizezippeddisplay = document.getElementById(this.options.display.sizezipped);\n    this.ziptrigger = container.querySelector(this.options.selector.makezip);\n    this.displaylist = document.getElementById(this.options.display.dirlist);\n    const droptarget = this.container.querySelector(this.options.selector.droptarget);\n    droptarget.addEventListener('dragover', (e) => {\n      this.handleDragOver(e);\n    });\n    droptarget.addEventListener('drop', async (e) => {\n      this.handleDrop(e);\n\n    });\n    container.querySelector(this.options.selector.trigger).addEventListener('click', (e) => {\n      let datatransfer = e;\n      this.openDirDialog(accept, (e) => {\n        console.log('edrop', datatransfer)\n      });\n    });\n  }\n  attachDropzone(target) {\n    console.log('attch', target);\n    this.targetdir = (target.parentElement.dataset.name) ? target.parentElement.dataset.name : '';\n    console.log('targetdir', this.targetdir)\n    this.dropzone.classList.add(this.options.css.enabled);\n    console.log('att', this.dropzone);\n    target.append(this.dropzone);\n  }\n  detachDropzone() {\n    this.targetdir = null;\n    this.container.classList.remove(this.options.css.enabled);\n\n  }\n  openDirDialog(accept, callback) {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.directory = true;\n    input.multiple = true;\n    input.webkitdirectory = true;\n    input.allowdirs = true;\n    input.accept = accept;\n    input.addEventListener(\"change\", callback);\n    input.dispatchEvent(new MouseEvent(\"click\"));\n  }\n  handleDragOver(e) {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n\n  async handleDrop(e) {\n    let dataTransfer;\n    if (e.dataTransfer) {\n      e.preventDefault();\n      dataTransfer = e.dataTransfer;\n    } else dataTransfer = e;\n    this.timer = new Date();\n    console.log('dataTransfer ', dataTransfer.items)\n\n    const items = [...((dataTransfer.items) ? dataTransfer.items : dataTransfer.files)];\n    if (items.length) {\n      this.enableDropzone(false);\n      this.zipname = '_upload.zip';\n      this.zip = new fflate__WEBPACK_IMPORTED_MODULE_4__.Zip();\n\n      this.zipReadableStream = await this.fflToStream();\n      const on_error = (err) => {\n        console.log('err_read_dir', err);\n      }\n      const on_complete = async () => {\n        this.timer = (new Date() - this.timer) / 1000;\n        console.log('item-------------------------------------' + parseInt(this.timer / 60) + ' --- ' + (\n          this.timer - (parseInt(this.timer / 60) * 60)), this.zip);\n        this.enableDropzone();\n        this.zip.end();\n        this.ziptrigger.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n        this.ziptrigger.addEventListener('click', async (e) => {\n          this.ziptrigger.disabled = true;\n          console.log('upload click')\n          this.enableDropzone(false, true);\n\n          return await this.sendZip();\n        });\n      }\n      //this.pathname.pop();\n      for (let i = 0; i < items.length; i++) {\n        let item = items[i].webkitGetAsEntry();\n        if (item.isDirectory === true) {\n          this.zipname = item.name + this.zipname;\n          await this.readDirectory(item, this.root, on_complete);\n        } else if (item.isFile === true) {\n          // put directly in input file\n\n        }\n\n      }\n    }\n  }\n  stopOnError(err) {\n    console.log('err', err);\n  }\n\n  enableDropzone(enable = true, destroy = false) {\n    if (destroy) this.dropzone.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_3__.css.hide);\n    if (enable) this.dropzone.classList.add(this.options.css.enabled);\n    else this.dropzone.classList.remove(this.options.css.enabled);\n\n  }\n  async supportsRequestStreams() {\n    let duplexAccessed = false;\n    const hasContentType = new Request(this.options.url, {\n      body: new ReadableStream(),\n      method: 'POST',\n      get duplex() {\n        duplexAccessed = true;\n        return 'half';\n      },\n    }).headers.has('Content-Type');\n\n    return duplexAccessed && !hasContentType;\n  }\n\n  fileType(data) {\n    const mime_type = (signature) => {\n      switch (signature) {\n        case '89504E47':\n          return 'image/png';\n        case '47494638':\n          return 'image/gif';\n        case '25504446':\n          return 'application/pdf';\n        case 'FFD8FFDB':\n        case 'FFD8FFE0':\n        case 'FFD8FFE1':\n          return 'image/jpeg';\n        case '504B0304':\n          return 'application/zip';\n        case 'EFBBBF22':\n          return 'text/tsv'; //'text/tab-separated-values';\n        default:\n          console.log('unknownsign', signature)\n          return 'unknown';\n      }\n    }\n    const uint = new Uint8Array(data);\n    let bytes = []\n    for (let i = 0; i < 4; i++) {\n      bytes.push(uint[i].toString(16))\n    }\n    data = bytes.join('').toUpperCase();\n    return {\n      input: uint,\n      mimetype: mime_type(data)\n    };\n  }\n\n  async fflToStream() {\n    const fflateStream = this.zip;\n    const transform = new TransformStream();\n    const writer = transform.writable.getWriter();\n    return new TransformStream({\n      start(controller) {\n        fflateStream.ondata = (error, data, final) => {\n          if (error) {\n            console.log('error', error);\n            return false;\n          } else {\n            controller.enqueue(data);\n            if (final) {\n              console.log('final', final);\n              //  controller.terminate();\n            }\n\n          }\n        }\n      },\n      flush(controller) {\n        console.log('terminate ffstrem')\n        controller.terminate();\n      }\n    })\n\n  }\n  //\n\n\n  async readDirectory(dir, parent, oncomplete, onerror = null) {\n    console.log('read', dir.name)\n    const self = this;\n    let errored = false;\n    let direntries = [],\n      handlers = [],\n      files = [];\n\n    const on_error = onerror ? onerror : (err) => {\n      console.log('on_error', err)\n      if (!errored) {\n        errored = true;\n\n      }\n    };\n\n    const readfile = async function(file, zippedstream) {\n      const reader = file.stream().getReader();\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) {\n          await zippedstream.push(new Uint8Array(0), true);\n          return done;\n        }\n        await zippedstream.push(value);\n      }\n\n    };\n\n    //\n    const process_file = async function() {\n      const entry = files.shift();\n      const filepath = entry.fullPath.slice(1);\n      //  console.log('fileadd=' + self.numfiles, entry.name)\n      const ext = filepath.slice(filepath.lastIndexOf('.') + 1);\n      const zip_file = async (filetozip) => {\n        const iscompressed = already_compressed.has(ext);\n        const zippedstream = iscompressed ?\n          new fflate__WEBPACK_IMPORTED_MODULE_4__.ZipPassThrough(filepath) :\n          filetozip.size > largefile ?\n          new fflate__WEBPACK_IMPORTED_MODULE_4__.AsyncZipDeflate(filepath, {\n            level: 9\n          }) : new fflate__WEBPACK_IMPORTED_MODULE_4__.ZipDeflate(filepath, {\n            level: 6\n          });\n        //  console.log('zipstr', zippedstream)\n        zippedstream.ondata = async function(err, dat, final) {\n          if (err) console.log('err add chunk to zipfile' + dat, err);\n          else if (final) {\n\n            if (files.length) {\n              console.log('files', files.length);\n              await process_file();\n            } else {\n              console.log('lastfile', dir.name);\n              await on_complete();\n            }\n          }\n        };\n        await self.zip.add(zippedstream);\n        return await readfile(filetozip, zippedstream);\n      };\n      self.numfiles++;\n      if (self.numfiles === 1) {\n        fetch(self.options.url.replace('my_files', 'stream_my_files'), {\n          mode: 'cors',\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/zip\",\n          },\n          body: self.zipReadableStream.readable,\n          duplex: 'half',\n        }).then((response) => {\n          console.log('response', response);\n        });\n      }\n      await entry.file(zip_file);\n\n    };\n    //\n\n    const process_entries = function() {\n      const entry = direntries.shift();\n      if (entry.isFile) {\n        //console.log('fileleft ***---' + dir.name, entry.name);\n        self.counter++;\n        self.counterdisplay.textContent = self.counter;\n        //const f = entry.getAsFile();\n        files.push(entry);\n        //  await process_file(entry, entry.fullPath.slice(1));\n        self.counter--;\n        self.counterdisplay.textContent = self.counter;\n      } else if (entry.isDirectory) {\n        console.log('entry is dir', entry)\n        handlers.push(entry);\n      }\n      if (direntries.length) process_entries();\n\n    }\n    const on_complete = async function() {\n      for (const handler of handlers) {\n        console.log(handler);\n        await self.readDirectory(handler, dir, async function() {\n          console.log('idir', handler.name);\n          if (files.length) await process_file();\n        });\n      }\n\n    }\n    const reader = dir.createReader();\n    const on_read = async function(ents) {\n      if (ents.length && !errored) {\n        direntries = [...direntries, ...ents];\n        await reader.readEntries(on_read, on_error);\n      } else if (!errored) {\n        process_entries();\n        console.log('theend------------------- ' + dir.name, direntries.length)\n        await on_complete();\n\n\n      } else {\n        console.log('treat error readdir');\n      }\n    }\n\n    await reader.readEntries(on_read, on_error);\n\n    console.log('enddir' + dir.name, direntries.length)\n\n  }\n\n  compressionLevel(name) {\n    if (!name) {\n\n      return -1;\n    }\n    let ext = name.split('.');\n    ext = (ext.length > 1) ? ext[ext.length - 1] : ext[0];\n    return (already_compressed.find(ex => (ex === ext))) ? 2 : this.options.level;\n  }\n\n  async sendZip() {\n    //  const filestream = new WritableStream();\n    //  const writer = filestream.getWriter();\n    //\n\n    //\n\n\n    /*  fetch(this.options.url.replace('my_files', 'stream_my_files'), {\n        mode: 'cors',\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"text/plain\",\n        },\n        body: this.zipReadableStream,\n        duplex: 'half',\n      });*/\n    /**********************************/\n    /*webtransport\n      const transport = new WebTransport(this.options.url);\n\n      // Optionally, set up functions to respond to\n      // the connection closing:\n      transport.closed.then(() => {\n        console.log(`The HTTP/3 connection to ${url} closed gracefully.`);\n      }).catch((error) => {\n        console.error(`The HTTP/3 connection to ${url} closed due to ${error}.`);\n      });\n\n      // Once .ready fulfills, the connection can be used.\n      await transport.ready;\n      const streamsend = await transport.createUnidirectionalStream();\n      const writer = streamsend.writable.getWriter();\n      const streamtest = new ReadableStream({\n        async start(controller) {\n          await wait(1000);\n          controller.enqueue('This ');\n          await wait(1000);\n          controller.enqueue('is ');\n          await wait(1000);\n          controller.enqueue('a ');\n          await wait(1000);\n          controller.enqueue('slow ');\n          await wait(1000);\n          controller.enqueue('request.');\n          controller.close();\n        },\n      }).pipeTo(writer);\n\n    */\n\n\n\n\n  }\n\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/js-upload.js\n")}}]);
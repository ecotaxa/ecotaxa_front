/*! For license information please see src_modules_js-my-files_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_js-my-files_js"],{"./src/modules/js-my-files.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsMyFiles: () => (/* binding */ JsMyFiles)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\n\nconst accept = '.tsv,.png,.jpg, .jpeg,.zip,.gz,.7z,.bz2';\nconst localcss = {\n  mright: 'mr-4',\n}\nlet instance = null;\nclass JsMyFiles {\n  done = true;\n  jsDirToZip = null;\n  counters = {};\n  path = '';\n  _events = {};\n  eventnames = {\n    complete: 'complete',\n    error: 'error',\n  }\n  constructor(container, options = {}) {\n    if (!instance) {\n      container = (container instanceof HTMLElement) ? container : document.querySelector(container);\n      if (!container) return;\n      (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dom_purify)(container, 'dataset');\n      this.container = container;\n      console.log(\"/gui/files/list\")\n      const defaultOptions = {\n\n        url: \"/gui/files/list\",\n        compress: {\n          label: 'compress'\n        },\n        counters: {\n          id: 'display-file-counters',\n        },\n        controls: {\n          zip: {\n            btn: {\n              zip: 'makezip',\n              zipped: 'makezipped'\n            },\n            display: {\n              size: 'sizezipped',\n              counter: 'counterzipped',\n            }\n          },\n          scan: {\n            display: {\n              counter: 'counter',\n              size: 'size',\n            }\n          },\n        },\n        upload: {\n          label: 'upload'\n        },\n        btnprefix: 'btn',\n        btnfilelist: null,\n        selector: {\n          doupload: '.target-upload',\n          droptarget: '.droptarget',\n          trigger: '.trigger',\n          dirlist: '.dirlist',\n          entries: '.entries',\n          uploadfile: 'uploadfile',\n          displayresult: 'results',\n        },\n        display: {\n\n          local: 'local-list',\n          server: 'server-list',\n          dropzone: 'dropzone',\n          dirlist: 'dirlist',\n          boxtitle: 'boxtitle',\n        },\n\n\n        css: {\n          enabled: 'enabled'\n        }\n      };\n      this.options = Object.assign(defaultOptions, options);\n      this.init();\n      instance = this;\n    }\n    return instance;\n  }\n  init() {\n    // create dirlist box\n    let el = this.container.querySelector(this.options.selector.dirlist);\n    if (!el) {\n      el = document.createElement('div');\n      el.classList.add(this.options.selector.dirlist.slice(1));\n      this.container.append(el)\n    }\n    if (this.options.btnfilelist) {\n      const btnfiles = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('div', el, {\n        class: 'button is-secondary',\n        text: this.options.btnfilelist\n      });\n      btnfiles.addEventListener('click', (e) => {\n        this.serverList(el);\n        this.classList.toggle(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n      });\n    } else this.serverList(el);\n\n\n    //\n    // create a filepicker depends on browser\n    this.dropzone = document.createElement('div');\n    this.dropzone.id = this.options.display.dropzone;\n    this.dropzone.innerHTML = `<input type=\"file\" class=\"hidden\"  name=\"${this.options.selector.uploadfile}\" id=\"${this.options.selector.uploadfile}\">\n            <div class=\"${this.options.selector.droptarget.slice(1)}\">\n            <div id=\"${this.options.display.boxtitle}\"><span class=\"${this.options.selector.trigger.slice(1)}\">${this.container.dataset.textbrowse}</span>  ${this.container.dataset.textdrop}</div>\n          </div>`;\n    this.container.append(this.dropzone);\n    // add counters\n    el = document.getElementById(this.options.counters.id);\n    if (!el) {\n      console.log('counterscreate')\n      el = document.createElement('div');\n      el.id = this.options.counters.id;\n      el.innerHTML = `<div class=\"counters\"></div><div class=\"sizes\"></div><div class=\"progresss\"></div><div class=\"timers\"></div>`;\n      this.container.append(el);\n\n    }\n    this.displaylist = document.getElementById(this.options.display.dirlist);\n    const droptarget = this.container.querySelector(this.options.selector.droptarget);\n    droptarget.addEventListener('dragover', (e) => {\n      this.handleDragOver(e);\n    });\n    droptarget.addEventListener('drop', async (e) => {\n      this.handleDrop(e);\n    });\n    this.container.querySelector(this.options.selector.trigger).addEventListener('click', (e) => {\n      let datatransfer = e;\n      this.openDirDialog(accept, (e) => {\n        console.log('edrop', datatransfer)\n      });\n    });\n    (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.add_custom_events)(this);\n\n    this.on(this.eventnames.error, (e) => {\n      consoile.log('scandir recevie error messgae', e)\n    })\n    this.on(this.eventnames.processed, async (e) => {\n      if (this.nextaction) await this.nextaction();\n    })\n\n    window.addEventListener('beforeunload', (e) => {\n      if (!this.done) {\n        e.preventDefault();\n        e.returnValue = (this.options.preventclose) ? this.options.preventclose : `Some work is in progress in this window.\\nAre you sure you want to leave?`;\n      }\n\n    });\n\n\n  }\n  async addDirList(source) {\n\n  }\n  serverList(parent = null, subdir = null, tag = null) {\n    parent = parent ? parent : this.container.querySelector(this.options.selector.dirlist);\n    if (!parent) return;\n    parent.classList.add('wait');\n\n    const el = parent.querySelector(this.options.selector.entries);\n    if (el) el.remove();\n    tag = (tag) ? ((tag === 'select') ? 'optiongroup' : tag) : 'ul';\n    const subtag = (tag === 'ul') ? 'li' : 'option';\n    console.log('list subdir', subdir)\n    fetch(this.options.url + ((subdir) ? subdir : ''), (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings)()).then(response => response.json()).then(async json => {\n      console.log('jspn', json)\n      if (json.entries && json.entries.length) {\n        if (parent.dataset.label) parent.insertAdjacentHTML('afterbegin', `<label>${parent.dataset.label}</label>`);\n        let html = [`<${tag} class=\"${this.options.selector.entries.slice(1)}\">`],\n          files = [],\n          directories = [],\n          entries = json.entries;\n        while (entries.length > 0) {\n          const entry = entries.shift();\n          if (entry.type === 'F') files.push(entry);\n          else directories.push(entry);\n        };\n        files.sort((a, b) => (a.name < b.name));\n        directories.sort((a, b) => (a.name < b.name));\n        [directories, files].forEach(entries => {\n          entries.forEach((entry) => {\n            const ext = entry.name.split('.').pop();\n            const del = `<i class=\"icon-sm icon-trash delentry ml-2 hidden\" alt=\"delete\"></i>`;\n            const entrydetail = `<span class=\"entry${entry.type}\"><i class=\"icon p-[0.125rem] icon-${((entry.type === \"D\") ? 'folder-sm' : ((_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.filter_files.images.split(',').indexOf(ext)>=0)?'image-sm':'document-sm'))} align-text-bottom mb-0.5 mr-0.5\"></i>${entry.name}</span>`;\n            html.push(`<${subtag} ${(entry.type==='D')?`draggable=\"true\"`:``} data-name=\"${entry.name}\" ${(tag==='select')?` class=\"entry${entry.type}\"`:``}>${entrydetail}`);\n            html.push(`${del}</${subtag}>`);\n          });\n        });\n        html.push(`</${tag}>`);\n        parent.insertAdjacentHTML('beforeend', html.join(``));\n\n        parent.querySelectorAll('.entryD').forEach(dir => {\n          dir.addEventListener('click', (e) => {\n            e.stopImmediatePropagation();\n            const dirlist = e.currentTarget.parentElement;\n\n            dirlist.classList.toggle('on');\n            const ico = e.currentTarget.querySelector('i.icon');\n            if (ico) {\n              ico.classList.toggle('icon-folder-sm');\n              ico.classList.toggle('icon-folder-open-sm');\n            }\n            if (dirlist.classList.contains('on')) {\n              if (!dirlist.dataset.load) {\n                this.serverList(dirlist, ((subdir) ? subdir + '/' : '/') + dirlist.dataset.name, tag);\n              }\n            }\n          });\n          dir.querySelectorAll('.entryF').forEach(file => {\n            const del_file = () => {\n              alert('del', delfile.parentElement.dataset.name);\n            }\n            const trash = e.currentTarget.parentElement.querySelector('.delentry');\n            console.log('trash', trash)\n            file.addEventListener('mouseenter', (e) => {\n              console.log('file', e)\n              trash.classList.remove('hidden');\n              file.addEventListener('click', del_file);\n            });\n            file.addEventListener('mouseout', (e) => {\n              trash.classList.add('hidden');\n              file.removeEventListener('click', del_file);\n            });\n          });\n        });\n\n      }\n      await this.addUploadDialog(this.container);\n      parent.classList.remove('wait');\n      parent.dataset.loaded = true;\n\n    });\n\n  }\n\n  attachDropzone(target) {\n    this.targetdir = (target.parentElement.dataset.name) ? target.parentElement.dataset.name : '';\n    this.dropzone.classList.add(this.options.css.enabled);\n    target.append(this.dropzone);\n  }\n  detachDropzone() {\n    this.targetdir = null;\n    this.container.classList.remove(this.options.css.enabled);\n\n  }\n\n  openDirDialog(accept, callback) {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.directory = true;\n    input.multiple = true;\n    input.webkitdirectory = true;\n    input.allowdirs = true;\n    input.accept = accept;\n    input.addEventListener(\"change\", callback);\n    input.dispatchEvent(new MouseEvent(\"click\"));\n  }\n  handleDragOver(e) {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n\n  async handleDrop(e) {\n    let dataTransfer;\n    if (e.dataTransfer) {\n      e.preventDefault();\n      dataTransfer = e.dataTransfer;\n    } else dataTransfer = e;\n    this.done = false;\n    this.timer = new Date();\n    const items = [...((dataTransfer.items) ? dataTransfer.items : dataTransfer.files)];\n    if (items.length) {\n      this.enableDropzone(false);\n      await items.forEach(async item => {\n        if (item.kind === \"file\") {\n          item = await item.webkitGetAsEntry();\n          console.log('itemtoread', item)\n\n          await this.readEntry(item);\n        }\n      })\n    }\n  }\n  showComplete() {\n    this.timer = (new Date() - this.timer) / 1000;\n    console.log('item-------------------------------------' + parseInt(this.timer / 60) + ' --- ' + (\n      this.timer - (parseInt(this.timer / 60) * 60)));\n    this.enableDropzone();\n  }\n\n  stopOnError(err) {\n    console.log('err', err);\n  }\n\n  enableDropzone(enable = true, destroy = false) {\n    if (destroy) this.dropzone.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    if (enable) this.dropzone.classList.add(this.options.css.enabled);\n    else this.dropzone.classList.remove(this.options.css.enabled);\n\n  }\n\n  async addUploadDialog(item) {\n    item = (item) ? item : this.container;\n    if (this.options.controls.scan) {\n      this.attachDropzone(item);\n      if (this.options.controls.zip) {\n        const {\n          JsDirToZip\n        } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_fflate_esm_browser_js\"), __webpack_require__.e(\"src_modules_files_js-dirtozip_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ../modules/files/js-dirtozip.js */ \"./src/modules/files/js-dirtozip.js\"));\n        this.jsDirToZip = new JsDirToZip();\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.ready, (e) => {\n          console.log('ready')\n          this.initDisplays();\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.message, async (e) => {\n          console.log('e', e);\n          let type = 'info';\n          switch (e.name) {\n            case 'console':\n              console.log('console', e);\n              type = window.alertbox.alertconfig.types.warning;\n              break;\n            case 'error':\n              type = window.alertbox.alertconfig.types.error;\n              console.log('error', e);\n            default:\n              console.log('message', e);\n          }\n          window.alertbox.renderMessage({\n            type: type,\n            content: e.message,\n            dismissible: true\n          });\n        });\n        const self = this;\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.ready, (e) => {\n          self.showControl(this.jsDirToZip.eventnames.ready);\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.counter, (e) => {\n          self.fileCounter(e.name, e.filepath, e.size);\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.complete, (e) => {\n\n          if (!e || !e.name) {\n            console.log('no emit complete name');\n            return;\n          }\n\n          self.showControl(e.name, ((e.hasOwnProperty('bigfile') && e.bigfile) ? 'zipped' : 'zip'), (e.hasOwnProperty('part')) ? e.part : ((e.hasOwnProperty('bigfile')) ? e.bigfile : null));\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.pending, (e) => {\n          self.showControl(this.jsDirToZip.eventnames.pending, ((e && e.hasOwnProperty('bigfile') && e.bigfile) ? 'zipped' : 'zip'));\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.gzip, (e) => {\n          console.log('gzipped', e)\n          self.showControl(this.jsDirToZip.eventnames.gzip, 'zipped', e);\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.terminate, (e) => {\n          console.log('terminate', e)\n          self.showControl(this.jsDirToZip.eventnames.terminate, ((e && e.hasOwnProperty('bigfile') && e.bigfile) ? 'zipped' : 'zip'));\n        });\n      }\n\n    }\n\n  }\n  async readEntry(entry) {\n    this.toggleCounters(true);\n    await this.jsDirToZip.scanHandle(entry);\n  }\n\n\n  async addFilesStore(name, callback) {\n    name = (name) ? name : this.options.dbname;\n    if (!this.jsFilesStore) {\n      const {\n        JsFilesStore\n      } = await __webpack_require__.e(/*! import() */ \"src_modules_files_js-filesystem_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/files/js-filesystem.js */ \"./src/modules/files/js-filesystem.js\"));\n      this.jsFilesStore = new JsFilesStore(null, callback);\n      this.displayFiles();\n    }\n    if (callback) await callback();\n  }\n  displayFiles() {\n    this.jsFilesStore.getItems('local');\n  }\n\n  fileCounter(item, filepath, size = null) {\n    const counters = this.counters[item];\n    counters.counter++;\n    if (size !== null) counters.size += parseInt(size);\n    counters.display.counter.textContent = counters.counter;\n    if (counters.display.size) counters.display.size.textContent = counters.size;\n  }\n  resetCounter(item) {\n    const counters = this.counters[item];\n    ['counter', 'size'].forEach(el => {\n      counters.display[el].textContent = 0;\n    });\n    this.toggleCounters(false);\n  }\n  toggleCounters(show = true) {\n    const el = document.getElementById(this.options.counters.id);\n    if (!el) return;\n    if (show) el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    else el.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n  }\n\n  initFileCounter(item, opts, i) {\n    const sep = (i) ? ` / ` : ``;\n    let counter = 0;\n    let counterdisplay = null;\n    let size = 0;\n    let sizedisplay = null;\n    // create dom display elements\n\n\n    let boxcounters = document.getElementById(this.options.counters.id);\n    const itemopts = {\n      display: {},\n\n    };\n    Object.entries(opts).forEach(([k, val]) => {\n      const cl = k + 's';\n      let elinsert = boxcounters.querySelector('.' + cl);\n      if (!elinsert) elinsert = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('div', {\n        class: cl\n      }, boxcounters, ``);\n      let el = elinsert.querySelector('.' + val);\n      if (!el) {\n        el = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('span', {\n          class: val\n        }, elinsert);\n      } else this.resetCounter(item);\n      itemopts.display[k] = el;\n      itemopts[k] = 0;\n    });\n\n    this.counters = { ...this.counters,\n      ...{\n        [item]: itemopts\n      }\n    };\n  }\n  showControl(action, target = 'zip', opts = null) {\n\n    let message, text = null;\n    // 'zip' ---only btn for zip actions for the moment\n    const btn = this[this.options.btnprefix + 'zip' + target];\n    console.log('shoiwcontrol', btn)\n    if (!btn) return;\n    btn.removeAttribute(\"disabled\");\n    switch (action) {\n      case this.jsDirToZip.eventnames.ready:\n        if (btn.dataset.message) delete btn.dataset.message;\n        btn.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n        this.initDisplays();\n        break;\n      case this.jsDirToZip.eventnames.endzip:\n        const part = opts;\n        if (!part) this.showComplete();\n        btn.textContent = `Close zip file` + ((part) ? part : ``);\n        btn.title = (part) ? `Your file is too big - you have to send this part before continuing to process the directory` : `Click to end zip file`;\n        message = {\n          name: this.jsDirToZip.eventnames.endzip,\n          part: part,\n          bigfile: (target !== 'zip')\n        };\n        if (part) message[\"part\"] = part;\n        btn.dataset.message = JSON.stringify(message);\n        break;\n      case this.jsDirToZip.eventnames.bigfile:\n        btn.textContent = `Upload big File separately`;\n        message = {\n          name: this.jsDirToZip.eventnames.bigfile,\n          path: this.path,\n          bigfile: true\n        };\n\n        const filepath = opts;\n        if (filepath) message[\"path\"] = filepath;\n        btn.dataset.message = JSON.stringify(message);\n        console.log('bigfile', message)\n        break;\n      case this.jsDirToZip.eventnames.sendfile:\n        message = {\n          name: this.jsDirToZip.eventnames.sendfile,\n          path: this.path,\n          bigfile: opts\n        };\n        btn.textContent = `Upload zip file`;\n        if (message.bigfile !== null) btn.textContent += ` ` + opts;\n        btn.dataset.message = JSON.stringify(message);\n        console.log('messageup', message)\n        break;\n      case this.jsDirToZip.eventnames.pending:\n        btn.textContent = ` Pending ` + ((target !== 'zip') ? ' big file' : '');\n        btn.dataset.message = '';\n        btn.setAttribute(\"disabled\", true);\n        break;\n      case this.jsDirToZip.eventnames.gzip:\n        text = `compressing separately big file :${(opts && opts.bigfile)?opts.bigfile:``} ${(opts && opts.size)?opts.size:``}`;\n        btn.textContent = text;\n        btn.setAttribute(\"disabled\", true);\n        console.log('optsbigfl', opts)\n        btn.dataset.message = JSON.stringify({\n          name: this.jsDirToZip.eventnames.endzip,\n          path: (opts.hasOwnProperty(\"bigfile\")) ? opts.bigfile : e.path,\n          bigfile: (opts.hasOwnProperty(\"bigfile\") && opts.bigfile !== \"\")\n        });\n        break;\n      case this.jsDirToZip.eventnames.terminate:\n        console.log('terminate ' + ((target !== 'zip') ? 'bigfile' : ''));\n\n        this.serverList();\n        //default:\n        btn.dataset.message = JSON.stringify({\n          name: 'ready',\n          bigfile: (target !== 'zip')\n        });\n        btn.textContent = `End!! ${ ((target !== 'zip') ? 'bigfile' : '')}`;\n\n        break;\n    }\n    if (btn.dataset.message) btn.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n  }\n  emitToZip(btn) {\n    const message = (btn.dataset.message) ? JSON.parse(btn.dataset.message) : null;\n    console.log('message', message)\n    if (!message) btn.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    if (message) {\n      if (message.name) {\n        const name = message.name;\n        delete message.name;\n        console.log('emit ----' + name, message)\n        this.jsDirToZip.emit(name, message);\n      }\n    }\n    if (name === this.jsDirToZip.eventnames.sendfile) btn.disabled = true;\n  }\n  getBtn(item, target, parent = null) {\n    const btnkey = this.options.btnprefix + item + target;\n    if (this[btnkey]) return this[btnkey];\n    const display = this.options.controls[item].btn[target];\n    const btn = document.getElementById(display);\n    if (!btn) {\n      parent = (parent) ? parent : this.dropzone;\n      parent.insertAdjacentHTML('beforeend', `<button id=\"${display}\" class=\"button ${display} ${localcss.mright} ${_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide}\"></button>`);\n      this[btnkey] = document.getElementById(display);\n      this[btnkey].addEventListener('click', async (e) => {\n        this.emitToZip(e.currentTarget);\n      });\n    }\n    return this[btnkey];\n  }\n\n  initDisplays() {\n    console.log('initdispay', this.options.controls)\n    Object.entries(this.options.controls).forEach(([key, item], i) => {\n      this.initFileCounter(key, item.display, i);\n      if (item.btn) this.activateControls(key, item.btn);\n    });\n\n  }\n  activateControls(key, btns) {\n    Object.keys(btns).forEach((btn) => {\n      this[this.options.btnprefix + key + btn] = this.getBtn(key, btn);\n    })\n\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/js-my-files.js\n")}}]);
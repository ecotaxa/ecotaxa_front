/*! For license information please see src_modules_js-my-files_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_js-my-files_js"],{"./src/modules/js-my-files.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsMyFiles: () => (/* binding */ JsMyFiles)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\n\nconst accept = '.tsv,.png,.jpg, .jpeg,.zip,.gz,.7z,.bz2';\nconst localcss = {\n  mright: 'mr-4',\n}\nconst dirseparator = \"/\";\nclass JsMyFiles {\n  done = true;\n  jsDirToZip = null;\n  counters = {};\n  _events = {};\n  eventnames = {\n    complete: 'complete',\n    error: 'error',\n  }\n  constructor(container, options = {}) {\n    if (!container.jsmyfiles) {\n      container = (container instanceof HTMLElement) ? container : document.querySelector(container);\n      if (!container) return;\n      (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dom_purify)(container, 'dataset');\n      this.container = container;\n      console.log(\"/gui/files/list\")\n      const defaultOptions = {\n\n        url: \"/gui/files/list\",\n        compress: {\n          label: 'compress'\n        },\n        controls: {\n          scan: {\n            display: {\n              counter: 'counter',\n              size: 'size',\n            }\n          },\n          zip: {\n            btn: {\n              zip: 'makezip',\n              zipped: 'makezipped'\n            },\n            display: {\n              size: 'sizezipped',\n              counter: 'counterzipped',\n            }\n          },\n\n        },\n        upload: {\n          label: 'upload'\n        },\n        btnprefix: 'btn',\n        btnfilelist: null,\n        selector: {\n          doupload: '.target-upload',\n          droptarget: '.droptarget',\n          trigger: '.trigger',\n          entries: '.entries',\n          dirlist: '.dirlist',\n          uploadfile: 'uploadfile',\n          displayresult: 'results',\n        },\n        entrycontrols: {\n          selector: '.entrycontrols',\n          url: 'gui/me/my_files/',\n          controls: [{\n              action: 'newfolder',\n              text: 'new folder',\n              icon: 'icon-folder-plus-sm',\n              typentry: 'entryD'\n            }, {\n              action: 'rename',\n              text: 'rename',\n              icon: 'icon-pencil-sm'\n            },\n            {\n              action: 'delete',\n              text: 'delete',\n              icon: 'icon-trash-sm'\n            },\n          ]\n        },\n        display: {\n          progression: 'display-progression',\n          dropzone: 'dropzone',\n          boxtitle: 'boxtitle',\n          counters: 'counters',\n          sizes: 'sizes',\n          timers: 'timers'\n        },\n\n      };\n      this.options = Object.assign(defaultOptions, options);\n      this.init();\n      container.jsmyfiles = this;\n    }\n    return container.jsmyfiles;\n  }\n  init() {\n    // create dirlist box\n    this.addDropzone();\n    this.addDisplayProgression();\n    this.addDirList();\n    this.initEvents();\n  }\n  initTimer() {\n    this.timer = new Date();\n  }\n  initEvents() {\n    (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.add_custom_events)(this);\n\n    //To be refactored - for steppers )\n    this.on(this.eventnames.processed, async (e) => {\n      if (this.nextaction) await this.nextaction();\n    })\n    // alerts on error\n    this.on(this.eventnames.error, (e) => {\n      console.log('scandir receive error message', e)\n      if (window.alertbox) {\n        window.alertbox.renderAlert({\n          type: window.alertbox.alertconfig.types.error,\n          content: e,\n          inverse: true,\n          dismissible: true\n        });\n      }\n    })\n    window.addEventListener('beforeunload', (e) => {\n      if (!this.done) {\n        e.preventDefault();\n        e.returnValue = (this.options.preventclose) ? this.options.preventclose : `Some work is in progress in this window.\\nAre you sure you want to leave?`;\n      }\n\n\n    });\n  }\n  addDropzone() { //\n    this.dropzone = document.createElement('div');\n    this.dropzone.id = this.options.display.dropzone;\n    this.dropzone.innerHTML = `<input type=\"file\" class=\"hidden\"  name=\"${this.options.selector.uploadfile}\" id=\"${this.options.selector.uploadfile}\">\n            <div class=\"${this.options.selector.droptarget.substr(1)}\">\n            <div class=\"${this.options.display.boxtitle}\"><span class=\"${this.options.selector.trigger.slice(1)}\">${this.container.dataset.textbrowse}</span>  ${this.container.dataset.textdrop}</div>\n          </div>`;\n    this.container.append(this.dropzone);\n    this.setDropTarget(this.dropzone.querySelector(this.options.selector.droptarget));\n    this.container.querySelector(this.options.selector.trigger).addEventListener('click', async (e) => {\n      this.handleBrowse();\n    });\n  }\n  setDropTarget(droptarget) {\n    const dropclass = this.options.selector.droptarget.substr(1);\n    const target_dragover = (e) => {\n      this.handleDragOver(e);\n    }\n    const target_drop = async (e) => {\n      this.handleDrop(e);\n    }\n    // set events and css for new dropzone\n    if (!this.droptarget || this.droptarget != droptarget) {\n      if (this.droptarget) {\n        this.droptarget.removeEventListener('dragover', target_dragover);\n        this.droptarget.removeEventListener('drop', target_drop);\n        this.droptarget.classList.remove(dropclass);\n      }\n      this.droptarget = droptarget;\n      this.droptarget.addEventListener('dragover', target_dragover);\n      this.droptarget.addEventListener('drop', target_drop);\n      this.droptarget.classList.add(dropclass);\n    }\n  }\n  async addDirList(source = null) {\n    let el = this.container.querySelector(this.options.selector.dirlist);\n    console.log('el dirlist', el)\n    if (!el) {\n      el = document.createElement('div');\n      el.classList.add(this.options.selector.dirlist.substr(1));\n      this.container.append(el);\n      this.displaylist = el;\n    }\n    this.serverList();\n  }\n  addDisplayProgression() {\n    // add counters\n    if (this.displayprogression) return;\n    let el = document.getElementById(this.options.display.progression);\n    if (!el) {\n      console.log('counterscreate')\n      el = document.createElement('div');\n      el.id = this.options.display.progression;\n      el.innerHTML = `<div class=\"flex sm:flex-row\"><div class=\"${this.options.display.counters}\"></div><div class=\"${this.options.display.sizes}\"></div><div class=\"${_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.progress}\"></div><div class=\"${this.options.display.timers}\"></div></div>`;\n      this.container.prepend(el);\n      this.displayprogression = el;\n    }\n  }\n  serverList(parent = null, subdir = null, tag = null) {\n    parent = parent ? parent : this.container.querySelector(this.options.selector.dirlist);\n    if (!parent) return;\n    // remove, move\n    const entry_controls = () => {\n      let box = this.container.querySelector(this.options.entrycontrols.selector);\n      if (box === null) {\n        box = document.createElement('div');\n        box.classList.add(this.options.entrycontrols.selector.substr(1));\n        this.options.entrycontrols.controls.forEach(control => {\n          const el = document.createElement('span');\n          if (control.typentry) el.dataset.typentry = control.typentry;\n          if (control.icon) {\n            el.insertAdjacentHTML('afterbegin', `<i class=\"icon ${control.icon}\"></i>`);\n            el.dataset.title = control.text;\n          } else el.textContent = control.text;\n          box.append(el);\n          el.addEventListener('click', async (e) => {\n            if (el.parentElement.classList.contains('entryD') || el.parentElement.classList.contains('entryD')) {\n              const name = (el.parentElement.dataset.name) ? new URLSearchParams({\n                entry: el.parentElement.dataset.name\n              }) : null;\n              if (name === null) return false;\n              const response = await fetch(this.options.entrycontrols.url + control.action + name, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings)());\n              const json = await response.json();\n              if (json.success) {\n                switch (json.action) {\n                  case 'rename':\n                    el.parentElement.textContent = json.name;\n                    break;\n                  case 'delete':\n                    el.parentElement.remove();\n                    break;\n                }\n                return true;\n              } else {\n                console.log('err', json)\n\n              }\n            }\n            return false;\n          });\n        });\n        box.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n        this.container.append(box);\n      }\n      return box;\n    }\n    const entrycontrols = entry_controls();\n    const attach_controls = (el, typentry = null) => {\n      if (!el.dataset.name) return false;\n      console.log('entrycontrols parent', entrycontrols.parentElement)\n      entrycontrols.parentElement.classList.remove('has-controls');\n      el.insertBefore(entrycontrols, el.firstElementChild);\n      entrycontrols.querySelectorAll('[data-typentry]').forEach(ctrl => {\n        if (!ctrl.dataset.typentry || typentry === ctrl.dataset.typentry) ctrl.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n        else ctrl.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n      });\n      el.classList.add('has-controls');\n      entrycontrols.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n\n    }\n    parent.classList.add('wait');\n    const el = parent.querySelector(this.options.selector.entries);\n    if (el) el.remove();\n    tag = (tag) ? ((tag === 'select') ? 'optiongroup' : tag) : 'ul';\n    const subtag = (tag === 'ul') ? 'li' : 'option';\n    fetch(this.options.url + ((subdir) ? subdir : ''), (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings)()).then(response => response.json()).then(async json => {\n      if (json.entries && json.entries.length) {\n        if (parent.dataset.label) parent.insertAdjacentHTML('afterbegin', `<label>${parent.dataset.label}</label>`);\n        let html = [`<${tag} class=\"${this.options.selector.entries.slice(1)}\">`],\n          files = [],\n          directories = [],\n          entries = json.entries;\n        while (entries.length > 0) {\n          const entry = entries.shift();\n          if (entry.type === 'F') files.push(entry);\n          else directories.push(entry);\n        };\n        files.sort((a, b) => (a.name < b.name));\n        directories.sort((a, b) => (a.name < b.name));\n        [directories, files].forEach(entries => {\n          entries.forEach((entry) => {\n            const ext = entry.name.split('.').pop();\n            const entrydetail = `<span class=\"entry${entry.type}\"><i class=\"icon p-[0.125rem] icon-${((entry.type === \"D\") ? 'folder-sm' : ((_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.filter_files.images.split(',').indexOf(ext)>=0)?'image-sm':'document-sm'))} align-text-bottom mb-0.5 mr-0.5\"></i>${entry.name}</span>`;\n            html.push(`<${subtag} ${(entry.type==='D')?`draggable=\"true\"`:``} data-name=\"${entry.name}\" ${(tag==='select')?` class=\"entry${entry.type}\"`:``}>${entrydetail}`);\n            html.push(`</${subtag}>`);\n          });\n        });\n        html.push(`</${tag}>`);\n        parent.insertAdjacentHTML('beforeend', html.join(``));\n        parent.querySelectorAll('.entryF').forEach(file => {\n          file.addEventListener('click', (e) => {\n            e.stopImmediatePropagation();\n            attach_controls(file.parentElement);\n            this.detachDropzone();\n          });\n        });\n        parent.querySelectorAll('.entryD').forEach(dir => {\n          dir.addEventListener('click', (e) => {\n            e.stopImmediatePropagation();\n            const dirlist = dir.parentElement;\n            dirlist.classList.toggle('on');\n            const ico = e.currentTarget.querySelector('i.icon');\n            if (ico) {\n              ico.classList.toggle('icon-folder-sm');\n              ico.classList.toggle('icon-folder-open-sm');\n            }\n            if (dirlist.classList.contains('on')) {\n              console.log('is on', dirlist)\n              if (!dirlist.dataset.load) {\n                this.serverList(dirlist, ((subdir) ? subdir + '/' : '/') + dirlist.dataset.name, tag);\n\n              }\n            }\n          });\n\n        });\n\n      }\n      await this.addUploadDialog((subdir === null) ? this.container : parent);\n      parent.classList.remove('wait');\n      parent.dataset.loaded = true;\n      parent.classList.add('on');\n      if (subdir) {\n        console.log('subdir attach', parent);\n        attach_controls(parent, 'entryD');\n        this.setDropTarget(parent);\n      }\n    });\n\n  }\n\n  attachDropzone(target) {\n    if (this.dropzone.dataset.enabled) {\n      this.targetdir = target;\n      target.append(this.dropzone);\n    }\n  }\n  detachDropzone() {\n    if (this.dropzone.dataset.enabled) {\n      this.targetdir = null;\n      this.container.append(this.dropzone);\n    }\n  }\n\n  openDirDialog(accept, callback) {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.directory = true;\n    input.multiple = true;\n    input.webkitdirectory = true;\n    input.allowdirs = true;\n    input.accept = accept;\n    input.addEventListener(\"change\", callback);\n    input.dispatchEvent(new MouseEvent(\"click\"));\n  }\n  handleDragOver(e) {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n  // browse\n  async handleBrowse() {\n    this.initTimer();\n    this.openDirDialog(accept, async (e) => {\n      const files = e.target.files;\n      this.toggleCounters(true);\n      await this.jsDirToZip.scanFiles(files);\n    });\n  }\n  // or drag&drop\n  async handleDrop(e) {\n    let dataTransfer;\n    if (e.dataTransfer) {\n      e.preventDefault();\n      dataTransfer = e.dataTransfer;\n    } else dataTransfer = e;\n    this.done = false;\n    this.initTimer();\n    const items = [...((dataTransfer.items) ? dataTransfer.items : dataTransfer.files)];\n    if (items.length) {\n      this.enableDropzone(false);\n      await items.forEach(async item => {\n        if (item.kind === \"file\") {\n          item = await item.webkitGetAsEntry();\n          this.toggleCounters(true);\n          await this.readEntry(item);\n        }\n      })\n    }\n  }\n  showComplete() {\n    this.timer = (new Date() - this.timer) / 1000;\n    console.log('item-------------------------------------' + parseInt(this.timer / 60) + ' --- ' + (\n      this.timer - (parseInt(this.timer / 60) * 60)));\n    this.enableDropzone();\n  }\n\n  stopOnError(err) {\n    console.log('err', err);\n  }\n\n  enableDropzone(enable = true, destroy = false) {\n    if (destroy) this.dropzone.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    if (enable) this.dropzone.dataset.enabled = true;\n    else delete this.dropzone.dataset.enabled;\n\n  }\n\n  addConsoleMessage(message) {\n    //message {message:, parent:}\n    const tag = 'p';\n    let el = message.parent.querySelector('.' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.console);\n    if (el === null) {\n      el = document.createElement('div');\n      el.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.console);\n      message.parent.prepend(el);\n    }\n    if (message.id) {\n      const msg = el.querySelector(`${tag}[data-id=\"${message.id}\"]`);\n      if (msg) msg.innerHTML = message.content;\n      else el.insertAdjacentHTML('beforeend', `<${tag} data-id=\"${message.id}\">${message.content}</${tag}>`);\n    } else el.insertAdjacentHTML('beforeend', `<${tag}>${message.content}</${tag}>`);\n\n  }\n\n  async addUploadDialog(item) {\n    item = (item) ? item : this.container;\n    if (this.options.controls.scan) {\n      this.enableDropzone(true);\n      this.attachDropzone(item);\n      if (this.options.controls.zip) {\n        const {\n          JsDirToZip\n        } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_fflate_esm_browser_js\"), __webpack_require__.e(\"src_modules_files_js-dirtozip_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ../modules/files/js-dirtozip.js */ \"./src/modules/files/js-dirtozip.js\"));\n        this.jsDirToZip = new JsDirToZip();\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.ready, (e) => {\n          console.log('ready')\n          this.initControls();\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.message, async (e) => {\n          switch (e.name) {\n            case 'console':\n              this.addConsoleMessage({\n                id: (e.id) ? e.id : null,\n                content: e.message,\n                parent: (e.parent) ? item : this.container\n              });\n              break;\n            case window.alertbox.alertconfig.types.error:\n            case window.alertbox.alertconfig.types.success:\n            case window.alertbox.alertconfig.types.danger:\n            case window.alertbox.alertconfig.types.info:\n              window.alertbox.renderAlert({\n                type: e.name,\n                content: e.message,\n                dismissible: true,\n                inverse: false\n              });\n              console.log('error', e);\n              break;\n            default:\n              console.log('message', e);\n              break;\n          }\n        })\n\n\n        const self = this;\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.ready, (e) => {\n          self.showControl(this.jsDirToZip.eventnames.ready);\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.counter, (e) => {\n          self.fileCounter(e.name, e.filepath, e.size);\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.complete, (e) => {\n          if (!e || !e.name) {\n            console.log('no emit complete name');\n            return;\n          }\n          self.showControl(e.name, ((e.hasOwnProperty('bigfile') && e.bigfile) ? 'zipped' : 'zip'), (e.hasOwnProperty('part')) ? e.part : ((e.hasOwnProperty('bigfile')) ? e.bigfile : null));\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.pending, (e) => {\n          self.showControl(this.jsDirToZip.eventnames.pending, ((e && e.hasOwnProperty('bigfile') && e.bigfile) ? 'zipped' : 'zip'));\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.gzip, (e) => {\n          console.log('gzipped', e)\n          self.showControl(this.jsDirToZip.eventnames.gzip, 'zipped', e);\n        });\n        this.jsDirToZip.on(this.jsDirToZip.eventnames.terminate, (e) => {\n          console.log('terminate', e)\n          self.showControl(this.jsDirToZip.eventnames.terminate, ((e && e.hasOwnProperty('bigfile') && e.bigfile) ? 'zipped' : 'zip'));\n        });\n      }\n\n    }\n\n  }\n  async readEntry(entry) {\n    await this.jsDirToZip.scanHandle(entry);\n  }\n  getCurrentDirPath() {\n    if (this.targetdir === null) return '';\n    const current_path = (el, dirs = []) => {\n\n      if (el != null) {\n        dirs.push(el.dataset.name);\n        el = el.closest('.entryD');\n        if (el !== null) {\n          el = el.parentElement;\n          if (el !== null && el.dataset.name) current_path(el, dirs);\n        }\n      }\n      return dirs;\n    }\n    const dirs = current_path(this.targetdir);\n    return dirs.join(dirseparator);\n  }\n\n  async addFilesStore(name, callback) {\n    name = (name) ? name : this.options.dbname;\n    if (!this.jsFilesStore) {\n      const {\n        JsFilesStore\n      } = await __webpack_require__.e(/*! import() */ \"src_modules_files_js-filesystem_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/files/js-filesystem.js */ \"./src/modules/files/js-filesystem.js\"));\n      this.jsFilesStore = new JsFilesStore(null, callback);\n      this.displayFiles();\n    }\n    if (callback) await callback();\n  }\n  displayFiles() {\n    this.jsFilesStore.getItems('local');\n  }\n\n  fileCounter(item, filepath, size = null) {\n    const counters = this.counters[item];\n    counters.counter++;\n    if (size !== null) counters.size += parseInt(size);\n    counters.display.counter.textContent = counters.counter;\n    if (counters.display.size) counters.display.size.textContent = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.format_bytes)(counters.size);\n    this.jsDirToZip.quotaEstimate();\n  }\n\n  resetCounter(item) {\n    const counters = this.counters[item];\n    ['counter', 'size'].forEach(el => {\n      counters.display[el].textContent = 0;\n    });\n    this.toggleCounters(false);\n  }\n\n  toggleCounters(show = true) {\n    const el = document.getElementById(this.options.display.progression);\n    if (!el) return;\n    if (show) el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    else el.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n  }\n\n  initFileCounter(item, opts, i) {\n    const sep = (i) ? ` / ` : ``;\n    let counter = 0;\n    let counterdisplay = null;\n    let size = 0;\n    let sizedisplay = null;\n    // create dom display elements\n\n\n    let boxcounters = document.getElementById(this.options.display.progression);\n    const itemopts = {\n      display: {},\n\n    };\n    Object.entries(opts).forEach(([k, val]) => {\n      const cl = k + 's';\n      const txt = {\n        counter: ' read',\n        size: ' read',\n        counterzipped: ' compressed',\n        sizezipped: ' compressed'\n      }\n      let elinsert = boxcounters.querySelector('.' + cl);\n      if (!elinsert) elinsert = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('div', {\n        class: cl\n      }, boxcounters, ``);\n      let el = elinsert.querySelector('.' + val);\n      if (!el) {\n        el = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('span', {\n          class: val,\n        }, elinsert);\n        if (txt.hasOwnProperty(val)) elinsert.append(document.createTextNode(txt[val]));\n      } else this.resetCounter(item);\n      itemopts.display[k] = el;\n      itemopts[k] = 0;\n    });\n\n    this.counters = { ...this.counters,\n      ...{\n        [item]: itemopts\n      }\n    };\n  }\n\n  showControl(action, target = 'zip', opts = null) {\n    let message, text = null;\n    // 'zip' ---only btn for zip actions for the moment\n    const btn = this[this.options.btnprefix + 'zip' + target];\n    if (!btn) return;\n    btn.removeAttribute(\"disabled\");\n    switch (action) {\n      case this.jsDirToZip.eventnames.ready:\n        if (btn.dataset.message) delete btn.dataset.message;\n        btn.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n        this.initControls();\n        break;\n      case this.jsDirToZip.eventnames.endzip:\n        const part = opts;\n        if (!part) this.showComplete();\n        btn.textContent = `Close zip file` + ((part) ? part : ``);\n        btn.title = (part) ? `Your file is too big - you have to send this part before continuing to process the directory` : `Click to end zip file`;\n        message = {\n          name: this.jsDirToZip.eventnames.endzip,\n          part: part,\n          bigfile: (target !== 'zip'),\n        };\n        if (part) message[\"part\"] = part;\n        btn.dataset.message = JSON.stringify(message);\n        break;\n      case this.jsDirToZip.eventnames.bigfile:\n        btn.textContent = `Upload big File separately`;\n        message = {\n          name: this.jsDirToZip.eventnames.bigfile,\n          path: this.getCurrentDirPath(),\n          bigfile: true\n        };\n\n        const filepath = opts;\n        if (filepath) message[\"path\"] = filepath;\n        btn.dataset.message = JSON.stringify(message);\n        console.log('bigfile', message)\n        break;\n      case this.jsDirToZip.eventnames.sendfile:\n        message = {\n          name: this.jsDirToZip.eventnames.sendfile,\n          path: this.getCurrentDirPath(),\n          bigfile: opts,\n        };\n        btn.textContent = `Upload zip file`;\n        if (message.bigfile !== null) btn.textContent += ` ` + opts;\n        btn.dataset.message = JSON.stringify(message);\n        console.log('messageup', message)\n        break;\n      case this.jsDirToZip.eventnames.pending:\n        btn.textContent = ` Pending ` + ((target !== 'zip') ? ' big file' : '');\n        btn.dataset.message = '';\n        btn.setAttribute(\"disabled\", true);\n        break;\n      case this.jsDirToZip.eventnames.gzip:\n        text = `compressing separately big file :${(opts && opts.bigfile)?opts.bigfile:``} ${(opts && opts.size)?opts.size:``}`;\n        btn.textContent = text;\n        btn.setAttribute(\"disabled\", true);\n        console.log('optsbigfl', opts)\n        btn.dataset.message = JSON.stringify({\n          name: this.jsDirToZip.eventnames.endzip,\n          path: (opts.hasOwnProperty(\"bigfile\")) ? opts.bigfile : e.path,\n          bigfile: (opts.hasOwnProperty(\"bigfile\") && opts.bigfile !== \"\"),\n        });\n        break;\n      case this.jsDirToZip.eventnames.terminate:\n        console.log('terminate ' + ((target !== 'zip') ? 'bigfile' : ''));\n        this.serverList(this.targetdir);\n        //default:\n        btn.dataset.message = JSON.stringify({\n          name: 'ready',\n          bigfile: (target !== 'zip')\n        });\n        btn.textContent = `End!! ${ ((target !== 'zip') ? 'bigfile' : '')}`;\n\n        break;\n    }\n    if (btn.dataset.message) btn.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n  }\n  emitToZip(btn) {\n    const message = (btn.dataset.message) ? JSON.parse(btn.dataset.message) : null;\n    if (!message) btn.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    if (message) {\n      if (message.name) {\n        const name = message.name;\n        delete message.name;\n        console.log('emit ----' + name, message)\n        this.jsDirToZip.emit(name, message);\n      }\n    }\n    if (name === this.jsDirToZip.eventnames.sendfile) btn.disabled = true;\n  }\n  getBtn(item, target) {\n    const btnkey = this.options.btnprefix + item + target;\n    if (this[btnkey]) return this[btnkey];\n    const display = this.options.controls[item].btn[target];\n    const btn = document.getElementById(display);\n    const parent = (this.targetdir) ? this.targetdir : this.displayprogression;\n    if (!btn) {\n      parent.insertAdjacentHTML('beforeend', `<button id=\"${display}\" class=\"button ${display} ${localcss.mright} ${_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide}\"></button>`);\n      this[btnkey] = document.getElementById(display);\n      this[btnkey].addEventListener('click', async (e) => {\n        e.stopImmediatePropagation();\n        this.emitToZip(e.currentTarget);\n      });\n    } else parent.append(btn);\n    return this[btnkey];\n  }\n\n  initControls(item = null) {\n    Object.entries(this.options.controls).forEach(([key, control], i) => {\n      this.initFileCounter(key, control.display, i);\n      if (control.btn) this.activateControls(key, control.btn);\n    });\n  }\n  activateControls(key, btns) {\n    Object.keys(btns).forEach((btn) => {\n      this[this.options.btnprefix + key + btn] = this.getBtn(key, btn);\n    })\n\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/js-my-files.js\n")}}]);
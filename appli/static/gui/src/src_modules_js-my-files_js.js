/*! For license information please see src_modules_js-my-files_js.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_js-my-files_js"],{"./src/modules/files/js-dirlist.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsDirList: () => (/* binding */ JsDirList),\n/* harmony export */   eventEntry: () => (/* binding */ eventEntry)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\nconst filter_files = {\n  images: \"png,jpeg,jpg,gif\",\n  tsv: \"txt,tsv,zip, gzip,gz\"\n}\n\nconst eventEntry = new CustomEvent('eventEntry', {\n  detail: () => {\n    console.log('customevent', undefined.entry)\n  },\n})\nconst defaultOptions = {\n  api_parameters: {\n    entry: 'entry',\n    dest: 'dest'\n  },\n  url: '/gui/files',\n  controls: {\n    scan: {\n      display: {\n        counter: 'counter',\n        size: 'size',\n      }\n    },\n    zip: {\n      btn: {\n        zip: 'makezip',\n        zipped: 'makezipped'\n      },\n      display: {\n        size: 'sizezipped',\n        counter: 'counterzipped',\n      }\n    },\n\n  },\n  upload: {\n    label: 'upload'\n  },\n  btnprefix: 'btn',\n  btnfilelist: null,\n  entry: {\n    selector: '[data-name]',\n\n    tags: {\n      tag: 'ul',\n      subtag: 'li',\n      label: 'span'\n    },\n    selectors: {\n      entries: '.entries'\n    },\n    draggable: true,\n    prefix: `entry`,\n    type: {\n      root: \"R\",\n      trash: \"T\",\n      directory: \"D\",\n      file: \"F\",\n      trashed: \"X\",\n    },\n    specialdirs: [\"R\", \"T\"],\n    trash_dir_name: 'trash.',\n    css: {\n      on: 'on',\n      entryF: 'entryF',\n      entryD: 'entryD',\n      entryR: 'entryR',\n      entryT: 'entryT',\n      editable: 'editable',\n      dragging: 'dragging',\n      dragover: 'dragover',\n      dragitem: 'dragitem'\n    },\n    icons: {\n      image: 'img',\n      document: 'doc'\n    },\n  },\n  entrycontrols: {\n    selectors: {\n      typentries: '[data-typentries]',\n      hascontrols: '.has-controls',\n    },\n    controls: {\n      list: {\n        action: 'list',\n        typentries: ['D', 'R', 'T']\n      },\n      create: {\n        action: 'create',\n        text: 'new folder',\n        icon: 'icon-folder-plus-sm',\n        typentries: ['D', 'R']\n      },\n      remove: {\n        action: 'remove',\n        text: 'delete',\n        icon: 'icon-trash-sm',\n        typentries: ['D', 'F', 'X']\n      },\n      move: {\n        action: 'move',\n        typentries: ['D', 'F']\n      },\n      rename: {\n        action: 'rename',\n        trigger: 'dblclick',\n        typentries: ['D', 'F']\n      }\n    },\n    css: {\n      entrycontrols: 'entrycontrols',\n      entries: '.entries',\n    }\n  },\n  selectors: {\n    doupload: '.target-upload',\n    droptarget: '.droptarget',\n    dirlist: '.dirlist',\n    uploadfile: 'uploadfile',\n    displayresult: 'results',\n    trigger: '.trigger',\n  },\n}\nclass Entry {\n  _events;\n  eventnames;\n  name;\n  type;\n  label;\n  entries = [];\n  options = {\n    selector: '[data-name]',\n    tags: {\n      tag: 'ul',\n      subtag: 'li',\n      label: 'span'\n    },\n    selectors: {\n      entries: '.entries'\n    },\n    css: {\n      on: 'on',\n    },\n    draggable: true,\n    prefix: `entry`,\n  };\n\n  constructor(entry, options = {}) {\n    this.name = entry.name;\n    this.type = entry.type;\n    this.root = options.root;\n    this.parent = (options.parent) ? options.parent : null;\n    this.options = Object.assign(this.options, defaultOptions);\n    this.options = Object.assign(this.options, options);\n    this.label = (options.label) ? options.label : null;\n    this.init(entry);\n    return this;\n  }\n  init(entry) {\n    //\n    (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.add_custom_events)(this);\n    const dataset = {\n      name: this.name,\n      type: this.type\n    }\n    if (this.label !== null) dataset.label = this.label;\n    const el = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)(this.options.tags.subtag, {\n      draggable: this.options.draggable,\n      dataset: dataset,\n    });\n    const cl = (this.options.class) ? this.options.class : [];\n    cl.unshift(`${this.options.prefix}${this.type}`);\n    this.label = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)(this.options.tags.label, {\n      class: cl,\n      text: (entry.label) ? entry.label : entry.name\n    }, el);\n    this.container = el;\n    this.initEvents();\n  }\n  initEvents() {\n    Object.entries(this.options.actions).forEach(([key, action]) => {\n      this.on(action, (e) => {\n        this[key](e);\n      });\n    });\n  }\n  getParent() {\n    return this.parent;\n  }\n  getLabelElement() {\n    return this.label;\n  }\n  getParentElement() {\n    return this.container.parentElement.closest(this.options.selector);\n  }\n\n  getEntries() {\n    return this.entries();\n  }\n  getEntriesElement(create = false) {\n    let entries = this.container.querySelector(this.options.selectors.entries);\n    if (create && entries === null) {\n      return (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)(this.options.tags.tag, {\n        class: this.options.selectors.entries.substr(1)\n      }, this.container);\n    }\n    return entries;\n  }\n\n  appendEntry(entry) {\n    if (entry.parent) {\n      console.log('this', entry)\n      const n = entry.parent.entries.indexOf(entry);\n      delete entry.parent.entries[n];\n    }\n    entry.parent = this;\n    this.entries.push(entry);\n    const parent = this.getEntriesElement(true);\n    parent.append(entry.container);\n    return entry;\n  }\n  createEntry(entry) {\n    const new_entry = new Entry(entry);\n    this.appendEntry(new_entry);\n  }\n  //\n  createListEntries(listentries) {\n    const direntry = this.getEntriesElement(true);\n    listentries.forEach(entries => {\n      entries.forEach((entry) => {\n        const new_entry = this.createEntry(entry);\n\n      });\n    });\n  }\n\n  isOn() {\n    return this.active;\n\n  }\n  toggleOn() {\n    this.active = !(this.active);\n    this.container.classList.toggle(this.options.css.on);\n  }\n  setOff() {\n    this.active = false;\n    this.container.classList.remove(this.options.css.on);\n  }\n  emitEvent(action = null, ev = null) {\n    const self = this;\n    const detail = {\n      entry: self,\n    }\n    if (action) detail.action = action;\n    if (ev) detail.event = ev;\n    eventEntry.initCustomEvent('eventEntry', true, true, detail);\n    window.dispatchEvent(eventEntry);\n  }\n  moveHandlers() {\n    return [{\n      name: 'dragover',\n      func: (e) => {\n        this.handleDragOver(e);\n      }\n    }, {\n      name: 'drop',\n      func: (e) => {\n        this.handleDrop(e);\n      }\n    }];\n  }\n  dropHandlers() {\n    return [{\n      name: 'dragover',\n      func: (e) => {\n        this.handleDragOver(e);\n      }\n    }, {\n      name: 'drop',\n      func: (e) => {\n        this.handleDrop(e);\n      }\n    }];\n  }\n  handleDrop(e) {\n\n  }\n  addListeners() {\n    let func = (e) => {\n      e.stopImmediatePropagation();\n      this.dirControls(() => {\n        this.emitEvent(this.eventnames.attach);\n      });\n    };\n    let listeners = []\n    if ([this.options.type.root, this.options.type.trash].indexOf(this.type) < 0) {\n      if (this.isInTrash()) console.log(' isintrash ' + this.name, this.isInTrash())\n      listeners = this.moveHandlers();\n      if (this.type === this.options.type.file) {\n        func = (e) => {\n          e.stopImmediatePropagation();\n          this.toggleOn();\n          this.emitEvent();\n        }\n      } else if (this.isInTrash()) {\n        this.type = this.options.type.trashed;\n      } else listeners = listeners.concat(this.dropHandlers());\n      this.listenRename();\n    }\n    listeners.unshift({\n      name: 'click',\n      target: 'label',\n      func: func\n    });\n    for (const listener of listeners) {\n      const el = (listener.target === 'label') ? this.getLabelElement() : this.container;\n      el.addEventListener(listener.name, listener.func);\n    }\n  }\n  removeListeners(listeners) {\n    for (const listener in listeners) {\n      const el = (listener.target === 'label') ? this.getLabelElement() : this.container;\n      el.removeEventListener(listener.label, listener.func);\n    }\n  }\n  destroy() {\n    this.container.remove();\n  }\n\n  handleDragStart(e) {\n    this.container.classList.add(this.options.css.dragging);\n    e.dataTransfer.effectAllowed = 'move';\n    this.emitEvent('dragstart');\n  }\n  handleDragOver(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    this.emitEvent('dragover');\n    return;\n  }\n  handleDragEnd(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    if (this.container.classList.contains(this.options.css.dragging)) this.container.classList.remove(this.options.css.dragging);\n    this.emitEvent('dragend');\n  }\n  resetDragOver() {\n    document.querySelectorAll('.' + this.options.css.dragover).forEach(el => {\n      el.classList.remove(this.options.css.dragover);\n    });\n  }\n  handleDrop(e) {\n    /***/\n    this.emitEvent('drop', e);\n  }\n\n  unMove() {\n    if (this.from) {\n      this.move(this.from);\n      this.from.container.append(this);\n      this.from = null;\n    }\n  }\n}\n\nclass EntryAction extends Entry {\n  eventnames = {\n    attach: 'attach',\n    detach: 'detach',\n    istrashdir: 'istrashdir',\n    trashed: 'trashed',\n  }\n  isTrashDir(name = null) {\n    return ((name === null) ? this.name : name).indexOf(this.options.trash_dir_name) === 0;\n  }\n  isInTrash(path = null) {\n    path = (path === null) ? this.getCurrentDirPath() : path;\n    if (path === null) (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.stop_on_error)('path_not_found');\n    path = path.split(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator);\n    return (path.length > 1 && path[0].indexOf(this.options.trash_dir_name)) === 0;\n  }\n\n  setWait() {\n    this.loaded = this.container.dataset.loaded = false;\n    this.container.classList.add('wait');\n  }\n  setLoaded() {\n    this.container.classList.remove('wait');\n    this.loaded = this.container.dataset.loaded = true;\n  }\n\n  dirControls(callback = null) {\n    const el = this.container;\n    if (el.dataset.action === \"create\") return;\n    this.toggleOn();\n    if (this.isOn()) this.dirActivate(callback).then(() => {\n      this.emitEvent();\n    });\n\n  }\n\n  async dirActivate(callback = null) {\n    if (!this.loaded) this.list().then(() => {\n      if (callback) callback(this);\n    });\n    else if (callback) callback(this);\n  }\n\n  getCurrentDirPath() {\n    const current_path = (entry, dirs = []) => {\n      if (entry.name) {\n        dirs.push(entry.name);\n        entry = entry.getParent();\n        if (entry !== null) return current_path(entry, dirs);\n      }\n      return dirs;\n    }\n    let dirs = current_path(this);\n    if (dirs.length > 1) dirs = dirs.reverse();\n    return dirs.join(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator);\n  }\n\n  async fetchAction(action, callback = null, callback_error = null) {\n    const api_parameters = this.options.api_parameters;\n    const label = this.getLabelElement();\n    let entrypath = this.getCurrentDirPath();\n    if (entrypath === '') return;\n    const data = new FormData();\n    data.append(api_parameters.entry, entrypath);\n    switch (action) {\n      case this.options.actions.create:\n        if (label === null) return;\n        entrypath = entrypath + _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator + label.textContent;\n        if (entrypath.trim() !== \"\") data.append(api_parameters.entry, entrypath);\n        break;\n      case this.options.actions.move:\n        // get new path - append item to drop directory\n        if (callback !== null) {\n          let destpath = callback();\n          callback = null;\n          if (destpath === entrypath) {\n            console.log('dest = entry', destpath);\n            return;\n          }\n          data.append(api_parameters.dest, destpath);\n          console.log(entrypath + ' destmove ', destpath)\n        } else return;\n        break;\n      case this.options.actions.rename:\n        const destpath = entrypath.split(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator);\n        destpath[destpath.length - 1] = label.textContent;\n        if (destpath.join(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator) === entrypath) return;\n        data.append(api_parameters.dest, destpath.join(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator));\n        break;\n    }\n    const response = await fetch(this.options.url + _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.urlseparator + action, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings)({\n      method: \"POST\",\n      body: data\n    }));\n    const json = await response.json();\n    console.log('responsejson', json)\n    if (json.status === 200) {\n      if (callback) callback(json.message);\n      return true;\n    } else {\n      if (callback_error) callback_error(json);\n      else (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.stop_on_error)(json);\n    }\n  }\n  listenRename(evt = 'dblclick') {\n    const entry = this;\n    const label = entry.getLabelElement();\n    label.addEventListener(evt, (e) => {\n      const send_rename = async (e) => {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          label.contentEditable = false;\n          entry.container.draggable = (this.options.specialdirs.indexOf(entry.type) < 0);\n          const callback = (txt) => {\n            label.classList.remove(entry.options.css.editable);\n            if (txt === \"\") window.alertbox.addItemMessage(label, {\n              type: 'error',\n              content: window.alertbox.i18nmessages.exists,\n              duration: 2000\n            });\n            else txt = txt.split(_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator).pop();\n            label.removeEventListener('keydown', send_rename);\n            label.textContent = txt;\n            if (entry.type === entry.options.type.directory) entry.dirControls();\n            delete entry.container.dataset.action;\n          }\n          const action = (entry.container.dataset.action) ? entry.container.dataset.action : entry.options.actions.rename;\n          console.log('action entry_rename ' + action, entry.container)\n          await entry.fetchAction(action, callback);\n        }\n      }\n      label.contentEditable = true;\n      entry.container.draggable = false;\n      label.classList.add(entry.options.css.editable);\n      label.addEventListener('keydown', send_rename);\n    });\n  }\n\n  createEntry(entry) {\n    const ext = entry.name.split('.').pop();\n    const options = this.options;\n    options.draggable = (options.specialdirs.indexOf(entry.type) < 0);\n    options.class = [];\n    if (this.isTrashDir(entry.name)) entry.type = this.options.type.trash;\n    const cl = (entry.type === options.type.file) ? (filter_files.images.split(',').indexOf(ext) >= 0) ? options.icons.image : options.icons.document : null;\n    if (cl !== null) options.class.push(cl);\n    const new_entry = new EntryAction(entry, options);\n    if (entry.type === this.options.type.trash) new_entry.emitEvent(this.eventnames.istrashdir);\n    this.appendEntry(new_entry);\n    new_entry.addListeners();\n    return new_entry;\n  }\n\n  async list() {\n    if (this.type === this.options.type.file) return;\n    const tag = this.options.tags.tag;\n    const subtag = this.options.tags.subtag;\n    const subdir = (this.name) ? this.getCurrentDirPath() : null;\n    this.setWait();\n    const el = this.getEntriesElement();\n    if (el) el.remove();\n    fetch(this.options.url + _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.urlseparator + this.options.actions.list + ((subdir) ? _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dirseparator + subdir : ''), (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.fetchSettings)()).then(response => response.json()).then(async json => {\n      if (json.entries && json.entries.length) {\n        let files = [],\n          directories = [],\n          entries = json.entries;\n        while (entries.length > 0) {\n          const entry = entries.shift();\n          if (entry.type === this.options.type.file) files.push(entry);\n          else directories.push(entry);\n        };\n        files.sort((a, b) => (a.name < b.name));\n        directories.sort((a, b) => (a.name < b.name));\n        this.createListEntries([directories, files]);\n      }\n      this.setLoaded();\n    });\n  }\n  remove() {\n    if (this.isTrashDir()) return;\n    const from = this.getCurrentDirPath();\n    this.fetchAction(this.options.actions.remove).then(ret => {\n      console.log('remove ', this)\n      this.from = from;\n      this.removeListeners(this.dropHandlers());\n      this.setOff();\n      this.container.animate({\n        transform: \"translateX(-100%) scale(0)\"\n      }, {\n        duration: 1000\n      });\n      setTimeout(() => {\n        if (this.isInTrash(this.from)) this.destroy();\n        else this.emitEvent(this.eventnames.trashed);\n      }, 1000);\n\n    });\n  }\n  create() {\n    const new_entry = this.createEntry({\n      type: 'D',\n      name: 'NewFolder'\n    });\n    new_entry.container.dataset.action = this.options.actions.create;\n    new_entry.label.dispatchEvent(new Event('dblclick'));\n  }\n  rename() {\n    if (this.isTrashDir()) return;\n    this.fetchAction(this.options.actions.rename).then(() => {\n      console.log('renamed', this)\n    });\n  }\n\n  move(dest) {\n    if (this.isTrashDir()) return;\n    const from = this.getCurrentDirPath();\n\n    this.fetchAction(this.options.actions.move, () => {\n      return dest.getCurrentDirPath();\n    }).then(() => {\n      this.from = from;\n      const entries = dest.getEntriesElement(true);\n      entries.append(this.container);\n    }).catch(err => {});\n  }\n}\n\nclass JsEntryControls {\n  _events = {};\n  eventnames = {\n    control: 'control',\n    error: 'error',\n  }\n  options = defaultOptions.entrycontrols;\n  box;\n  container;\n  entry = null;\n  constructor(container = document, options = {}) {\n    if (!container.jsentrycontrols) {\n      this.options = Object.assign(this.options, options);\n      this.container = container;\n      this.entry = null;\n      this.init();\n      container.jsentrycontrols = this;\n    }\n    return container.jsentrycontrols;\n  }\n  init() {\n    (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.add_custom_events)(this);\n    this.box = this.createControls();\n    this.initEvents();\n\n  }\n  createControls() {\n    const box = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('div', {\n      class: [this.options.css.entrycontrols, _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide]\n    });\n    Object.values(this.options.controls).filter(control => (control.icon || control.text)).forEach(control => {\n      const ctrl = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('span', {}, box);\n      if (control.typentries) ctrl.dataset.typentries = control.typentries;\n      if (control.icon) {\n        const icon = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('i', {\n          class: ['icon', control.icon]\n        }, ctrl);\n        ctrl.dataset.title = control.text;\n      } else ctrl.textContent = control.text;\n      //add listener\n      const evt = (control.trigger) ? control.trigger : 'click';\n      const func = (e) => {\n        if (this.entry === null) return;\n        const detail = {\n          callback: () => {\n            console.log('done', control.action);\n          }\n        }\n        this.entry.emit(control.action, detail);\n      }\n      ctrl.addEventListener(evt, func);\n      //\n      control.ctrl = ctrl;\n    });\n    return box;\n  }\n  initEvents() {}\n  detachControls() {\n    if (this.entry === null) return;\n    this.entry.container.classList.remove(this.options.selectors.hascontrols.substr(1));\n    this.box.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    this.box.disabled = true;\n    this.container.append(this.box);\n    this.entry = null;\n  }\n\n  attachControls(entry) {\n    this.detachControls();\n    this.entry = entry;\n    this.entry.container.prepend(this.box);\n    this.entry.container.classList.add(this.options.selectors.hascontrols.substr(1));\n    this.activateControls();\n    this.box.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    delete this.box.disabled;\n  }\n\n  activateControls() {\n    if (this.entry === null) return;\n    // add btns\n    const isintrash = this.entry.isInTrash();\n    Object.values(this.options.controls).filter(control => (control.icon || control.text)).forEach(control => {\n      const ctrl = control.ctrl;\n      const typentries = (ctrl.dataset.typentries) ? ctrl.dataset.typentries.split(',') : [];\n      const type = (isintrash) ? this.entry.options.type.trashed : this.entry.container.dataset.type;\n      if (typentries.indexOf(type) >= 0) {\n        ctrl.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n      } else ctrl.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    });\n    //\n  }\n}\n\nclass JsDirList {\n  _events = {};\n  eventnames = {\n    attach: 'attach',\n    detach: 'detach',\n    action: 'action',\n    complete: 'complete',\n    error: 'error',\n  }\n  options = defaultOptions;\n\n  constructor(parent, options = {}) {\n    if (!parent.jsdirlist) {\n      parent = (parent instanceof HTMLElement) ? parent : document.querySelector(parent);\n      if (!parent) return;\n      this.options = Object.assign(this.options, options);\n      this.options.entry.url = this.options.url;\n      this.container = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)(this.options.entry.tags.tag, {\n        class: this.options.selectors.dirlist.substr(1)\n      }, parent);\n      this.init();\n      this.container.append(this.root.container);\n      parent.jsdirlist = this;\n    }\n    return parent.jsdirlist;\n  }\n\n  init() {\n    (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.add_custom_events)(this);\n    const type = this.options.entry.type.root;\n    const obj = {};\n    this.entrycontrols = (this.options.controls) ? new JsEntryControls(this.container, this.options.entrycontrols) : null;\n    Object.entries(this.options.entrycontrols.controls).forEach(([key, control]) => {\n      obj[key] = control.action;\n    });\n    this.options.entry.actions = obj;\n    this.initEvents();\n    const options = this.options.entry;\n    options.draggable = false;\n    this.root = new EntryAction({\n      type: type,\n      name: '',\n      label: '..',\n      root: this\n    }, options);\n\n    this.root.addListeners();\n\n  }\n  initEvents() {\n    console.log(' init events%%%%%%%%%%%%%%%%%%%%%%%ù)', this.entrycontrols)\n    // events controls on entries\n    const self = this;\n    // alerts on error\n    this.on(this.eventnames.error, (e) => {\n      console.log('dirlist receive error message', e)\n      if (window.alertbox) {\n        window.alertbox.renderAlert({\n          type: window.alertbox.alertconfig.types.error,\n          content: e,\n          inverse: true,\n          dismissible: true\n        });\n      }\n    });\n    window.addEventListener('eventEntry', (e) => {\n      const eventnames = e.detail.entry.eventnames;\n      switch (e.detail.action) {\n        case eventnames.istrashdir:\n          this.trashdir = e.detail.entry;\n          break;\n        case eventnames.trashed:\n          console.log(' trashed from---------', e.detail.entry.from)\n          if (e.detail.entry.isInTrash(e.detail.entry.from)) this.detachControls();\n          else {\n            this.trashdir.appendEntry(e.detail.entry, this.trashdir);\n            e.detail.entry.from = e.detail.entry.getCurrentDirPath();\n            console.log(' new path after trashed from---------', e.detail.entry.from);\n            this.attachControls(e.detail.entry);\n            e.detail.entry.container.classList.add('bg-danger-100');\n          }\n          this.emit(this.eventnames.detach, e.detail);\n          break;\n        case eventnames.detach:\n          this.detachControls();\n        case eventnames.attach:\n          // no upload on trash dir\n          const type = (e.detail.entry.isInTrash()) ? e.detail.entry.options.type.trashed : e.detail.entry.container.dataset.type;\n          if (type === e.detail.entry.options.type.trash) return;\n          if (e.detail.action === eventnames.attach && type === e.detail.entry.options.type.trashed) return;\n          this.emit(this.eventnames[e.detail.action], e.detail);\n          break;\n        case \"dragstart\":\n          this.detachControls();\n          this.dragentry = this.activentry = e.detail.entry;\n          e.detail.entry.container.classList.add(e.detail.entry.options.css.dragging);\n          break;\n        case \"dragover\":\n          if (!this.dragentry) return;\n          if (this.overitem !== e.detail.entry.container) {\n            if (this.overitem) this.overitem.classList.remove(e.detail.entry.options.css.dragover);\n            e.detail.entry.container.classList.add(e.detail.entry.options.css.dragover);\n            this.overitem = e.detail.entry.container;\n          }\n          break;\n        case \"dragend\":\n          this.dragentry = null;\n          if (this.overitem) this.overitem.classList.remove(e.detail.entry.options.css.dragover);\n          this.overitem = null;\n          break;\n        case \"drop\":\n          if (!this.dragentry) {\n            console.log(' drop upload ', e)\n            this.emit(this.eventnames.action, e);\n            return true;\n          } else {\n            console.log(' dragentry drop', e);\n          }\n          e.stopPropagation();\n          const el = this.dragentry.container;\n          const dest_entry = e.detail.entry;\n          dest_entry.resetDragOver();\n          if (this.dragentry !== null) {\n            console.log(\"move file or dir\", this.dragendentry)\n            if (this.dragentry.options.actions.move) {\n              try {\n                this.dragentry.move(dest_entry);\n                parent.append(el);\n              } catch (error) {\n                this.dragentry.unMove();\n              }\n            } else console.log('noactionon drop');\n          } else console.log(' parent===null or dragitem===null or dragitem===parent', this.dragentry)\n          return;\n          break;\n        default:\n          if (e.detail.entry.active) this.attachControls(e.detail.entry);\n          else {\n            this.attachControls(this.root);\n          }\n          break;\n      }\n    });\n  }\n  attachControls(entry) {\n\n    this.detachControls();\n    if (this.entrycontrols) {\n      this.entrycontrols.attachControls(entry);\n    } else this.detachControls();\n    this.activentry = entry;\n  }\n\n  detachControls() {\n    if (this.entrycontrols) this.entrycontrols.attachControls(this.root);\n    this.activentry = this.root;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/files/js-dirlist.js\n")},"./src/modules/js-my-files.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsMyFiles: () => (/* binding */ JsMyFiles)\n/* harmony export */ });\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n/* harmony import */ var _modules_files_js_dirlist_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/files/js-dirlist.js */ \"./src/modules/files/js-dirlist.js\");\n\n\n\n\nconst objaccept = {\n  \"image/*\": [\".png\", \".jpeg\", \".jpg\"],\n  \"text/tab-separated-values\": [\".tsv\"],\n  \"application/zip\": [\".zip\"],\n  \"application/gzip\": [\".gz\"],\n  \"application/x-bzip\": [\".bz\"],\n  \"application/x-bzip2\": [\".bz2\"]\n}\nconst accept = Object.values(objaccept).reduce((a, b) => a.concat(b));\n_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.mright = 'mr-4';\nconst filter_files = {\n  images: \"png,jpeg,jpg,gif\",\n  tsv: \"txt,tsv,zip, gzip,gz\"\n}\nclass JsMyFiles {\n  done = true;\n  jsDirToZip = null;\n  jsDirList = null;\n  trash_dir_name = 'trash.';\n  counters = {};\n  _events = {};\n  eventnames = {\n    complete: 'complete',\n    error: 'error',\n  }\n  constructor(container, options = {}) {\n    if (!container.jsmyfiles) {\n      container = (container instanceof HTMLElement) ? container : document.querySelector(container);\n      if (!container) return;\n      (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.dom_purify)(container, 'dataset');\n      this.container = container;\n      console.log(\"/gui/files/list\")\n      const defaultOptions = {\n        controls: {\n          scan: {\n            display: {\n              counter: 'counter',\n              size: 'size',\n            }\n          },\n          zip: {\n            btn: {\n              zip: 'makezip',\n              zipped: 'makezipped'\n            },\n            display: {\n              size: 'sizezipped',\n              counter: 'counterzipped',\n            }\n          },\n\n        },\n        upload: {\n          label: 'upload'\n        },\n        btnprefix: 'btn',\n        btnfilelist: null,\n        selectors: {\n          droptarget: '.droptarget',\n          trigger: '.trigger',\n          uploadfile: 'uploadfile',\n        },\n        display: {\n          progression: 'display-progression',\n          dropzone: 'dropzone',\n          boxtitle: 'boxtitle',\n          counters: 'counters',\n          sizes: 'sizes',\n          timers: 'timers'\n        },\n\n        css: {\n          dragover: 'dragover'\n        }\n      };\n      this.options = Object.assign(defaultOptions, options);\n      this.options.browse = (container.dataset.browse) ? container.dataset.browse.split(',') : ['directory', 'file'];\n      this.haspicker = (window.showDirectoryPicker);\n      this.options.browse = (container.dataset.browse) ? container.dataset.browse.split(',') : ['directory', 'file'];\n      this.init();\n      container.jsmyfiles = this;\n    }\n    return container.jsmyfiles;\n  }\n  init() {\n    // create dirlist box\n    (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.add_custom_events)(this);\n    this.addDisplayProgression();\n\n    this.addDirList();\n    this.addDropzone();\n    this.initControls();\n    this.initEvents().then(() => {\n      this.resetCounters();\n    });\n  }\n  initTimer() {\n    this.timer = new Date();\n  }\n  async initEvents() {\n    (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.add_custom_events)(this);\n    console.log(' init events%%%%%%%%%%%%%%%%%%%%%%%ù)')\n    //To be refactored - for steppers )\n    this.on(this.eventnames.processed, async (e) => {\n      if (this.nextaction) await this.nextaction();\n    });\n    // alerts on error\n    this.on(this.eventnames.error, (e) => {\n      console.log('scandir receive error message', e)\n      if (window.alertbox) {\n        window.alertbox.renderAlert({\n          type: window.alertbox.alertconfig.types.error,\n          content: e,\n          inverse: true,\n          dismissible: true\n        });\n      }\n    });\n    const self = this;\n    if (this.options.controls.zip) {\n      const {\n        JsDirToZip\n      } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_fflate_esm_browser_js\"), __webpack_require__.e(\"src_modules_files_js-dirtozip_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ../modules/files/js-dirtozip.js */ \"./src/modules/files/js-dirtozip.js\"));\n      this.jsDirToZip = new JsDirToZip();\n      Object.keys(this.jsDirToZip.eventnames).forEach((key) => {\n        this.eventnames[key] = this.jsDirToZip.eventnames[key];\n        this.jsDirToZip.on(key, (e) => {\n          switch (key) {\n            case 'counter':\n              self.fileCounter(e);\n              break;\n            case 'complete':\n              if (!e || !e.name) {\n                console.log('no emit complete name');\n                return;\n              }\n              self.showControl(e.name, e);\n            case 'message':\n              switch (e.name) {\n                case 'console':\n                  this.addConsoleMessage({\n                    id: (e.id) ? e.id : null,\n                    content: e.message,\n                    parent: this.container\n                  });\n                  break;\n                case window.alertbox.alertconfig.types.error:\n                case window.alertbox.alertconfig.types.success:\n                case window.alertbox.alertconfig.types.danger:\n                case window.alertbox.alertconfig.types.info:\n                  window.alertbox.renderAlert({\n                    type: e.name,\n                    content: e.message,\n                    dismissible: true,\n                    inverse: false\n                  });\n                  console.log('error', e);\n                  break;\n                default:\n                  console.log('message', e);\n                  break;\n              }\n              break;\n            case 'terminate':\n              console.log('terminate', e)\n            default:\n              self.showControl(key, e);\n              break;\n          }\n        });\n      });\n\n    }\n    window.addEventListener('beforeunload', (e) => {\n      if (!this.done) {\n        e.preventDefault();\n        e.returnValue = (this.options.preventclose) ? this.options.preventclose : `Some work is in progress in this window.\\nAre you sure you want to leave?`;\n      }\n    });\n  }\n  emitToZip(btn) {\n    const message = (btn.dataset.message) ? JSON.parse(btn.dataset.message) : null;\n    if (!message) btn.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    if (message) {\n      if (message.name) {\n        const name = message.name;\n        delete message.name;\n        console.log('emit ----' + name, message)\n        this.jsDirToZip.emit(name, message);\n      }\n    }\n    if (name === this.eventnames.sendfile) btn.disabled = true;\n  }\n\n  quotaEstimate(obj) {\n    return this.jsDirToZip.quotaEstimate();\n  }\n  scanBrowse(e, options) {\n    return this.jsDirToZip.scanBrowse(e, options);\n\n  }\n  scanHandle(dir, options) {\n    return this.jsDirToZip.scanHandle(dir, options);\n  }\n  async handleBrowse(e) {\n    this.initTimer();\n    this.toggleCounters(true);\n    if (!this.haspicker) e = e.target.files;\n    await this.scanBrowse(e, {\n      accept: accept,\n    });\n  }\n\n  addDropzone() { //\n    this.dropzone = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('div', {\n      id: this.options.display.dropzone\n    });\n\n    const input = (this.haspicker) ? null : (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('input', {\n      type: \"file\",\n      name: this.options.selectors.uploadfile,\n      id: this.options.selectors.uploadfile,\n      multiple: true,\n      allowdirs: true,\n      accept: accept,\n      class: 'hidden'\n    }, this.dropzone);\n    if (input) input.addEventListener(\"change\", (e) => {\n      this.handleBrowse(e)\n    });\n    const btns = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('div', {},\n      this.dropzone);\n\n    this.options.browse.forEach(opt => {\n      const text = (this.container.dataset[`textbrowse${opt}`]) ? this.container.dataset[`textbrowse${opt}`] : `browse${opt}`;\n      const btn = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('span', {\n        class: this.options.selectors.trigger.slice(1),\n        dataset: {\n          type: opt\n        },\n        text: text\n      }, btns);\n      btn.addEventListener('click', async (e) => {\n        if (this.haspicker) {\n          this.openDirDialog(opt, (e) => {\n            this.handleBrowse(e)\n          });\n        } else {\n          if (opt === \"directory\") {\n            input.directory = true;\n            input.webkitdirectory = true;\n          } else { //file\n            input.directory = false;\n            input.webkitdirectory = false;\n          }\n          input.dispatchEvent(new MouseEvent(\"click\"));\n\n        }\n\n      });\n    });\n    const spandrop = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('span', {\n      text: this.container.dataset.textdrop\n    }, btns);\n\n  }\n\n  toggleDropTarget(on = true) {\n    const self = this;\n    const droptarget = (this.activentry) ? this.activentry.container : null;\n\n    if (droptarget === null) return;\n    const cssdragover = (this.jsDirList) ? this.jsDirList.options.entry.css.dragover : this.options.css.dragover;\n    const target_dragover = (e) => {\n      if (!this.dragover && this.activentry && this.activentry.container === e.currentTarget) {\n        droptarget.classList.add(cssdragover);\n      }\n      //self.handleDragOver(e);\n    }\n    const target_drop = async (e) => {\n      droptarget.classList.remove(cssdragover);\n      self.handleDrop(e);\n    }\n\n    // set events and css for new dropzone\n    if (on === false) {\n      droptarget.removeEventListener('dragover', target_dragover);\n      droptarget.removeEventListener('drop', target_drop);\n      droptarget.classList.remove(this.options.selectors.droptarget.substr(1));\n    } else {\n      droptarget.addEventListener('dragover', target_dragover);\n      droptarget.addEventListener('drop', target_drop);\n      droptarget.classList.add(this.options.selectors.droptarget.substr(1));\n    }\n  }\n\n  async addDirList() {\n    console.log('dirlist add addDILRLLLL', this.container)\n    this.jsDirList = new _modules_files_js_dirlist_js__WEBPACK_IMPORTED_MODULE_2__.JsDirList(this.container);\n    this.activentry = this.jsDirList.root;\n    this.rootitem = this.targetitem = this.activentry.container;\n    this.jsDirList.on(this.jsDirList.eventnames.attach, (e) => {\n      if (!e.entry) return;\n      this.detachDropzone();\n      this.activentry = e.entry;\n      this.targetitem = this.activentry.container;\n      this.addUploadDialog();\n    });\n    this.jsDirList.on(this.jsDirList.eventnames.detach, (e) => {\n      console.log('myfiles dirlist event', e)\n      this.enableDropzone();\n      this.detachDropzone();\n      this.activentry = null;\n      this.targetitem = null;\n    });\n    this.jsDirList.on(this.jsDirList.eventnames.action, (e) => {\n      console.log('action not managed', e)\n      switch (e.action) {\n        case 'drop':\n          e.target = e.entry.container;\n          this.handleDrop(e.event);\n          break;\n      }\n    });\n    this.activentry.label.dispatchEvent(new Event('click'));\n  }\n\n  addDisplayProgression() {\n    // add counters\n    if (this.displayprogression) return;\n    let el = document.getElementById(this.options.display.progression);\n    if (!el) {\n      el = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('div', {\n        id: this.options.display.progression\n      }, this.container);\n      el.innerHTML = `<div class=\"flex sm:flex-row\"><div class=\"${this.options.display.counters}\"></div><div class=\"${this.options.display.sizes}\"></div><div class=\"${_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.progress}\"></div><div class=\"${this.options.display.timers}\"></div></div>`;\n      this.displayprogression = el;\n    }\n  }\n  enableDropzone(enable = true, destroy = false) {\n    if (destroy) this.dropzone.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    if (enable) this.dropzone.dataset.enabled = true;\n    else delete this.dropzone.dataset.enabled;\n  }\n  //\n  attachDropzone() {\n    if (this.dropzone.dataset.enabled) {\n      this.targetitem.insertBefore(this.dropzone, this.activentry.label.nextSibling);\n      this.toggleDropTarget(true);\n    }\n  }\n  detachDropzone() {\n    if (this.dropzone.dataset.enabled) {\n      this.targetitem = null;\n      if (this.rootitem !== this.targetitem) {\n        this.rootitem.append(this.dropzone);\n\n      } else {\n        this.container.append(this.dropzone);\n        this.toggleDropTarget(false);\n      }\n    }\n\n  }\n\n  openDirDialog(type, callback) {\n    // if chrome 86 , edge 86, opera 72\n    const showpick = (type === \"directory\") ? window.showDirectoryPicker : window.showOpenFilePicker;\n    const pickopts = (type === \"directory\") ? {\n      mode: \"read\",\n      multiple: true\n    } : {\n      types: [{\n        description: \"Images,.tsv, zip, gzip, tar files\",\n        accept: objaccept,\n      }, ],\n      excludeAcceptAllOption: true,\n      multiple: true,\n    };\n    showpick(pickopts).then(pick => {\n      callback(pick);\n    });\n  }\n\n  //  drag&drop\n  async handleDrop(e) {\n    let dataTransfer;\n    if (e.dataTransfer) {\n      e.preventDefault();\n      dataTransfer = e.dataTransfer;\n    } else dataTransfer = e;\n    this.done = false;\n    this.initTimer();\n    const items = [...((dataTransfer.items) ? dataTransfer.items : dataTransfer.files)];\n    if (items.length) {\n      this.enableDropzone(false);\n      await items.forEach(async item => {\n        if (item.kind === \"file\") {\n          item = await item.webkitGetAsEntry();\n          this.toggleCounters(true);\n          await this.scanHandle(item);\n        }\n      })\n    }\n  }\n  handleDragOver(e) {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  }\n  showComplete() {\n    this.timer = (new Date() - this.timer) / 1000;\n    console.log('item-------------------------------------' + parseInt(this.timer / 60) + ' --- ' + (\n      this.timer - (parseInt(this.timer / 60) * 60)));\n    this.enableDropzone();\n  }\n\n  stopOnError(err) {\n    console.log('err', err);\n  }\n\n  enableDropzone(enable = true, destroy = false) {\n    console.log('thisdropzone', this.dropzone)\n    if (destroy) this.dropzone.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    if (enable) this.dropzone.dataset.enabled = true;\n    else delete this.dropzone.dataset.enabled;\n  }\n\n  addConsoleMessage(message) {\n    //message {message:, parent:}\n    message.parent = (message.parent) ? message.parent : this.container;\n    window.alertbox.addConsoleMessage(message);\n  }\n\n  addUploadDialog() {\n    if (this.options.controls.scan) {\n      this.enableDropzone(true);\n      this.attachDropzone();\n    }\n  }\n\n  async addFilesStore(name, callback) {\n    name = (name) ? name : this.options.dbname;\n    if (!this.jsFilesStore) {\n      const {\n        JsFilesStore\n      } = await __webpack_require__.e(/*! import() */ \"src_modules_files_js-filesystem_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../modules/files/js-filesystem.js */ \"./src/modules/files/js-filesystem.js\"));\n      this.jsFilesStore = new JsFilesStore(null, callback);\n      this.displayFiles();\n    }\n    if (callback) await callback();\n  }\n  displayFiles() {\n    this.jsFilesStore.getItems('local');\n  }\n\n  fileCounter(e) {\n    const counters = this.counters[e.name];\n    counters.counter += 1\n    if (e.size !== null) counters.size += parseInt(e.size);\n    counters.display.counter.textContent = counters.counter;\n    if (counters.display.size) counters.display.size.textContent = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.format_bytes)(counters.size);\n    this.quotaEstimate();\n  }\n\n  resetCounter(item) {\n    const counters = this.counters[item];\n    ['counter', 'size'].forEach(el => {\n      this.counters[item][el] = 0;\n      counters.display[el].textContent = 0;\n    });\n    this.toggleCounters(false);\n  }\n  resetCounters() {\n    Object.keys(this.options.controls).forEach(key => {\n      this.resetCounter(key);\n    })\n  }\n  toggleCounters(show = true) {\n    const el = document.getElementById(this.options.display.progression);\n    if (!el) return;\n    if (show) el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n    else el.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n  }\n\n  initFileCounter(item, opts, i) {\n    const sep = (i) ? ` / ` : ``;\n    let counter = 0;\n    let counterdisplay = null;\n    let size = 0;\n    let sizedisplay = null;\n    // create dom display elements\n\n\n    let boxcounters = document.getElementById(this.options.display.progression);\n    const itemopts = {\n      display: {},\n\n    };\n    Object.entries(opts).forEach(([k, val]) => {\n      const cl = k + 's';\n      const txt = {\n        counter: ' read',\n        size: ' read',\n        counterzipped: ' compressed',\n        sizezipped: ' compressed'\n      }\n      let elinsert = boxcounters.querySelector('.' + cl);\n      if (!elinsert) elinsert = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('div', {\n        class: cl\n      }, boxcounters, ``);\n      let el = elinsert.querySelector('.' + val);\n      if (!el) {\n        el = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_0__.create_box)('span', {\n          class: val,\n        }, elinsert, ` / `);\n        if (txt.hasOwnProperty(val)) elinsert.append(document.createTextNode(txt[val]));\n      } else this.resetCounter(item);\n      itemopts.display[k] = el;\n      itemopts[k] = 0;\n    });\n\n    this.counters = { ...this.counters,\n      ...{\n        [item]: itemopts\n      }\n    };\n  }\n\n  showControl(action, opts) {\n    console.log('opts', opts)\n    const target = ((opts.hasOwnProperty('bigfile') && opts.bigfile) ? 'zipped' : 'zip');\n    let message, text = null;\n    // 'zip' ---only btn for zip actions for the moment\n    const btn = this[this.options.btnprefix + 'zip' + target];\n    if (!btn) return;\n    btn.removeAttribute(\"disabled\");\n    const part = (opts && opts.part) ? opts.part : false;\n    const bigfile = (opts && opts.bigfile) ? opts.bigfile : false;\n    const filepath = (opts && opts.path) ? opts.path : this.activentry.getCurrentDirPath();\n    console.log('filepath', filepath)\n    switch (action) {\n      case this.eventnames.ready:\n        this.resetCounters();\n        this.activentry.list();\n        if (btn.dataset.message) delete btn.dataset.message;\n        btn.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n        break;\n      case this.eventnames.follow:\n        if (btn.dataset.message) delete btn.dataset.message;\n        btn.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n        break;\n      case this.eventnames.endzip:\n        if (!part) this.showComplete();\n        btn.textContent = `Close zip file` + ((part) ? part : ``);\n        btn.title = (part) ? `Your file is too big - you have to send this part before continuing to process the directory` : `Click to end zip file`;\n        message = {\n          name: this.eventnames.endzip,\n          part: part,\n          path: filepath,\n          bigfile: (target !== 'zip') ? bigfile : false,\n        };\n        btn.dataset.message = JSON.stringify(message);\n        break;\n      case this.eventnames.bigfile:\n        btn.textContent = `Upload big File separately`;\n        message = {\n          name: this.eventnames.bigfile,\n          path: filepath,\n          part: part,\n          bigfile: bigfile\n        };\n        btn.dataset.message = JSON.stringify(message);\n        console.log('bigfile', message)\n        break;\n      case this.eventnames.sendfile:\n        console.log('opts sendfile', opts)\n        message = {\n          name: this.eventnames.sendfile,\n          path: filepath,\n          part: part,\n          bigfile: bigfile\n        };\n        btn.textContent = `Upload zip file`;\n        console.log('message -sendfile- Upload zip file', message)\n        if (message.bigfile && message.bigfile !== '') btn.textContent += ` ` + opts;\n        btn.dataset.message = JSON.stringify(message);\n        console.log('messageup', message)\n        break;\n      case this.eventnames.pending:\n        btn.textContent = ` Pending ` + ((target !== 'zip') ? ' big file' : '');\n        btn.dataset.message = '';\n        btn.setAttribute(\"disabled\", true);\n        break;\n      case this.eventnames.gzip:\n        text = `compressing separately big file :${(opts && opts.bigfile)?opts.bigfile:``} ${(opts && opts.size)?opts.size:``}`;\n        btn.textContent = text;\n        btn.setAttribute(\"disabled\", true);\n        console.log('optsbigfl', opts)\n        btn.dataset.message = JSON.stringify({\n          name: this.eventnames.endzip,\n          path: filepath,\n          part: part,\n          bigfile: bigfile\n        });\n        break;\n      case this.eventnames.terminate:\n        console.log('terminate ' + ((target !== 'zip') ? 'bigfile' : ''));\n\n        //default:\n        btn.dataset.message = JSON.stringify({\n          name: 'ready',\n          bigfile: (target !== 'zip')\n        });\n        btn.click();\n        break;\n    }\n    if (btn.dataset.message) btn.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide);\n  }\n\n  getBtn(item, target) {\n    const btnkey = this.options.btnprefix + item + target;\n    if (this[btnkey]) return this[btnkey];\n    const display = this.options.controls[item].btn[target];\n    const btn = document.getElementById(display);\n    const parent = this.displayprogression;\n    if (!btn) {\n      parent.insertAdjacentHTML('beforeend', `<button id=\"${display}\" class=\"button ${display} ${_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.mright} ${_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_1__.css.hide}\"></button>`);\n      this[btnkey] = document.getElementById(display);\n      this[btnkey].addEventListener('click', async (e) => {\n        e.stopImmediatePropagation();\n        this.emitToZip(e.currentTarget);\n      });\n    } else parent.append(btn);\n    return this[btnkey];\n  }\n\n  initControls() {\n    Object.entries(this.options.controls).forEach(([key, control], i) => {\n      this.initFileCounter(key, control.display, i);\n      if (control.btn) this.activateControls(key, control.btn);\n    });\n  }\n  activateControls(key, btns) {\n    Object.keys(btns).forEach((btn) => {\n      this[this.options.btnprefix + key + btn] = this.getBtn(key, btn);\n    })\n\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/js-my-files.js\n")}}]);
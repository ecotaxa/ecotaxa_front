/*! For license information please see src_modules_data-import_js-src_css_tom-select_css.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["src_modules_data-import_js-src_css_tom-select_css"],{"./src/modules/data-import.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DataImport\": () => (/* binding */ DataImport)\n/* harmony export */ });\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/js-tom-select.js */ \"./src/modules/js-tom-select.js\");\n/* harmony import */ var _modules_project_privileges_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/project-privileges.js */ \"./src/modules/project-privileges.js\");\n/* harmony import */ var _modules_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/utils.js */ \"./src/modules/utils.js\");\n/* harmony import */ var _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/modules-config.js */ \"./src/modules/modules-config.js\");\n\n\n\n\n\nconst key_privileges = Object.keys(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.defined_privileges).reduce(function(result, key) {\n  result[key] = key;\n  return result;\n}, {});\nlet instance;\nclass DataImport {\n  content_selector = '.modal-content';\n  imports = [];\n  taxos = [\"preset\", \"extra\"];\n  importcontainer;\n  importzoneid;\n  importid = 'importzone';\n  selectors;\n  button;\n  clearbutton;\n  replacebutton;\n  tabbutton;\n  doc = null;\n  constructor(grid, what = '', selector = null) {\n    if (!grid) return;\n    const doc = (typeof(grid) === 'object') ? grid.dom : document.querySelector(grid);\n    if (!doc) return;\n    what = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(what);\n    if (!instance || instance.doc !== doc) {\n      // defaultoptions - keep like that\n      const options = {\n        importcontainer: '#data-import-' + what,\n        btns: '.btns-imports',\n        button: '#add-import-' + what,\n        replacebutton: '#replace-import-' + what,\n        clearbutton: \"#clear-import-\" + what,\n        tabbutton: '#tab-import-' + what,\n        selector: 'data-id',\n\n      };\n      this.doc = doc;\n      this.selector = (selector) ? selector : options.selector;\n      this.importcontainer = options.importcontainer instanceof HTMLElement ? options.importcontainer : document.querySelector(options.importcontainer);\n      this.form = (options.form) ? ((options.form) instanceof HTMLElement ? options.form : document.querySelector(options.form)) : this.doc.closest('form');\n      this.button = options.button instanceof HTMLElement ? options.button : document.querySelector(options.button);\n      this.replacebutton = options.replacebutton instanceof HTMLElement ? options.replacebutton : document.querySelector(options.replacebutton);\n      this.clearbutton = options.clearbutton instanceof HTMLElement ? options.clearbutton : document.querySelector(options.clearbutton);\n      this.tabbutton = options.tabbutton instanceof HTMLElement ? options.tabbutton : document.querySelector(options.tabbutton);\n      this.init(grid, options);\n      instance = this;\n\n    }\n    return instance;\n  }\n\n  init(grid, options) {\n\n    // hide importzone\n    this.showImport(false);\n    // remove line of target proj\n\n    let projid = this.form.querySelector('#' + _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.projid);\n    if (projid && projid.value) {\n      projid = this.doc.querySelector('[' + this.selector + '=\"' + projid.value + '\"]');\n      if (projid) projid.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n\n    }\n    const indextocheck = this.indexToCheck(grid);\n    this.selectors = this.doc.querySelectorAll('[' + this.selector + '] button, [' + this.selector + '] input');\n    this.selectors.forEach(selector => {\n      // checkbox possible\n      const index = Array.from(selector.parentElement.children).indexOf((selector));\n      if (indextocheck && selector.closest('tr').children[indextocheck[index]].innerHTML === '') selector.disabled = true;\n      else {\n        const evt = (selector.tagName.toLowerCase() === 'input') ? 'change' : 'click';\n        const apply_selection = (e) => {\n          const target = e.currentTarget;\n          target.disabled = true;\n          this.toImport(grid, target.parentElement, index);\n        };\n        selector.removeEventListener(evt, apply_selection, false);\n        selector.addEventListener(evt, apply_selection, false);\n      };\n    });\n\n\n    if (this.button) {\n      this.tabbutton.addEventListener('click', (e) => {\n        this.resizeZone(e);\n      });\n      this.showImport(false);\n    }\n  }\n\n  toImport(grid, col, whatpart = 0) {\n    const thcells = Array.from(this.doc.querySelectorAll('thead th'));\n    const rows = Array.from(this.doc.querySelectorAll('tbody tr'));\n    const datajson = grid.data.data; // cell values in json  - no parse\n    if (col.tagName.toLowerCase() !== 'td') col = col.closest('td');\n    const rowindex = (col.parentElement) ? col.parentElement.dataset.index : null;\n    if (rowindex === null) return;\n    let showbtns = true;\n    const cellindex = col.cellIndex; // change cellIndex to TableColIndex if no table component\n    const th = thcells[cellindex];\n    const cols = rows[rowindex];\n    const what = th.dataset.what;\n    if (!what) return;\n    const parts = (th.dataset.parts) ? th.dataset.parts.split(',') : null;\n    let contact = null;\n    const selectcells = (th.dataset.selectcells) ? ((th.dataset.parts) ? [th.dataset.parts.split(',')[whatpart]] : th.dataset.selectcells.split(',')) : null;\n    if (!selectcells) return;\n    if (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.settings) this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact] = this.findContact(thcells, datajson[rowindex]);\n    const importzone = (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo || what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) ? this.createImportzone(what) : null;\n    selectcells.forEach((name, index) => {\n      index = null;\n      thcells.every((t, idx) => {\n        if (t.dataset.name === name) {\n          index = idx;\n          return false;\n        }\n        return true;\n      });\n\n      if (index !== null) {\n        // show import buttons if importzone\n\n        const cell = rows[rowindex].cells[index];\n        const celldata = datajson[rowindex][index].data;\n        cell.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n        const thcell = thcells[index];\n        switch (what) {\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo:\n            // accumulate and show in import win - move the form field in modal win to view the changes and benefit of tom-select component functs...\n            const ts = importzone.tomselect;\n            let taxons = celldata;\n            if (taxons) {\n              if (ts) {\n                // merge taxons and options - unique\n                Object.values(ts.options).forEach((opt) => {\n                  let obj = {};\n                  obj[opt[ts.settings.valueField]] = opt[ts.settings.labelField];\n                  if (!taxons[opt[ts.settings.valueField]]) taxons = Object.assign(taxons, obj);\n                });\n                taxons = Object.entries(taxons);\n                // sort taxons\n                taxons.sort((a, b) => {\n                  let x = a[1];\n                  let y = b[1];\n                  return +(x > y) || -(y > x);\n                });\n                ts.clear();\n                ts.clearOptions();\n                // add taxons items\n                taxons.forEach(([key, text]) => {\n                  if (!ts.getItem(key)) {\n                    if (!ts.getOption(key)) {\n                      let obj = {};\n                      obj[ts.settings.valueField] = key;\n                      obj[ts.settings.labelField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(text.trim());\n                      ts.addOption(obj);\n                    }\n                    ts.addItem(key);\n                  }\n                });\n              } else {\n                Object.values(importzone.options).forEach(opt => {\n                  let obj = {};\n                  obj[opt.value] = opt.text;\n                  if (!taxons[opt.value]) taxons = Object.assign(taxons, obj);\n                });\n                taxons = Object.entries(taxons);\n                taxons.sort((a, b) => {\n                  let x = a[1];\n                  let y = b[1];\n                  return +(x > y) || -(y > x);\n                });\n                importzone.innerHTML = ``;\n                taxons.forEach(([key, text]) => {\n                  if (!importzone.querySelector('option[value=\"' + key + '\"]')) importzone.insertAdjacentHTML('beforeend', '<option value=\"' + key + '\" selected>' + text + '</option>');\n                });\n              }\n              showbtns = (taxons.length > 0);\n              taxons = null;\n            }\n\n            break;\n          case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges:\n            const privs = celldata;\n            // set everybody to 'view' if more than one project imported\n            const resetpriv = ((importzone.tomselect && importzone.tomselect.items.length > 0) || (importzone.selectedIndex > 0));\n\n            if (!importzone.dataset.init) {\n              Object.keys(privs).forEach(priv => {\n                importzone.insertAdjacentHTML('afterbegin', `<optgroup value=\"${priv}\" label=\"${priv}\"></optgroup>`);\n              });\n              const jsTomSelect = new _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__.JsTomSelect();\n              jsTomSelect.applyTo(importzone);\n              importzone.dataset.init = true;\n            }\n\n            if (importzone.tomselect) {\n              // add members grouped by priv\n              const members = [...importzone.tomselect.items];\n              members.forEach(member => {\n                member = importzone.tomselect.options[member];\n                if (member) {\n                  const priv = (resetpriv) ? key_privileges.viewers : member.optgroup;\n\n                  privs[priv].push({\n                    id: member.id,\n                    name: member.name\n                  });\n                } else this.messageZone(member);\n              });\n\n              importzone.tomselect.clear();\n              importzone.tomselect.refreshOptions();\n\n              Object.entries(privs).forEach(([priv, members]) => {\n                members.sort((a, b) => {\n                  return (b.name > a.name);\n                });\n                members.forEach(member => {\n                  const newpriv = (resetpriv) ? key_privileges.viewers : priv; // viewer if more than one project imported\n                  const optgroup = importzone.querySelector('[value=\"' + newpriv + '\"]');\n                  if (importzone.querySelector('option[value=\"' + member.id + '\"]') === null) {\n                    optgroup.insertAdjacentHTML('afterbegin', `<option value=\"${member.id}\" data-optgroup=${newpriv} selected=\"selected\">${member.name}</option>`);\n                    if (importzone.tomselect && !importzone.tomselect.getOption(member.id)) {\n                      importzone.tomselect.addOption({\n                        id: member.id,\n                        name: (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(member.name),\n                        optgroup: newpriv\n                      });\n                    }\n                  }\n                  importzone.tomselect.addItem(member.id);\n                });\n\n              });\n\n              showbtns = (importzone.tomselect.items.length > 0);\n            }\n\n            break;\n          default:\n\n            if (thcell.dataset.autocomplete) {\n              // select elements where key / value in different columns\n              this.imports[name] = {\n                value: celldata,\n                key: null\n              };\n              let el = null;\n              thcells.every((t, idx) => {\n                if (t.dataset.name == thcell.dataset.autocomplete) {\n                  el = idx;\n                  return false;\n                }\n                return true;\n              });\n              if (el !== null) {\n                el = datajson[rowindex][el];\n\n                this.imports[name].key = el;\n              }\n            } else if (thcell.dataset.value) this.imports[name] = thcell.dataset.value;\n            else this.imports[name] = celldata;\n\n            break;\n        }\n      };\n\n    });\n\n    if (thcells.length) {\n      if (this.button) {\n        this.showImport(showbtns);\n        if (!this.button.dataset.activated && (what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo || what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges)) this.activateButtons(what, selectcells);\n      } else this.makeImport(null, selectcells, what, true);\n    }\n    //\n\n  }\n  messageZone(item) {\n    console.log('itemmessage', item);\n  }\n  activateButtons(what, selectcells) {\n\n    this.button.addEventListener('click', (e) => {\n      e.preventDefault();\n      this.makeImport(e.currentTarget, selectcells, what, true);\n\n    });\n    this.replacebutton.addEventListener('click', (e) => {\n      e.preventDefault();\n      this.makeImport(e.currentTarget, selectcells, what, true);\n\n    });\n    this.clearbutton.addEventListener('click', (e) => {\n      if (!this.importcontainer) return;\n      const field = this.importcontainer.querySelector('#' + this.importid);\n      if (field) {\n        if (field.tomselect) {\n          field.tomselect.clear();\n          field.tomselect.refreshOptions();\n        } else field.value = '';\n      }\n      this.selectors.forEach(selector => {\n        if (selector.disabled) {\n          selector.disabled = false;\n          selector.closest('tr').querySelectorAll('.selected').forEach(el => {\n            el.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.selected);\n          });\n        }\n      });\n      this.button.disabled = false;\n      this.replacebutton.disabled = false;\n      //this.showImport(false);\n    });\n    this.button.dataset.activated = true;\n    this.replacebutton.dataset.activated = true;\n  }\n\n  findContact(thcells, cols) {\n    let contact = null;\n    thcells.every((t, idx) => {\n      if (t.dataset.name && t.dataset.name === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact) {\n        contact = idx;\n        return false;\n      }\n      return true;\n    });\n    //if (contact) contact = cols[contact] ? JSON.parse(cols[contact].data.trim()) : 0;\n    if (contact) contact = cols[contact] ? cols[contact] : 0;\n\n    return contact;\n  }\n\n  renderPrivileges(importzone, clear = false) {\n    let privileges = {};\n    const tzone = importzone.tomselect;\n    const pushpriv = (member, priv) => {\n      const obj = {\n        id: member.id,\n        name: member.name,\n        priv: priv\n      }\n      if (privileges[priv]) privileges[priv].push(obj);\n      else privileges[priv] = [obj];\n    }\n    if (tzone) {\n      const members = [...tzone.items];\n      const options = Object.assign({}, tzone.options);\n      members.forEach(member => {\n        member = options[member];\n        if (member) pushpriv(member, member.optgroup);\n\n      })\n    } else {\n      importzone.options.forEach(member => {\n        if (member.selected) pushpriv(member, member.dataset.optgroup);\n      })\n    }\n\n    if (this.importPrivileges(privileges, clear)) {\n      if (tzone) {\n        tzone.clear();\n        tzone.clearOptions();\n      } else importzone.innerHTML = ``;\n\n    }\n\n  }\n\n  importPrivileges(privileges, clear = false) {\n    const projectPrivileges = new _modules_project_privileges_js__WEBPACK_IMPORTED_MODULE_2__.ProjectPrivileges();\n    const importedtag = (input) => {\n      this.setImportedTag(input, null);\n    }\n    const dismiss = () => {\n      this.dismiss();\n    }\n    const contact = ((this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact]) ? this.imports[_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.contact] : null);\n    return (projectPrivileges.importPrivileges(privileges, clear, contact, importedtag, dismiss));\n  }\n\n  createImportzone(name) {\n    this.showImport(true);\n    let importzone = this.importcontainer.querySelector('#' + this.importid);\n\n\n    if (name === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges) {\n      if (!importzone) {\n        importzone = document.createElement('select');\n        this.importid = importzone.id = this.importid + '-' + name;\n        importzone.dataset.type = _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.models.user;\n        importzone.multiple = true;\n        importzone.dataset.priv = true;\n        this.importcontainer.append(importzone);\n\n      }\n    } else {\n      const import_target = (this.form.querySelector('[name=\"' + name + '\"]')) ? this.form.querySelector('[name=\"' + name + '\"]') : this.form.querySelector('[data-importfield=\"' + name + '\"]');\n      const ts = import_target.tomselect;\n\n      if (!importzone) {\n        if (!import_target) return;\n        this.importzoneid = import_target.id;\n        // tomselect ?\n        importzone = import_target.cloneNode();\n        importzone.classList.remove('tomselected');\n        importzone.classList.remove('ts-hidden-accessible');\n        // keep original id to replace data on apply import\n        importzone.dataset.origin = importzone.id;\n        importzone.id = this.importid;\n        importzone.name = this.importid + '_' + importzone.name;\n        this.importcontainer.insertAdjacentHTML('afterbegin', importzone.outerHTML);\n        if (ts) {\n          importzone = this.importcontainer.querySelector('#' + this.importid);\n          const jsTomSelect = new _modules_js_tom_select_js__WEBPACK_IMPORTED_MODULE_1__.JsTomSelect();\n          jsTomSelect.applyTo(importzone);\n        }\n      }\n    }\n\n    return importzone;\n\n  }\n\n  makeImport(btn, selectcells, what, close = false) {\n    let done = false;\n    const importzone = (this.importcontainer) ? this.importcontainer.querySelector('#' + this.importid) : null;\n    switch (what) {\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo:\n\n        if (!importzone) return false;\n        const import_target = this.form.querySelector('#' + importzone.dataset.origin);\n\n        if (!import_target) return false;\n        const ts = import_target.tomselect;\n        if (ts) {\n          // only if replace specified\n          if (btn.dataset.replace && btn.dataset.replace === 'replace') {\n            ts.clear();\n            ts.clearOptions();\n          }\n\n          const tzone = importzone.tomselect;\n          const items = [...tzone.items];\n          const options = Object.assign({}, tzone.options);\n          items.forEach((e, i) => {\n            let el = {};\n            el[ts.settings.valueField] = e;\n            el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(options[e][ts.settings.searchField]);\n            if (!ts.getOption(e)) ts.addOption(el);\n            ts.addItem(e);\n          });\n          tzone.clear();\n          tzone.clearOptions();\n        } else {\n          if (btn.dataset.replace && btn.dataset.replace === 'replace') import_target.innerHTML = ``;\n          import_target.innerHTML = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(importzone.innerHTML);\n          importzone.innerHTML = ``;\n\n        }\n\n        done = true;\n        break;\n      case _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.privileges:\n        if (!importzone) return false;\n        done = this.renderPrivileges(importzone, (btn.dataset.replace && btn.dataset.replace === 'replace'));\n        break;\n      default:\n        selectcells.forEach((name, index) => {\n          let input = ((this.form.querySelector('[data-importfield=\"' + name + '\"]')) ? this.form.querySelector('[data-importfield=\"' + name + '\"]') : this.form.querySelector('[name=\"' + name + '\"]'));\n\n          if (input && this.imports[name] !== undefined) {\n            const ts = input.tomselect;\n\n            if (name === 'init_classif_list') {\n              let ids = this.imports[name];\n              if (Array.isArray(ids)) ids = ids.join(',');\n              else ids = ids.replace('[', '').replace(']', '').replaceAll(' ', '');\n              if (ids !== '') {\n                if (ts) ts.wrapper.classList.add('wait-for-results');\n                const formData = new FormData();\n                formData.append('idlist', ids);\n                const url = '/search/taxoresolve' //+ new URLSearchParams({'idlist': ids});\n                fetch(url, (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.fetchSettings)({\n                  'method': 'POST',\n                  'body': formData\n                })).then(response =>\n                  response.json()\n                ).then(results => {\n                  if (ts) {\n                    Object.entries(results).forEach(([key, text]) => {\n                      let el = {};\n                      key = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(key);\n                      text = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(text);\n                      el[ts.settings.valueField] = key;\n                      el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(text);\n\n                      ts.addOption(el);\n                      ts.addItem(el[ts.settings.valueField]);\n                    });\n                  } else {\n                    let options = '';\n                    Object.entries(results).forEach(([key, text]) => {\n                      key = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(key);\n                      text = dompurify__WEBPACK_IMPORTED_MODULE_0___default().sanitize(text);\n                      options += '<option value =\"' + key + '\" selected>' + text + '</option>';\n                    });\n                    input.innerHTML = options;\n                    options = '';\n                  }\n                  results = null;\n                  if (ts) ts.wrapper.classList.remove('wait-for-results');\n                });\n              }\n            } else if (ts) {\n              let el = {};\n              el[ts.settings.valueField] = this.imports[name]['key'];\n              el[ts.settings.searchField] = (0,_modules_utils_js__WEBPACK_IMPORTED_MODULE_3__.unescape_html)(this.imports[name]['value']);\n              ts.addOption(el);\n              ts.addItem(el[input.tomselect.settings.valueField]);\n              ts.refreshOptions();\n            } else {\n              const type = (input.type) ? input.type : input.tagName.toLowerCase();\n              switch (input.type) {\n                case 'radio':\n                case 'checkbox':\n                  input = this.form.querySelector('[name=\"' + name + '\"][value=\"' + this.imports[name] + '\"]');\n                  if (input) input.checked = true;\n                  break;\n                  /*case 'checkbox':\n                    // TODO ( multiple selection )\n                    this.form.querySelectorAll('[name=\"' + field + '\"]').forEach(input => {\n                      input.checked = (this.imports[name]['key'] === input.value);\n                    });\n                    break;*/\n                case 'select':\n                  // todo select multiple\n                  let option;\n                  if (this.imports[name]['key']) option = '<option value=\"' + this.imports[name]['key'] + '\" selected >' + this.imports[name]['value'] + '</option>';\n                  else option = '<option value=\"' + this.imports[name] + '\" selected >' + this.imports[name] + '</option>'\n                  input.insertAdjacentHTML('beforeend', option);\n                  break;\n                default:\n\n                  input.value = this.imports[name];\n                  break;\n              }\n            }\n            if (what !== _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.settings) input.focus();\n            done = true;\n            // set imported tag to fieldbox\n            this.setImportedTag(input);\n          } else if (name === 'privileges') {\n            done = this.importPrivileges(this.imports[name], false);\n          }\n        });\n        break;\n    }\n    if (done === true && close == true) this.dismiss();\n  }\n\n  setImportedTag(input, selector = '.form-box') {\n    let el = (selector === null) ? input : (input.closest(selector) ? input.closest(selector) : input.closest('fieldset'));\n    if (!el) return;\n    el.dataset.isimported = this.form.dataset.isimported;\n    el.classList.add('imported');\n    const removetag = (e) => {\n      el.removeAttribute('data-isimported');\n      el.classList.remove('imported');\n      input.removeEventListener('change keydown', removetag);\n    }\n    input.addEventListener('change keydown', removetag);\n  }\n\n  dismiss(clear = false) {\n    const container = this.doc.closest('details');\n    if (container) {\n      container.open = false;\n      if (clear === true) container.querySelector(this.content_selector).innerHTML = ``;\n    }\n\n  }\n  indexToCheck(grid) {\n    // index of cells to check if empty and disable row  import btn\n    if (grid.headings && grid.headings[0].dataset.what === _modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.typeimport.taxo) {\n\n      // if multiple selectors : search index of cell to import - if empty disable the selector\n      const parts = (grid.headings[0].dataset.parts) ? grid.headings[0].dataset.parts.split(',') : null;\n      if (parts) {\n        const indextocheck = grid.headings.filter((heading, i) => {\n          if (parts.indexOf(heading.dataset.name) >= 0) return i;\n        }).map(v => {\n          return v.cellIndex\n        });\n        return indextocheck;\n      }\n    }\n  }\n  // show / hide importzone and buttons\n  showImport(show) {\n    if (!this.button) return;\n\n    if (show === false) {\n      this.button.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.replacebutton.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.clearbutton.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.importcontainer.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.tabbutton.classList.add(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n    } else {\n      this.button.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.replacebutton.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.clearbutton.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.importcontainer.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n      this.button.disabled = this.clearbutton.disabled = false;\n      const importzone = this.importcontainer.querySelector('#' + this.importid);\n      if (importzone) {\n        this.tabbutton.classList.remove(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.hide);\n        if (importzone.tomselect && importzone.tomselect.control.offsetHeight < importzone.tomselect.control.scrollHeight) {\n          this.tabbutton.disabled = false;\n        } else this.tabbutton.disabled = true;\n      }\n    }\n  }\n  // resize importzone\n  resizeZone(e) {\n    const div = this.importcontainer.closest(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.domselectors.component[\"import\"].zoneimport);\n    if (!div) return;\n    div.parentElement.classList.toggle(_modules_modules_config_js__WEBPACK_IMPORTED_MODULE_4__.css.showfull);\n    const icon = e.currentTarget.querySelector('i');\n    if (icon) {\n      icon.classList.toggle('icon-arrow-pointing-out');\n      icon.classList.toggle('icon-arrow-pointing-in');\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/data-import.js\n")}}]);
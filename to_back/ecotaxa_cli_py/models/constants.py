# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.41
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from to_back.ecotaxa_cli_py.configuration import Configuration


class Constants(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'license_texts': 'dict(str, str)',
        'access': 'dict(str, str)',
        'app_manager': 'list[str]',
        'countries': 'list[str]',
        'people_organization_directories': 'dict(str, str)',
        'user_status': 'dict(str, int)',
        'user_type': 'dict(str, str)',
        'password_regexp': 'str',
        'email_verification': 'bool',
        'account_validation': 'bool',
        'short_token_age': 'int',
        'profile_token_age': 'int',
        'recaptchaid': 'bool',
        'formulae': 'str',
        'default_project_access': 'str',
        'max_upload_size': 'int',
        'time_to_live': 'str'
    }

    attribute_map = {
        'license_texts': 'license_texts',
        'access': 'access',
        'app_manager': 'app_manager',
        'countries': 'countries',
        'people_organization_directories': 'people_organization_directories',
        'user_status': 'user_status',
        'user_type': 'user_type',
        'password_regexp': 'password_regexp',
        'email_verification': 'email_verification',
        'account_validation': 'account_validation',
        'short_token_age': 'short_token_age',
        'profile_token_age': 'profile_token_age',
        'recaptchaid': 'recaptchaid',
        'formulae': 'formulae',
        'default_project_access': 'default_project_access',
        'max_upload_size': 'max_upload_size',
        'time_to_live': 'time_to_live'
    }

    def __init__(self, license_texts=None, access=None, app_manager=["",""], countries=[], people_organization_directories=None, user_status=None, user_type=None, password_regexp='^(?:(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#?%^&*-+])).{8,20}$', email_verification=True, account_validation=False, short_token_age=1, profile_token_age=24, recaptchaid=False, formulae='''subsample_coef: 1/ssm.sub_part
total_water_volume: sam.tot_vol/1000
individual_volume: 4.0/3.0*math.pi*(math.sqrt(obj.area/math.pi)*ssm.pixel_size)**3''', default_project_access='1', max_upload_size=681574400, time_to_live=None, local_vars_configuration=None):  # noqa: E501
        """Constants - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._license_texts = None
        self._access = None
        self._app_manager = None
        self._countries = None
        self._people_organization_directories = None
        self._user_status = None
        self._user_type = None
        self._password_regexp = None
        self._email_verification = None
        self._account_validation = None
        self._short_token_age = None
        self._profile_token_age = None
        self._recaptchaid = None
        self._formulae = None
        self._default_project_access = None
        self._max_upload_size = None
        self._time_to_live = None
        self.discriminator = None

        if license_texts is not None:
            self.license_texts = license_texts
        if access is not None:
            self.access = access
        if app_manager is not None:
            self.app_manager = app_manager
        if countries is not None:
            self.countries = countries
        if people_organization_directories is not None:
            self.people_organization_directories = people_organization_directories
        if user_status is not None:
            self.user_status = user_status
        if user_type is not None:
            self.user_type = user_type
        if password_regexp is not None:
            self.password_regexp = password_regexp
        if email_verification is not None:
            self.email_verification = email_verification
        if account_validation is not None:
            self.account_validation = account_validation
        if short_token_age is not None:
            self.short_token_age = short_token_age
        if profile_token_age is not None:
            self.profile_token_age = profile_token_age
        if recaptchaid is not None:
            self.recaptchaid = recaptchaid
        if formulae is not None:
            self.formulae = formulae
        if default_project_access is not None:
            self.default_project_access = default_project_access
        if max_upload_size is not None:
            self.max_upload_size = max_upload_size
        if time_to_live is not None:
            self.time_to_live = time_to_live

    @property
    def license_texts(self):
        """Gets the license_texts of this Constants.  # noqa: E501

        The supported licenses and help text/links.  # noqa: E501

        :return: The license_texts of this Constants.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._license_texts

    @license_texts.setter
    def license_texts(self, license_texts):
        """Sets the license_texts of this Constants.

        The supported licenses and help text/links.  # noqa: E501

        :param license_texts: The license_texts of this Constants.  # noqa: E501
        :type: dict(str, str)
        """

        self._license_texts = license_texts

    @property
    def access(self):
        """Gets the access of this Constants.  # noqa: E501

        Project access levels.  # noqa: E501

        :return: The access of this Constants.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this Constants.

        Project access levels.  # noqa: E501

        :param access: The access of this Constants.  # noqa: E501
        :type: dict(str, str)
        """

        self._access = access

    @property
    def app_manager(self):
        """Gets the app_manager of this Constants.  # noqa: E501

        The application manager identity (name, mail), from config file.  # noqa: E501

        :return: The app_manager of this Constants.  # noqa: E501
        :rtype: list[str]
        """
        return self._app_manager

    @app_manager.setter
    def app_manager(self, app_manager):
        """Sets the app_manager of this Constants.

        The application manager identity (name, mail), from config file.  # noqa: E501

        :param app_manager: The app_manager of this Constants.  # noqa: E501
        :type: list[str]
        """

        self._app_manager = app_manager

    @property
    def countries(self):
        """Gets the countries of this Constants.  # noqa: E501

        List of known countries names.  # noqa: E501

        :return: The countries of this Constants.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this Constants.

        List of known countries names.  # noqa: E501

        :param countries: The countries of this Constants.  # noqa: E501
        :type: list[str]
        """

        self._countries = countries

    @property
    def people_organization_directories(self):
        """Gets the people_organization_directories of this Constants.  # noqa: E501

        Available directories to identify people and organizations in collections settings  # noqa: E501

        :return: The people_organization_directories of this Constants.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._people_organization_directories

    @people_organization_directories.setter
    def people_organization_directories(self, people_organization_directories):
        """Sets the people_organization_directories of this Constants.

        Available directories to identify people and organizations in collections settings  # noqa: E501

        :param people_organization_directories: The people_organization_directories of this Constants.  # noqa: E501
        :type: dict(str, str)
        """

        self._people_organization_directories = people_organization_directories

    @property
    def user_status(self):
        """Gets the user_status of this Constants.  # noqa: E501

        Application User status values  # noqa: E501

        :return: The user_status of this Constants.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this Constants.

        Application User status values  # noqa: E501

        :param user_status: The user_status of this Constants.  # noqa: E501
        :type: dict(str, int)
        """

        self._user_status = user_status

    @property
    def user_type(self):
        """Gets the user_type of this Constants.  # noqa: E501

        Application User type values  # noqa: E501

        :return: The user_type of this Constants.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this Constants.

        Application User type values  # noqa: E501

        :param user_type: The user_type of this Constants.  # noqa: E501
        :type: dict(str, str)
        """

        self._user_type = user_type

    @property
    def password_regexp(self):
        """Gets the password_regexp of this Constants.  # noqa: E501

        8 char. minimum, at least one uppercase, one lowercase, one number and one special char in '#?!@%^&*-+'   # noqa: E501

        :return: The password_regexp of this Constants.  # noqa: E501
        :rtype: str
        """
        return self._password_regexp

    @password_regexp.setter
    def password_regexp(self, password_regexp):
        """Sets the password_regexp of this Constants.

        8 char. minimum, at least one uppercase, one lowercase, one number and one special char in '#?!@%^&*-+'   # noqa: E501

        :param password_regexp: The password_regexp of this Constants.  # noqa: E501
        :type: str
        """

        self._password_regexp = password_regexp

    @property
    def email_verification(self):
        """Gets the email_verification of this Constants.  # noqa: E501

        Require verification before activation.  # noqa: E501

        :return: The email_verification of this Constants.  # noqa: E501
        :rtype: bool
        """
        return self._email_verification

    @email_verification.setter
    def email_verification(self, email_verification):
        """Sets the email_verification of this Constants.

        Require verification before activation.  # noqa: E501

        :param email_verification: The email_verification of this Constants.  # noqa: E501
        :type: bool
        """

        self._email_verification = email_verification

    @property
    def account_validation(self):
        """Gets the account_validation of this Constants.  # noqa: E501

        Require validation by a Users Administrator before activation.  # noqa: E501

        :return: The account_validation of this Constants.  # noqa: E501
        :rtype: bool
        """
        return self._account_validation

    @account_validation.setter
    def account_validation(self, account_validation):
        """Sets the account_validation of this Constants.

        Require validation by a Users Administrator before activation.  # noqa: E501

        :param account_validation: The account_validation of this Constants.  # noqa: E501
        :type: bool
        """

        self._account_validation = account_validation

    @property
    def short_token_age(self):
        """Gets the short_token_age of this Constants.  # noqa: E501

        Email confirmation, password reset token lifespan.  # noqa: E501

        :return: The short_token_age of this Constants.  # noqa: E501
        :rtype: int
        """
        return self._short_token_age

    @short_token_age.setter
    def short_token_age(self, short_token_age):
        """Sets the short_token_age of this Constants.

        Email confirmation, password reset token lifespan.  # noqa: E501

        :param short_token_age: The short_token_age of this Constants.  # noqa: E501
        :type: int
        """

        self._short_token_age = short_token_age

    @property
    def profile_token_age(self):
        """Gets the profile_token_age of this Constants.  # noqa: E501

        Profile modification token lifespan.  # noqa: E501

        :return: The profile_token_age of this Constants.  # noqa: E501
        :rtype: int
        """
        return self._profile_token_age

    @profile_token_age.setter
    def profile_token_age(self, profile_token_age):
        """Sets the profile_token_age of this Constants.

        Profile modification token lifespan.  # noqa: E501

        :param profile_token_age: The profile_token_age of this Constants.  # noqa: E501
        :type: int
        """

        self._profile_token_age = profile_token_age

    @property
    def recaptchaid(self):
        """Gets the recaptchaid of this Constants.  # noqa: E501

        use Google ReCaptcha  # noqa: E501

        :return: The recaptchaid of this Constants.  # noqa: E501
        :rtype: bool
        """
        return self._recaptchaid

    @recaptchaid.setter
    def recaptchaid(self, recaptchaid):
        """Sets the recaptchaid of this Constants.

        use Google ReCaptcha  # noqa: E501

        :param recaptchaid: The recaptchaid of this Constants.  # noqa: E501
        :type: bool
        """

        self._recaptchaid = recaptchaid

    @property
    def formulae(self):
        """Gets the formulae of this Constants.  # noqa: E501

        Project default concentration formulae  # noqa: E501

        :return: The formulae of this Constants.  # noqa: E501
        :rtype: str
        """
        return self._formulae

    @formulae.setter
    def formulae(self, formulae):
        """Sets the formulae of this Constants.

        Project default concentration formulae  # noqa: E501

        :param formulae: The formulae of this Constants.  # noqa: E501
        :type: str
        """

        self._formulae = formulae

    @property
    def default_project_access(self):
        """Gets the default_project_access of this Constants.  # noqa: E501

        Project default access level  # noqa: E501

        :return: The default_project_access of this Constants.  # noqa: E501
        :rtype: str
        """
        return self._default_project_access

    @default_project_access.setter
    def default_project_access(self, default_project_access):
        """Sets the default_project_access of this Constants.

        Project default access level  # noqa: E501

        :param default_project_access: The default_project_access of this Constants.  # noqa: E501
        :type: str
        """

        self._default_project_access = default_project_access

    @property
    def max_upload_size(self):
        """Gets the max_upload_size of this Constants.  # noqa: E501

        My Files max file upload size (bytes)  # noqa: E501

        :return: The max_upload_size of this Constants.  # noqa: E501
        :rtype: int
        """
        return self._max_upload_size

    @max_upload_size.setter
    def max_upload_size(self, max_upload_size):
        """Sets the max_upload_size of this Constants.

        My Files max file upload size (bytes)  # noqa: E501

        :param max_upload_size: The max_upload_size of this Constants.  # noqa: E501
        :type: int
        """

        self._max_upload_size = max_upload_size

    @property
    def time_to_live(self):
        """Gets the time_to_live of this Constants.  # noqa: E501

        My Files number of days before deleting directories  # noqa: E501

        :return: The time_to_live of this Constants.  # noqa: E501
        :rtype: str
        """
        return self._time_to_live

    @time_to_live.setter
    def time_to_live(self, time_to_live):
        """Sets the time_to_live of this Constants.

        My Files number of days before deleting directories  # noqa: E501

        :param time_to_live: The time_to_live of this Constants.  # noqa: E501
        :type: str
        """

        self._time_to_live = time_to_live

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Constants):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Constants):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.8
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from to_back.ecotaxa_cli_py.configuration import Configuration


class SubsetReq(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'task_id': 'int',
        'filters': 'dict(str, str)',
        'dest_prj_id': 'int',
        'limit_type': 'str',
        'limit_value': 'float',
        'do_images': 'bool'
    }

    attribute_map = {
        'task_id': 'task_id',
        'filters': 'filters',
        'dest_prj_id': 'dest_prj_id',
        'limit_type': 'limit_type',
        'limit_value': 'limit_value',
        'do_images': 'do_images'
    }

    def __init__(self, task_id=None, filters=None, dest_prj_id=None, limit_type=None, limit_value=None, do_images=None, local_vars_configuration=None):  # noqa: E501
        """SubsetReq - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._task_id = None
        self._filters = None
        self._dest_prj_id = None
        self._limit_type = None
        self._limit_value = None
        self._do_images = None
        self.discriminator = None

        self.task_id = task_id
        if filters is not None:
            self.filters = filters
        self.dest_prj_id = dest_prj_id
        self.limit_type = limit_type
        self.limit_value = limit_value
        self.do_images = do_images

    @property
    def task_id(self):
        """Gets the task_id of this SubsetReq.  # noqa: E501


        :return: The task_id of this SubsetReq.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this SubsetReq.


        :param task_id: The task_id of this SubsetReq.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and task_id is None:  # noqa: E501
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def filters(self):
        """Gets the filters of this SubsetReq.  # noqa: E501


        :return: The filters of this SubsetReq.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this SubsetReq.


        :param filters: The filters of this SubsetReq.  # noqa: E501
        :type: dict(str, str)
        """

        self._filters = filters

    @property
    def dest_prj_id(self):
        """Gets the dest_prj_id of this SubsetReq.  # noqa: E501


        :return: The dest_prj_id of this SubsetReq.  # noqa: E501
        :rtype: int
        """
        return self._dest_prj_id

    @dest_prj_id.setter
    def dest_prj_id(self, dest_prj_id):
        """Sets the dest_prj_id of this SubsetReq.


        :param dest_prj_id: The dest_prj_id of this SubsetReq.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and dest_prj_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dest_prj_id`, must not be `None`")  # noqa: E501

        self._dest_prj_id = dest_prj_id

    @property
    def limit_type(self):
        """Gets the limit_type of this SubsetReq.  # noqa: E501


        :return: The limit_type of this SubsetReq.  # noqa: E501
        :rtype: str
        """
        return self._limit_type

    @limit_type.setter
    def limit_type(self, limit_type):
        """Sets the limit_type of this SubsetReq.


        :param limit_type: The limit_type of this SubsetReq.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and limit_type is None:  # noqa: E501
            raise ValueError("Invalid value for `limit_type`, must not be `None`")  # noqa: E501
        allowed_values = ["P", "V"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and limit_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `limit_type` ({0}), must be one of {1}"  # noqa: E501
                .format(limit_type, allowed_values)
            )

        self._limit_type = limit_type

    @property
    def limit_value(self):
        """Gets the limit_value of this SubsetReq.  # noqa: E501


        :return: The limit_value of this SubsetReq.  # noqa: E501
        :rtype: float
        """
        return self._limit_value

    @limit_value.setter
    def limit_value(self, limit_value):
        """Sets the limit_value of this SubsetReq.


        :param limit_value: The limit_value of this SubsetReq.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and limit_value is None:  # noqa: E501
            raise ValueError("Invalid value for `limit_value`, must not be `None`")  # noqa: E501

        self._limit_value = limit_value

    @property
    def do_images(self):
        """Gets the do_images of this SubsetReq.  # noqa: E501


        :return: The do_images of this SubsetReq.  # noqa: E501
        :rtype: bool
        """
        return self._do_images

    @do_images.setter
    def do_images(self, do_images):
        """Sets the do_images of this SubsetReq.


        :param do_images: The do_images of this SubsetReq.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and do_images is None:  # noqa: E501
            raise ValueError("Invalid value for `do_images`, must not be `None`")  # noqa: E501

        self._do_images = do_images

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubsetReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubsetReq):
            return True

        return self.to_dict() != other.to_dict()

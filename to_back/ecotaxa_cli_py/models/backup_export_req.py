# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.41
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from to_back.ecotaxa_cli_py.configuration import Configuration


class BackupExportReq(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'collection_id': 'int',
        'project_id': 'AnyOfintegerstring',
        'out_to_ftp': 'bool'
    }

    attribute_map = {
        'collection_id': 'collection_id',
        'project_id': 'project_id',
        'out_to_ftp': 'out_to_ftp'
    }

    def __init__(self, collection_id=None, project_id=None, out_to_ftp=False, local_vars_configuration=None):  # noqa: E501
        """BackupExportReq - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._collection_id = None
        self._project_id = None
        self._out_to_ftp = None
        self.discriminator = None

        if collection_id is not None:
            self.collection_id = collection_id
        self.project_id = project_id
        if out_to_ftp is not None:
            self.out_to_ftp = out_to_ftp

    @property
    def collection_id(self):
        """Gets the collection_id of this BackupExportReq.  # noqa: E501

        The Collection to export if requested.  # noqa: E501

        :return: The collection_id of this BackupExportReq.  # noqa: E501
        :rtype: int
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this BackupExportReq.

        The Collection to export if requested.  # noqa: E501

        :param collection_id: The collection_id of this BackupExportReq.  # noqa: E501
        :type: int
        """

        self._collection_id = collection_id

    @property
    def project_id(self):
        """Gets the project_id of this BackupExportReq.  # noqa: E501

        The project(int) or projects (str, project ids list) to export.  # noqa: E501

        :return: The project_id of this BackupExportReq.  # noqa: E501
        :rtype: AnyOfintegerstring
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this BackupExportReq.

        The project(int) or projects (str, project ids list) to export.  # noqa: E501

        :param project_id: The project_id of this BackupExportReq.  # noqa: E501
        :type: AnyOfintegerstring
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def out_to_ftp(self):
        """Gets the out_to_ftp of this BackupExportReq.  # noqa: E501

        Copy result file to FTP area. Original file is still available.  # noqa: E501

        :return: The out_to_ftp of this BackupExportReq.  # noqa: E501
        :rtype: bool
        """
        return self._out_to_ftp

    @out_to_ftp.setter
    def out_to_ftp(self, out_to_ftp):
        """Sets the out_to_ftp of this BackupExportReq.

        Copy result file to FTP area. Original file is still available.  # noqa: E501

        :param out_to_ftp: The out_to_ftp of this BackupExportReq.  # noqa: E501
        :type: bool
        """

        self._out_to_ftp = out_to_ftp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupExportReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupExportReq):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.34
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from to_back.ecotaxa_cli_py.configuration import Configuration


class DarwinCoreExportReq(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'collection_id': 'int',
        'dry_run': 'bool',
        'pre_mapping': 'dict(str, int)',
        'include_predicted': 'bool',
        'with_absent': 'bool',
        'with_computations': 'list[SciExportTypeEnum]',
        'formulae': 'dict(str, str)'
    }

    attribute_map = {
        'collection_id': 'collection_id',
        'dry_run': 'dry_run',
        'pre_mapping': 'pre_mapping',
        'include_predicted': 'include_predicted',
        'with_absent': 'with_absent',
        'with_computations': 'with_computations',
        'formulae': 'formulae'
    }

    def __init__(self, collection_id=None, dry_run=False, pre_mapping=None, include_predicted=False, with_absent=False, with_computations=[], formulae=None, local_vars_configuration=None):  # noqa: E501
        """DarwinCoreExportReq - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._collection_id = None
        self._dry_run = None
        self._pre_mapping = None
        self._include_predicted = None
        self._with_absent = None
        self._with_computations = None
        self._formulae = None
        self.discriminator = None

        self.collection_id = collection_id
        if dry_run is not None:
            self.dry_run = dry_run
        if pre_mapping is not None:
            self.pre_mapping = pre_mapping
        if include_predicted is not None:
            self.include_predicted = include_predicted
        if with_absent is not None:
            self.with_absent = with_absent
        if with_computations is not None:
            self.with_computations = with_computations
        if formulae is not None:
            self.formulae = formulae

    @property
    def collection_id(self):
        """Gets the collection_id of this DarwinCoreExportReq.  # noqa: E501

        The collection to export, by its internal Id.  # noqa: E501

        :return: The collection_id of this DarwinCoreExportReq.  # noqa: E501
        :rtype: int
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this DarwinCoreExportReq.

        The collection to export, by its internal Id.  # noqa: E501

        :param collection_id: The collection_id of this DarwinCoreExportReq.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and collection_id is None:  # noqa: E501
            raise ValueError("Invalid value for `collection_id`, must not be `None`")  # noqa: E501

        self._collection_id = collection_id

    @property
    def dry_run(self):
        """Gets the dry_run of this DarwinCoreExportReq.  # noqa: E501

        If set, then only a diagnostic of doability will be done.  # noqa: E501

        :return: The dry_run of this DarwinCoreExportReq.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this DarwinCoreExportReq.

        If set, then only a diagnostic of doability will be done.  # noqa: E501

        :param dry_run: The dry_run of this DarwinCoreExportReq.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    @property
    def pre_mapping(self):
        """Gets the pre_mapping of this DarwinCoreExportReq.  # noqa: E501

        Mapping from present taxon (key) to output replacement one (value). Use a null replacement to _discard_ the present taxon. Note: These are EcoTaxa categories, WoRMS mapping happens after, whatever.  # noqa: E501

        :return: The pre_mapping of this DarwinCoreExportReq.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._pre_mapping

    @pre_mapping.setter
    def pre_mapping(self, pre_mapping):
        """Sets the pre_mapping of this DarwinCoreExportReq.

        Mapping from present taxon (key) to output replacement one (value). Use a null replacement to _discard_ the present taxon. Note: These are EcoTaxa categories, WoRMS mapping happens after, whatever.  # noqa: E501

        :param pre_mapping: The pre_mapping of this DarwinCoreExportReq.  # noqa: E501
        :type: dict(str, int)
        """

        self._pre_mapping = pre_mapping

    @property
    def include_predicted(self):
        """Gets the include_predicted of this DarwinCoreExportReq.  # noqa: E501

        If set, then predicted objects, as well as validated ones, will be exported. A validation status will allow to distinguish between the two possible statuses.  # noqa: E501

        :return: The include_predicted of this DarwinCoreExportReq.  # noqa: E501
        :rtype: bool
        """
        return self._include_predicted

    @include_predicted.setter
    def include_predicted(self, include_predicted):
        """Sets the include_predicted of this DarwinCoreExportReq.

        If set, then predicted objects, as well as validated ones, will be exported. A validation status will allow to distinguish between the two possible statuses.  # noqa: E501

        :param include_predicted: The include_predicted of this DarwinCoreExportReq.  # noqa: E501
        :type: bool
        """

        self._include_predicted = include_predicted

    @property
    def with_absent(self):
        """Gets the with_absent of this DarwinCoreExportReq.  # noqa: E501

        If set, then *absent* records will be generated, in the relevant samples, for categories present in other samples.  # noqa: E501

        :return: The with_absent of this DarwinCoreExportReq.  # noqa: E501
        :rtype: bool
        """
        return self._with_absent

    @with_absent.setter
    def with_absent(self, with_absent):
        """Sets the with_absent of this DarwinCoreExportReq.

        If set, then *absent* records will be generated, in the relevant samples, for categories present in other samples.  # noqa: E501

        :param with_absent: The with_absent of this DarwinCoreExportReq.  # noqa: E501
        :type: bool
        """

        self._with_absent = with_absent

    @property
    def with_computations(self):
        """Gets the with_computations of this DarwinCoreExportReq.  # noqa: E501

        Compute organisms abundances (ABO), concentrations (CNC) or biovolumes (BIV). Several possible.  # noqa: E501

        :return: The with_computations of this DarwinCoreExportReq.  # noqa: E501
        :rtype: list[SciExportTypeEnum]
        """
        return self._with_computations

    @with_computations.setter
    def with_computations(self, with_computations):
        """Sets the with_computations of this DarwinCoreExportReq.

        Compute organisms abundances (ABO), concentrations (CNC) or biovolumes (BIV). Several possible.  # noqa: E501

        :param with_computations: The with_computations of this DarwinCoreExportReq.  # noqa: E501
        :type: list[SciExportTypeEnum]
        """

        self._with_computations = with_computations

    @property
    def formulae(self):
        """Gets the formulae of this DarwinCoreExportReq.  # noqa: E501

        Transitory: How to get values from DB free columns. Python syntax, prefixes are 'sam', 'ssm' and 'obj'. Variables used in computations are 'total_water_volume', 'subsample_coef' and 'individual_volume'  # noqa: E501

        :return: The formulae of this DarwinCoreExportReq.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._formulae

    @formulae.setter
    def formulae(self, formulae):
        """Sets the formulae of this DarwinCoreExportReq.

        Transitory: How to get values from DB free columns. Python syntax, prefixes are 'sam', 'ssm' and 'obj'. Variables used in computations are 'total_water_volume', 'subsample_coef' and 'individual_volume'  # noqa: E501

        :param formulae: The formulae of this DarwinCoreExportReq.  # noqa: E501
        :type: dict(str, str)
        """

        self._formulae = formulae

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DarwinCoreExportReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DarwinCoreExportReq):
            return True

        return self.to_dict() != other.to_dict()

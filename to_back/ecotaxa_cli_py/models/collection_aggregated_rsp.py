# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.41
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from to_back.ecotaxa_cli_py.configuration import Configuration


class CollectionAggregatedRsp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'can_be_administered': 'bool',
        'instrument': 'str',
        'access': 'AccessLevelEnum',
        'initclassiflist': 'str',
        'classiffieldlist': 'str',
        'cnn_network_id': 'str',
        'status': 'str',
        'creator_users': 'list[MinUserModel]',
        'privileges': 'dict(str, list[MinUserModel])',
        'freecols': 'dict(str, dict(str, str))',
        'excluded': 'dict(str, list[int])'
    }

    attribute_map = {
        'can_be_administered': 'can_be_administered',
        'instrument': 'instrument',
        'access': 'access',
        'initclassiflist': 'initclassiflist',
        'classiffieldlist': 'classiffieldlist',
        'cnn_network_id': 'cnn_network_id',
        'status': 'status',
        'creator_users': 'creator_users',
        'privileges': 'privileges',
        'freecols': 'freecols',
        'excluded': 'excluded'
    }

    def __init__(self, can_be_administered=False, instrument='?', access=None, initclassiflist=None, classiffieldlist=None, cnn_network_id=None, status=None, creator_users=[], privileges=None, freecols=None, excluded=None, local_vars_configuration=None):  # noqa: E501
        """CollectionAggregatedRsp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._can_be_administered = None
        self._instrument = None
        self._access = None
        self._initclassiflist = None
        self._classiffieldlist = None
        self._cnn_network_id = None
        self._status = None
        self._creator_users = None
        self._privileges = None
        self._freecols = None
        self._excluded = None
        self.discriminator = None

        if can_be_administered is not None:
            self.can_be_administered = can_be_administered
        if instrument is not None:
            self.instrument = instrument
        if access is not None:
            self.access = access
        self.initclassiflist = initclassiflist
        self.classiffieldlist = classiffieldlist
        self.cnn_network_id = cnn_network_id
        self.status = status
        if creator_users is not None:
            self.creator_users = creator_users
        if privileges is not None:
            self.privileges = privileges
        if freecols is not None:
            self.freecols = freecols
        if excluded is not None:
            self.excluded = excluded

    @property
    def can_be_administered(self):
        """Gets the can_be_administered of this CollectionAggregatedRsp.  # noqa: E501

        Whether the current user is manager of all collection projects  # noqa: E501

        :return: The can_be_administered of this CollectionAggregatedRsp.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_administered

    @can_be_administered.setter
    def can_be_administered(self, can_be_administered):
        """Sets the can_be_administered of this CollectionAggregatedRsp.

        Whether the current user is manager of all collection projects  # noqa: E501

        :param can_be_administered: The can_be_administered of this CollectionAggregatedRsp.  # noqa: E501
        :type: bool
        """

        self._can_be_administered = can_be_administered

    @property
    def instrument(self):
        """Gets the instrument of this CollectionAggregatedRsp.  # noqa: E501

        The collection instrument from projects.  # noqa: E501

        :return: The instrument of this CollectionAggregatedRsp.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this CollectionAggregatedRsp.

        The collection instrument from projects.  # noqa: E501

        :param instrument: The instrument of this CollectionAggregatedRsp.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def access(self):
        """Gets the access of this CollectionAggregatedRsp.  # noqa: E501

        The restricted access for collection projects.PUBLIC: \"1\", OPEN: \"2\", PRIVATE: \"0\"  # noqa: E501

        :return: The access of this CollectionAggregatedRsp.  # noqa: E501
        :rtype: AccessLevelEnum
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this CollectionAggregatedRsp.

        The restricted access for collection projects.PUBLIC: \"1\", OPEN: \"2\", PRIVATE: \"0\"  # noqa: E501

        :param access: The access of this CollectionAggregatedRsp.  # noqa: E501
        :type: AccessLevelEnum
        """

        self._access = access

    @property
    def initclassiflist(self):
        """Gets the initclassiflist of this CollectionAggregatedRsp.  # noqa: E501

         Aggregated categories from the collection projects.  # noqa: E501

        :return: The initclassiflist of this CollectionAggregatedRsp.  # noqa: E501
        :rtype: str
        """
        return self._initclassiflist

    @initclassiflist.setter
    def initclassiflist(self, initclassiflist):
        """Sets the initclassiflist of this CollectionAggregatedRsp.

         Aggregated categories from the collection projects.  # noqa: E501

        :param initclassiflist: The initclassiflist of this CollectionAggregatedRsp.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and initclassiflist is None:  # noqa: E501
            raise ValueError("Invalid value for `initclassiflist`, must not be `None`")  # noqa: E501

        self._initclassiflist = initclassiflist

    @property
    def classiffieldlist(self):
        """Gets the classiffieldlist of this CollectionAggregatedRsp.  # noqa: E501

         Aggregated sorting and displaying fields from the collection projects.  # noqa: E501

        :return: The classiffieldlist of this CollectionAggregatedRsp.  # noqa: E501
        :rtype: str
        """
        return self._classiffieldlist

    @classiffieldlist.setter
    def classiffieldlist(self, classiffieldlist):
        """Sets the classiffieldlist of this CollectionAggregatedRsp.

         Aggregated sorting and displaying fields from the collection projects.  # noqa: E501

        :param classiffieldlist: The classiffieldlist of this CollectionAggregatedRsp.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and classiffieldlist is None:  # noqa: E501
            raise ValueError("Invalid value for `classiffieldlist`, must not be `None`")  # noqa: E501

        self._classiffieldlist = classiffieldlist

    @property
    def cnn_network_id(self):
        """Gets the cnn_network_id of this CollectionAggregatedRsp.  # noqa: E501

         Common deep features for the collection projects. Can be None (???)  # noqa: E501

        :return: The cnn_network_id of this CollectionAggregatedRsp.  # noqa: E501
        :rtype: str
        """
        return self._cnn_network_id

    @cnn_network_id.setter
    def cnn_network_id(self, cnn_network_id):
        """Sets the cnn_network_id of this CollectionAggregatedRsp.

         Common deep features for the collection projects. Can be None (???)  # noqa: E501

        :param cnn_network_id: The cnn_network_id of this CollectionAggregatedRsp.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cnn_network_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cnn_network_id`, must not be `None`")  # noqa: E501

        self._cnn_network_id = cnn_network_id

    @property
    def status(self):
        """Gets the status of this CollectionAggregatedRsp.  # noqa: E501

         the restricted collection status calculated from projects.  # noqa: E501

        :return: The status of this CollectionAggregatedRsp.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CollectionAggregatedRsp.

         the restricted collection status calculated from projects.  # noqa: E501

        :param status: The status of this CollectionAggregatedRsp.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def creator_users(self):
        """Gets the creator_users of this CollectionAggregatedRsp.  # noqa: E501

        Annotators extracted from history.  # noqa: E501

        :return: The creator_users of this CollectionAggregatedRsp.  # noqa: E501
        :rtype: list[MinUserModel]
        """
        return self._creator_users

    @creator_users.setter
    def creator_users(self, creator_users):
        """Sets the creator_users of this CollectionAggregatedRsp.

        Annotators extracted from history.  # noqa: E501

        :param creator_users: The creator_users of this CollectionAggregatedRsp.  # noqa: E501
        :type: list[MinUserModel]
        """

        self._creator_users = creator_users

    @property
    def privileges(self):
        """Gets the privileges of this CollectionAggregatedRsp.  # noqa: E501

        Aggregated user privileges of projects with user minimal right on projects  # noqa: E501

        :return: The privileges of this CollectionAggregatedRsp.  # noqa: E501
        :rtype: dict(str, list[MinUserModel])
        """
        return self._privileges

    @privileges.setter
    def privileges(self, privileges):
        """Sets the privileges of this CollectionAggregatedRsp.

        Aggregated user privileges of projects with user minimal right on projects  # noqa: E501

        :param privileges: The privileges of this CollectionAggregatedRsp.  # noqa: E501
        :type: dict(str, list[MinUserModel])
        """

        self._privileges = privileges

    @property
    def freecols(self):
        """Gets the freecols of this CollectionAggregatedRsp.  # noqa: E501

        Common free cols of projects.  # noqa: E501

        :return: The freecols of this CollectionAggregatedRsp.  # noqa: E501
        :rtype: dict(str, dict(str, str))
        """
        return self._freecols

    @freecols.setter
    def freecols(self, freecols):
        """Sets the freecols of this CollectionAggregatedRsp.

        Common free cols of projects.  # noqa: E501

        :param freecols: The freecols of this CollectionAggregatedRsp.  # noqa: E501
        :type: dict(str, dict(str, str))
        """

        self._freecols = freecols

    @property
    def excluded(self):
        """Gets the excluded of this CollectionAggregatedRsp.  # noqa: E501

        Excluded projects for common values   # noqa: E501

        :return: The excluded of this CollectionAggregatedRsp.  # noqa: E501
        :rtype: dict(str, list[int])
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded):
        """Sets the excluded of this CollectionAggregatedRsp.

        Excluded projects for common values   # noqa: E501

        :param excluded: The excluded of this CollectionAggregatedRsp.  # noqa: E501
        :type: dict(str, list[int])
        """

        self._excluded = excluded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionAggregatedRsp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CollectionAggregatedRsp):
            return True

        return self.to_dict() != other.to_dict()

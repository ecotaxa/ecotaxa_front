# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.41
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from to_back.ecotaxa_cli_py.configuration import Configuration


class MinimalCollectionBO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'external_id': 'str',
        'title': 'str',
        'short_title': 'str',
        'provider_user': 'int',
        'contact_user': 'int',
        'project_ids': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'external_id': 'external_id',
        'title': 'title',
        'short_title': 'short_title',
        'provider_user': 'provider_user',
        'contact_user': 'contact_user',
        'project_ids': 'project_ids'
    }

    def __init__(self, id=None, external_id=None, title=None, short_title=None, provider_user=None, contact_user=None, project_ids=None, local_vars_configuration=None):  # noqa: E501
        """MinimalCollectionBO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._external_id = None
        self._title = None
        self._short_title = None
        self._provider_user = None
        self._contact_user = None
        self._project_ids = None
        self.discriminator = None

        self.id = id
        if external_id is not None:
            self.external_id = external_id
        self.title = title
        if short_title is not None:
            self.short_title = short_title
        self.provider_user = provider_user
        if contact_user is not None:
            self.contact_user = contact_user
        self.project_ids = project_ids

    @property
    def id(self):
        """Gets the id of this MinimalCollectionBO.  # noqa: E501


        :return: The id of this MinimalCollectionBO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MinimalCollectionBO.


        :param id: The id of this MinimalCollectionBO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this MinimalCollectionBO.  # noqa: E501


        :return: The external_id of this MinimalCollectionBO.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this MinimalCollectionBO.


        :param external_id: The external_id of this MinimalCollectionBO.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def title(self):
        """Gets the title of this MinimalCollectionBO.  # noqa: E501


        :return: The title of this MinimalCollectionBO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MinimalCollectionBO.


        :param title: The title of this MinimalCollectionBO.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def short_title(self):
        """Gets the short_title of this MinimalCollectionBO.  # noqa: E501


        :return: The short_title of this MinimalCollectionBO.  # noqa: E501
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """Sets the short_title of this MinimalCollectionBO.


        :param short_title: The short_title of this MinimalCollectionBO.  # noqa: E501
        :type: str
        """

        self._short_title = short_title

    @property
    def provider_user(self):
        """Gets the provider_user of this MinimalCollectionBO.  # noqa: E501


        :return: The provider_user of this MinimalCollectionBO.  # noqa: E501
        :rtype: int
        """
        return self._provider_user

    @provider_user.setter
    def provider_user(self, provider_user):
        """Sets the provider_user of this MinimalCollectionBO.


        :param provider_user: The provider_user of this MinimalCollectionBO.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and provider_user is None:  # noqa: E501
            raise ValueError("Invalid value for `provider_user`, must not be `None`")  # noqa: E501

        self._provider_user = provider_user

    @property
    def contact_user(self):
        """Gets the contact_user of this MinimalCollectionBO.  # noqa: E501


        :return: The contact_user of this MinimalCollectionBO.  # noqa: E501
        :rtype: int
        """
        return self._contact_user

    @contact_user.setter
    def contact_user(self, contact_user):
        """Sets the contact_user of this MinimalCollectionBO.


        :param contact_user: The contact_user of this MinimalCollectionBO.  # noqa: E501
        :type: int
        """

        self._contact_user = contact_user

    @property
    def project_ids(self):
        """Gets the project_ids of this MinimalCollectionBO.  # noqa: E501


        :return: The project_ids of this MinimalCollectionBO.  # noqa: E501
        :rtype: list[int]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this MinimalCollectionBO.


        :param project_ids: The project_ids of this MinimalCollectionBO.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and project_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `project_ids`, must not be `None`")  # noqa: E501

        self._project_ids = project_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MinimalCollectionBO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MinimalCollectionBO):
            return True

        return self.to_dict() != other.to_dict()
